<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>YOLOv4-tiny在jetson nano(TX2)下的实时目标检测</title>
    <link href="/2021/11/03/YOLOv4-tiny%E5%9C%A8jetson%20nano(TX2)%E4%B8%8B%E7%9A%84%E5%AE%9E%E6%97%B6%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/"/>
    <url>/2021/11/03/YOLOv4-tiny%E5%9C%A8jetson%20nano(TX2)%E4%B8%8B%E7%9A%84%E5%AE%9E%E6%97%B6%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>深度学习</category>
      
      <category>jetson</category>
      
    </categories>
    
    
    <tags>
      
      <tag>YOLO</tag>
      
      <tag>实时目标识别检测</tag>
      
      <tag>jetson nano</tag>
      
      <tag>onnx</tag>
      
      <tag>tensorRT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>极本穷源：ROS篇</title>
    <link href="/2021/11/03/ROS%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/"/>
    <url>/2021/11/03/ROS%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="ROS入门"><a href="#ROS入门" class="headerlink" title="ROS入门"></a>ROS入门</h1><h2 id="ROS（Robot-Operating-System）机器人操作系统"><a href="#ROS（Robot-Operating-System）机器人操作系统" class="headerlink" title="ROS（Robot Operating System）机器人操作系统"></a>ROS（Robot Operating System）机器人操作系统</h2><p>本文素材来自古月ROS入门21讲</p><h3 id="概念"><a href="#概念" class="headerlink" title="*   概念"></a>*   概念</h3><p><img src="https://api2.mubu.com/v3/document_image/c87a74b2-8988-4d4b-98ca-ed5cdd7fc166-1995134.jpg"></p><h3 id="发展"><a href="#发展" class="headerlink" title="*   发展"></a>*   发展</h3><p><img src="https://api2.mubu.com/v3/document_image/25835449-1fbe-49b2-aabb-ff6acc6ba3f3-1995134.jpg"></p><h3 id="应用"><a href="#应用" class="headerlink" title="*   应用"></a>*   应用</h3><p><img src="https://api2.mubu.com/v3/document_image/e24956d2-c6eb-4b91-8790-2ccdc8b5b4ee-1995134.jpg"></p><h3 id="通信机制"><a href="#通信机制" class="headerlink" title="*   通信机制"></a>*   通信机制</h3><p><img src="https://api2.mubu.com/v3/document_image/d53494c7-f6f7-45db-a197-970297df1a0c-1995134.jpg"></p><h3 id="开发工具"><a href="#开发工具" class="headerlink" title="*   开发工具"></a>*   开发工具</h3><p><img src="https://api2.mubu.com/v3/document_image/6635e90b-5fba-4ab4-8293-8271b27ed50e-1995134.jpg"></p><h3 id="功能开发"><a href="#功能开发" class="headerlink" title="*   功能开发"></a>*   功能开发</h3><p><img src="https://api2.mubu.com/v3/document_image/d197d5d4-2936-4189-a7b5-336fd9ffc0de-1995134.jpg"></p><h3 id="ROS生态系统"><a href="#ROS生态系统" class="headerlink" title="*   ROS生态系统"></a>*   ROS生态系统</h3><p><img src="https://api2.mubu.com/v3/document_image/551bc7c6-39ac-4f75-a418-2ab45d03b15d-1995134.jpg"></p><h2 id="ROS节点实现：SLAM（同步定位与地图构建）（C-）、A-Dijkstra（最短路径规划）、YOLO（目标识别检测）（python）"><a href="#ROS节点实现：SLAM（同步定位与地图构建）（C-）、A-Dijkstra（最短路径规划）、YOLO（目标识别检测）（python）" class="headerlink" title="*   ROS节点实现：SLAM（同步定位与地图构建）（C++）、A* Dijkstra（最短路径规划）、YOLO（目标识别检测）（python）"></a>*   ROS节点实现：SLAM（同步定位与地图构建）（C++）、A* Dijkstra（最短路径规划）、YOLO（目标识别检测）（python）</h2><p><img src="https://api2.mubu.com/v3/document_image/0b6f1922-049d-4c96-a655-168ea5e181e4-1995134.jpg"></p><p>单片机 Arduino MCU 主频 Mb，PC、 树莓派、jetson系列 主频 Gb</p><h2 id="一个典型的ROS机器人"><a href="#一个典型的ROS机器人" class="headerlink" title="*   一个典型的ROS机器人"></a>*   一个典型的ROS机器人</h2><p>Turtlebot：激光雷达（360°深度信息，SLAM导航）、树莓派（应用层：ROS功能包功能实现SLAM等）、OpenCR（底层运动处理，电机PID闭环控制，传感器采集..）</p><p><img src="https://api2.mubu.com/v3/document_image/7322f84d-dace-4ea3-bc99-84ecf248c6d6-1995134.jpg"><br><img src="https://api2.mubu.com/v3/document_image/3ddad4db-8f71-4cfb-a457-ea28922cd9c8-1995134.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>极本穷源</category>
      
    </categories>
    
    
    <tags>
      
      <tag>古月居</tag>
      
      <tag>机器人</tag>
      
      <tag>ROS基础</tag>
      
      <tag>ROS节点</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>添加gitalk博客评价插件</title>
    <link href="/2021/11/03/%E6%B7%BB%E5%8A%A0gitalk%E6%8F%92%E4%BB%B6/"/>
    <url>/2021/11/03/%E6%B7%BB%E5%8A%A0gitalk%E6%8F%92%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="添加gitalk博客评价插件"><a href="#添加gitalk博客评价插件" class="headerlink" title="添加gitalk博客评价插件"></a>添加gitalk博客评价插件</h1><h2 id="前提："><a href="#前提：" class="headerlink" title="前提："></a>前提：</h2><h3 id="1-使用hexo-github搭建的个人博客"><a href="#1-使用hexo-github搭建的个人博客" class="headerlink" title="1.使用hexo+github搭建的个人博客"></a>1.使用hexo+github搭建的个人博客</h3><h3 id="2-没有绑定域名"><a href="#2-没有绑定域名" class="headerlink" title="2.没有绑定域名"></a>2.没有绑定域名</h3><h2 id="直接上方法："><a href="#直接上方法：" class="headerlink" title="直接上方法："></a>直接上方法：</h2><h3 id="1-创建存储评论的GitHub仓库"><a href="#1-创建存储评论的GitHub仓库" class="headerlink" title="1.创建存储评论的GitHub仓库"></a>1.创建存储评论的GitHub仓库</h3><p><img src="https://api2.mubu.com/v3/document_image/b6636d07-ef40-4a1e-ad52-0655c494eafb-1995134.jpg"></p><h3 id="2-初始化这个仓库"><a href="#2-初始化这个仓库" class="headerlink" title="2.初始化这个仓库"></a>2.初始化这个仓库</h3><h4 id="在setting里勾选issues选项"><a href="#在setting里勾选issues选项" class="headerlink" title="在setting里勾选issues选项"></a>在setting里勾选issues选项</h4><p><img src="https://api2.mubu.com/v3/document_image/a51fbf64-77fb-47ab-a762-9fc55a0adec8-1995134.jpg"></p><h4 id="创建一条issue"><a href="#创建一条issue" class="headerlink" title="创建一条issue"></a>创建一条issue</h4><p><img src="https://api2.mubu.com/v3/document_image/d5d11480-67dd-463a-aebe-4af25909854d-1995134.jpg"></p><h3 id="3-github注册应用"><a href="#3-github注册应用" class="headerlink" title="3.github注册应用"></a>3.<a href="https://github.com/settings/developers">github注册应用</a></h3><h4 id="注册applicantion"><a href="#注册applicantion" class="headerlink" title="注册applicantion"></a>注册applicantion</h4><p><img src="https://api2.mubu.com/v3/document_image/11335b94-2202-48f6-952c-6e7726b1cfeb-1995134.jpg"></p><h4 id="注册后生成的id、密码填到配置文件里"><a href="#注册后生成的id、密码填到配置文件里" class="headerlink" title="注册后生成的id、密码填到配置文件里"></a>注册后生成的id、密码填到配置文件里</h4><p><img src="https://api2.mubu.com/v3/document_image/1dbe45cf-54a8-4b08-a614-25e6074ea85e-1995134.jpg"></p><h3 id="4-修改主题的-config-yml文件，部署并预览"><a href="#4-修改主题的-config-yml文件，部署并预览" class="headerlink" title="4.修改主题的_config.yml文件，部署并预览"></a>4.修改主题的_config.yml文件，部署并预览</h3><p><img src="https://api2.mubu.com/v3/document_image/1051b4bd-11ed-447b-b58b-fbbcd3ec8246-1995134.jpg"></p><h4 id="部署一下"><a href="#部署一下" class="headerlink" title="部署一下"></a>部署一下</h4><p><img src="https://api2.mubu.com/v3/document_image/ba454b47-00e4-44e2-ae83-7aa7447ee113-1995134.jpg"></p><h4 id="随便打开一个博客看下"><a href="#随便打开一个博客看下" class="headerlink" title="随便打开一个博客看下"></a>随便打开一个博客看下</h4><p><img src="https://api2.mubu.com/v3/document_image/7d4606d2-294c-42a8-aa56-864a349af76c-1995134.jpg"></p><h4 id="点一下初始化issue-成了！"><a href="#点一下初始化issue-成了！" class="headerlink" title="点一下初始化issue,成了！"></a>点一下初始化issue,成了！</h4><p><img src="https://api2.mubu.com/v3/document_image/917094cf-6199-4ad8-922b-210496f81b7c-1995134.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>搭建个人博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>Fluid</tag>
      
      <tag>gitalk</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>简述通信协议栈和计算机网络的OSI模型</title>
    <link href="/2021/10/28/%E7%AE%80%E8%BF%B0%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE%E6%A0%88%E5%92%8C%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9A%84OSI%E6%A8%A1%E5%9E%8B/"/>
    <url>/2021/10/28/%E7%AE%80%E8%BF%B0%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE%E6%A0%88%E5%92%8C%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9A%84OSI%E6%A8%A1%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="简述通信协议栈和计算机网络的OSI模型"><a href="#简述通信协议栈和计算机网络的OSI模型" class="headerlink" title="简述通信协议栈和计算机网络的OSI模型"></a>简述通信协议栈和计算机网络的OSI模型</h1><ul><li>前段时间买了套无人机的通信控制模块，某宝上写的是开源，结果到手来了个只开源应用层（配套的应用软件）。我们需要的是网络层开源支持（与无人机直接通信的模块固件源码），只有拿到这部分代码才能把无人机载荷采集到的有用信息有效发挥，比如直接根据传感器信息控制无人机的自主飞行亦或是将载荷信息通过该通信链路传输到地面站，甚至可以是无人机结点间的信息交互，总之这份“价值超过500W源码”是不肯开源的。</li><li>被人怼就要吸取教训，今天就来学习总结下什么是通信协议栈，什么是计算机网络的OSI模型</li><li><h2 id="通信协议栈："><a href="#通信协议栈：" class="headerlink" title="通信协议栈："></a>通信协议栈：</h2><ul><li>简单来说就是一种网络通信协议的堆叠，网络协议就是通信双方约定好的通信规则。</li><li>协议栈的应运而生：数据在网络中的传输（寻址、抗干扰、加密、数据分割、压缩等）是极其复杂的。使用单一协议无法保障数据高速准确的传输，单一协议会导致协议冗余、复杂、难以优化，因此通过各层协议各司其职，互相配合使得通信效率更加高效。</li><li>通俗的打个比方：老板要下发一个工作通知到张三，（假设该协议栈只有两层：聊天层和纠错层）聊天层采用“通知内容转换协议” 把 “明天不上班” 这条消息转换为二进制的计算机信息：“01”，“01” 这条消息被传输到纠错层后采用 “信息无误就是1协议” 为 “01” 增加标志 “1或0”表示这条信息是否因受到网络传输干扰产生误差。那么张三有效收到“明台不上班”这条通知的二进制计算机信息就是“101”，这就是一个简单协议栈的基本原理。</li><li>比较常见的 TCP/IP 协议栈：<ul><li>TCP/IP 协议栈有四层结构：应用层、传输层、网络层、链路层。<ul><li>  <img src="https://api2.mubu.com/v3/document_image/c052fdaa-67cd-42dd-8510-ef4723604776-1995134.jpg"></li><li>  <img src="https://api2.mubu.com/v3/document_image/b8db84aa-90c9-4865-af9b-d820d1e7df01-1995134.jpg"></li></ul>  <a href="https://www.cnblogs.com/onepixel/p/7092302.html#:~:text=TCP%2FIP%20%E5%8D%8F%E8%AE%AE%E6%A0%88%E6%98%AF%E4%B8%80%E7%B3%BB%E5%88%97%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E7%9A%84%E6%80%BB%E5%92%8C%EF%BC%8C%E6%98%AF%E6%9E%84%E6%88%90%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E7%9A%84%E6%A0%B8%E5%BF%83%E9%AA%A8%E6%9E%B6%EF%BC%8C%E5%AE%83%E5%AE%9A%E4%B9%89%E4%BA%86%E7%94%B5%E5%AD%90%E8%AE%BE%E5%A4%87%E5%A6%82%E4%BD%95%E8%BF%9E%E5%85%A5%E5%9B%A0%E7%89%B9%E7%BD%91%EF%BC%8C%E4%BB%A5%E5%8F%8A%E6%95%B0%E6%8D%AE%E5%A6%82%E4%BD%95%E5%9C%A8%E5%AE%83%E4%BB%AC%E4%B9%8B%E9%97%B4%E8%BF%9B%E8%A1%8C%E4%BC%A0%E8%BE%93%E3%80%82%20TCP%2FIP,%E5%8D%8F%E8%AE%AE%E9%87%87%E7%94%A84%E5%B1%82%E7%BB%93%E6%9E%84%EF%BC%8C%E5%88%86%E5%88%AB%E6%98%AF%20%E5%BA%94%E7%94%A8%E5%B1%82%E3%80%81%E4%BC%A0%E8%BE%93%E5%B1%82%E3%80%81%E7%BD%91%E7%BB%9C%E5%B1%82%E5%92%8C%E9%93%BE%E8%B7%AF%E5%B1%82%20%EF%BC%8C%E6%AF%8F%E4%B8%80%E5%B1%82%E9%83%BD%E5%91%BC%E5%8F%AB%E5%AE%83%E7%9A%84%E4%B8%8B%E4%B8%80%E5%B1%82%E6%89%80%E6%8F%90%E4%BE%9B%E7%9A%84%E5%8D%8F%E8%AE%AE%E6%9D%A5%E5%AE%8C%E6%88%90%E8%87%AA%E5%B7%B1%E7%9A%84%E9%9C%80%E6%B1%82%E3%80%82">深入浅出 TCP/IP 协议栈 - 一像素 - 博客园 (cnblogs.com)</a></li><li><strong>链路层：</strong>将特定意义的数据（“明天上班”）加帧头、加帧尾构成一个数据包（数据帧），以广播的形式通过物理介质发送给接收方。以太网协议规定一组电信号就是一个数据包，一个数据包叫做一帧。帧头包含了目标MAC地址、源MAC地址和类型（大小为46-1500字节），以太网规协议又规定通信双方的网络设备必须安装有独一无二标识的网络适配器（这个标识就是网卡地址、数据包的发送地址和接收地址、也是帧头的MAC地址），帧尾提供校验数据是否损坏的校验序列；  协议数据单元在应用层、表示层和会话层被称做数据(Data)，在传输层被称做分段(Segment)，在网络层被称做包(Packet)，在数据链路层被称做帧(Frame)，在物理层被称做比特(Bit)。</li><li><strong>网络层：</strong>定义IP地址，确认主机所在的网络位置，并通过IP进行MAC寻址，对外网数据包进行路由转发；</li><li><strong>传输层：</strong>定义端口，确认主机上应用程序的身份，并将数据包交给对应的应用程序；</li><li><strong>应用层：</strong>定义数据格式，并按照对应的格式解读数据。</li></ul></li></ul></li><li><h2 id="计算机网络的OSI模型"><a href="#计算机网络的OSI模型" class="headerlink" title="计算机网络的OSI模型"></a>计算机网络的OSI模型</h2><ul><li>怎么来的OSI模型：说是有一群叫做国际标准化组织的人（ISO），试图为全世界互联的各种计算机制定一套网络标准框架。框架和模型：框架是处理流程，模型是描述问题的工具。OSI（开放式系统互联通信参考模型）就是这个框架下的一种模型。  <a href="https://zhuanlan.zhihu.com/p/144358305">计算机网络 OSI网络模型 - 知乎 (zhihu.com)</a></li><li>简述七层OSI模型：<strong>物理层</strong>—&gt;二进制比特流与光电信号的互相转换；<strong>数据链路层</strong>—&gt;互连的网络设备之间的帧识别与帧传输；<strong>网络层</strong>—&gt;同一子网的寻址，不同子网的路由转发；<strong>传输层</strong>—&gt;建立端对端的通信，确保通信的稳定；<strong>会话层</strong>—&gt;建立和断开通信连接，同步会话等；<strong>表示层</strong>—&gt;数据的转换（格式，加密和压缩），数据传输的承上启下；<strong>应用层</strong>—&gt;为用户使用的应用程序提供网络服务，建立数据传输连接。<ul><li>  <img src="https://api2.mubu.com/v3/document_image/d401e5a9-efd3-4e6a-a40b-d16c1ebb2d23-1995134.jpg"></li><li>  <img src="https://api2.mubu.com/v3/document_image/5f3592b0-1fc4-47df-97b7-10697525a070-1995134.jpg"></li></ul>  <a href="https://blog.csdn.net/mxxrgxg/article/details/89667016">(3条消息) 网络通讯基础（一）OSI七层模型和TCP/IP四层（五层）模型_mxxrgxg的博客-CSDN博客</a></li></ul></li><li><h2 id="七层OSI-与-四层TCP-IP-模型的对比"><a href="#七层OSI-与-四层TCP-IP-模型的对比" class="headerlink" title="七层OSI 与 四层TCP/IP 模型的对比"></a>七层OSI 与 四层TCP/IP 模型的对比</h2><ul><li>  <img src="https://api2.mubu.com/v3/document_image/71302899-dc99-4fea-93d0-738ba5bdee20-1995134.jpg"></li><li>  <img src="https://api2.mubu.com/v3/document_image/ddc5d814-ecec-4ae9-bf93-e4b665a44be9-1995134.jpg"></li></ul>  <a href="http://www.cppblog.com/andxie99/archive/2006/10/11/13559.html">TCP/IP的四层模型与OSI七层模型的有什么不同？</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>计算机网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>协议栈</tag>
      
      <tag>TCP/IP协议栈</tag>
      
      <tag>OSI模型</tag>
      
      <tag>TCP/IP模型</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>极本穷源：YOLO篇</title>
    <link href="/2021/10/26/YOLO%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/"/>
    <url>/2021/10/26/YOLO%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="YOLO-基础学习"><a href="#YOLO-基础学习" class="headerlink" title="YOLO 基础学习"></a>YOLO 基础学习</h1><h2 id="YOLOV3的网络架构"><a href="#YOLOV3的网络架构" class="headerlink" title="YOLOV3的网络架构"></a>YOLOV3的网络架构</h2><h3 id="卷积-池化-连接-上下采样"><a href="#卷积-池化-连接-上下采样" class="headerlink" title="卷积 池化 连接 上下采样"></a>卷积 池化 连接 上下采样</h3><ul><li><p><a href="https://www.matongxue.com/madocs/32/">什么是卷积？学过高等数学的对这个词都不陌生，具体参考马同学讲的。</a></p><p>  从数学上来讲“卷积”就是一种数学运算，  </p></li><li><p><a href="https://blog.csdn.net/stf1065716904/article/details/78450997?utm_source=app&app_version=4.17.2&code=app_1562916241&uLinkId=usr1mkqgl919blen">什么是图像的上下采样？</a></p><ul><li>缩小图像（或称为下采样（subsampled）或降采样（downsampled））的主要目的有两个：1、使得图像符合显示区域的大小；2、生成对应图像的缩略图。</li><li>放大图像（或称为上采样（upsampling）或图像插值（interpolating））的主要目的是放大原图像,从而可以显示在更高分辨率的显示设备上。</li><li>  对图像的缩放操作并不能带来更多关于该图像的信息, 因此图像的质量将不可避免地受到影响。然而，确实有一些缩放方法能够增加图像的信息，从而使得缩放后的图像质量超过原图质量的。</li></ul></li></ul><h2 id="YOLO-和-Tiny-YOLO-的关系"><a href="#YOLO-和-Tiny-YOLO-的关系" class="headerlink" title="YOLO 和 Tiny YOLO 的关系"></a>YOLO 和 Tiny YOLO 的关系</h2><h2 id="AI”炼丹”是啥"><a href="#AI”炼丹”是啥" class="headerlink" title="*   AI”炼丹”是啥"></a>*   AI”炼丹”是啥</h2><div class="hljs code-wrapper"><pre><code> 深度学习训练模型就像炼丹，没啥理论，纯靠实验，要有很多设备，动不动的训练好几天的数据</code></pre></div><h2 id="机器学习算法工程师都要干些啥"><a href="#机器学习算法工程师都要干些啥" class="headerlink" title="*   机器学习算法工程师都要干些啥"></a>*   机器学习算法工程师都要干些啥</h2><div class="hljs code-wrapper"><pre><code> 1.基于提出需求设计组合算法即策略解决问题，不限于深度学习，传统视觉，算法策略，大部分需求都是组合算法解决的，例如检测分类姿态等多模态模型组合并配合一些传统算法解决问题(pytorch/caffe opencv) 2.训练数据采集方案的设计，标注规则的指定以及数据审核 3.快速实现算法demo并验证算法逻辑策略部分以及评估自测(Python) 4.模型实际部署平台的性能资源占用和效率评估，评估ok走下一步，否则返回3步骤针对优化验证， 5.基于c/c++完成算法sdk库开发，其中涉及到模型多平台移植部署(涉及到后端nn推理框架的选用，前后处理部分代码的编写)，代码高性能优化(simd cuda openc,openmpl...) 6.算法库文档编写，外发sdk库</code></pre></div><h2 id="yolov3基础知识"><a href="#yolov3基础知识" class="headerlink" title="*   yolov3基础知识"></a>*   yolov3基础知识</h2><h3 id="上采样，下采样"><a href="#上采样，下采样" class="headerlink" title="*   上采样，下采样"></a>*   上采样，下采样</h3><p>##NMS是啥，如何进行NMS调参##</p><p>NMS（）：非极大化抑制算法。</p><h3 id="288-cfg"><a href="#288-cfg" class="headerlink" title="*   288.cfg"></a>*   288.cfg</h3><ul><li><p>  ignore_thresh = .7</p></li><li><p>  beta_nms=0.7</p></li><li><p>  result</p></li></ul><p>   <img src="https://api2.mubu.com/v3/document_image/6408bce3-2e06-4b00-b947-feb5692c6510-1995134.jpg"></p><h3 id="288-cfg-1"><a href="#288-cfg-1" class="headerlink" title="*   288.cfg"></a>*   288.cfg</h3><ul><li><p>  ignore_thresh = .7</p></li><li><p>  beta_nms=0.8</p></li><li><p>  result</p></li></ul><p>   <img src="https://api2.mubu.com/v3/document_image/b052fcbe-09b7-4670-8086-da3d412d0e24-1995134.jpg"></p><p>   <img src="https://api2.mubu.com/v3/document_image/fd585dd4-60de-43a3-9d2d-65b9c91dca3e-1995134.jpg"></p><h3 id="416-cfg"><a href="#416-cfg" class="headerlink" title="*   416.cfg"></a>*   416.cfg</h3><ul><li><p>  ignore_thresh = .7</p></li><li><p>  beta_nms=0.7</p></li><li><p>  result</p></li></ul><p>   <img src="https://api2.mubu.com/v3/document_image/f6a1caf4-cdaf-4eb2-a5b5-3686bc80812a-1995134.jpg"></p><h3 id="416-cfg-1"><a href="#416-cfg-1" class="headerlink" title="*   416.cfg"></a>*   416.cfg</h3><ul><li><p>  ignore_thresh = .7</p></li><li><p>  beta_nms=0.5</p></li><li><p>  result</p></li></ul><p>   <img src="https://api2.mubu.com/v3/document_image/d78d9cdb-b2f2-48d4-a7bf-0d9e75307ac6-1995134.jpg">    </p>]]></content>
    
    
    <categories>
      
      <category>极本穷源</category>
      
    </categories>
    
    
    <tags>
      
      <tag>YOLO</tag>
      
      <tag>卷积</tag>
      
      <tag>池化</tag>
      
      <tag>连接</tag>
      
      <tag>上下采样</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>YOLOv3在ubuntu20.04下训练自己的数据集(从“零”开始)</title>
    <link href="/2021/10/24/YOLOv3%E5%9C%A8ubuntu20-04%E4%B8%8B%E8%AE%AD%E7%BB%83%E8%87%AA%E5%B7%B1%E7%9A%84%E6%95%B0%E6%8D%AE%E9%9B%86/"/>
    <url>/2021/10/24/YOLOv3%E5%9C%A8ubuntu20-04%E4%B8%8B%E8%AE%AD%E7%BB%83%E8%87%AA%E5%B7%B1%E7%9A%84%E6%95%B0%E6%8D%AE%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<h1 id="YOLOv3在ubuntu20-04下训练自己的数据集"><a href="#YOLOv3在ubuntu20-04下训练自己的数据集" class="headerlink" title="YOLOv3在ubuntu20.04下训练自己的数据集"></a>YOLOv3在ubuntu20.04下训练自己的数据集</h1><ul><li><h2 id="背景基础"><a href="#背景基础" class="headerlink" title="背景基础"></a>背景基础</h2><ul><li>实现了在win10及树莓派4B下yolov3的配置及使用</li></ul></li><li><h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><ul><li>使用Ubuntu20.04下的yolov3 v4 对自己的数据集进行训练</li><li>将训练好的权重文件移植到机载树莓派上实现嵌入式系统实时的目标检测</li><li>利用机载树莓派实时的目标检测信息，将该点位置信息发送至感知无人机进行协作，同时将检测结果发送至地面站进行反馈</li></ul></li><li><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>  <a href="https://www.cnblogs.com/answerThe/p/11481564.html">darknet-yolov3训练自己的数据集（超详细） - AnswerThe - 博客园 (cnblogs.com)</a></p><ul><li><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><ul><li>Ubuntu20.04的安装（这里选择双系统安装）  <a href="https://blog.csdn.net/qq_31192383/article/details/78876905">(1条消息) win10+ubuntu双系统配置_CUG_UESTC的博客-CSDN博客</a><ul><li>下载镜像：<a href="https://mirrors.tuna.tsinghua.edu.cn/#">清华大学开源软件镜像站 | Tsinghua Open Source Mirror</a><ul><li>  <img src="https://api2.mubu.com/v3/document_image/80719875-f198-4590-b59f-353f63726145-1995134.jpg"></li></ul></li><li>制作启动盘  <a href="https://blog.csdn.net/YaoyuT/article/details/78003061?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522163115577116780269851676%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=163115577116780269851676&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v2~hot_rank-3-78003061.pc_v2_rank_blog_default&utm_term=ultraiso%E5%88%B6%E4%BD%9Cu%E7%9B%98%E5%90%AF%E5%8A%A8&spm=1018.2226.3001.4450">(1条消息) 用UltraISO制作Ubuntu16.04 U盘启动盘_YaoyuT的博客-CSDN博客</a><ul><li><a href="https://pan.baidu.com/s/1vLn589PheqaIgxiaiR9j-g">ubuntu20.04镜像百度网盘链接</a>提取码：dslz</li></ul></li><li>磁盘分配100G（102400MB）空间给ubuntu</li><li>遇到的坑<ul><li>刚买的新机器装不上旧版本的（18.04和16.04）Ubuntu（电脑配置11代8核i7-1180H 16G 512GSSD RTX3050），旧的台式机试过没问题</li><li>128G的大U盘在制作启动盘时需要将U盘格式为FAT32，写入镜像后不能正常安装，换个小容量U盘解决</li><li>设置电脑BIOS,很多新机器·默认uefi启动模式，在boot里并没有这个模式切换选项，但是有一个关闭UEFI的选项，关闭后就可切换到Legacy启动，一般来说开机按F12进入到图三的界面时有UEFI：的U盘时就是正确的引导模式<ul><li>  <img src="https://api2.mubu.com/v3/document_image/bcf0b29f-6600-49f0-8c8d-13237eed7a93-1995134.jpg"></li><li>  <img src="https://api2.mubu.com/v3/document_image/ef0f9d8d-4541-4bff-b9f3-25c464e0cb24-1995134.jpg"></li><li>  <img src="https://api2.mubu.com/v3/document_image/9bd9021e-77a9-4c82-8670-62318ddb9328-1995134.jpg"></li></ul></li></ul></li></ul></li></ul></li><li><h3 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h3><ul><li>cuda11.4+cudnn11.4  <a href="https://blog.csdn.net/weixin_43878078/article/details/88769931">(1条消息) ubuntu16.04+cuda8.0+cudnn5.1详细安装过程_weixin_43878078的博客-CSDN博客</a>  <a href="https://blog.csdn.net/hesongzefairy/article/details/105816736">(1条消息) Ubuntu18.04下复现YOLOv4（YOLOv3亦可）_hesongzefairy的博客-CSDN博客</a>​<ul><li>  下载cuda,终端输入：</li></ul>  <figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">wget</span> https://developer.download.nvidia.com/compute/cuda/<span class="hljs-number">11</span>.<span class="hljs-number">4</span>.<span class="hljs-number">1</span>/local_installers/cuda_<span class="hljs-number">11</span>.<span class="hljs-number">4</span>.<span class="hljs-number">1</span>_<span class="hljs-number">470</span>.<span class="hljs-number">57</span>.<span class="hljs-number">02</span>_linux.run <br></code></pre></div></td></tr></table></figure><ul><li>安装：  <figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">sudo</span> sh cuda\_<span class="hljs-number">11</span>.<span class="hljs-number">4</span>.<span class="hljs-number">1</span>\_<span class="hljs-number">470</span>.<span class="hljs-number">57</span>.<span class="hljs-number">02</span>_linux.run<br></code></pre></div></td></tr></table></figure></li><li>设置环境变量：  <figure class="highlight jboss-cli"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jboss-cli">sudo gedit ~<span class="hljs-string">/.bashrc</span> <br></code></pre></div></td></tr></table></figure><ul><li>打开配置文件并在末尾加上：<div class="hljs code-wrapper"><pre><code> <figure class="highlight awk"><table><tr><td class="gutter hljs"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">export PATH=<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/cuda-8.0/</span>bin<span class="hljs-variable">$&#123;PATH:+:$&#123;PATH&#125;</span>&#125;<br>export LD\_LIBRARY\_PATH=<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/cuda-8.0/</span>lib64<span class="hljs-variable">$&#123;LD\_LIBRARY\_PATH:+:$&#123;LD\_LIBRARY\_PATH&#125;</span>&#125;<br></code></pre></div></td></tr></table></figure>  </code></pre></li><li>按如下步骤进行：<ul><li>  <img src="https://api2.mubu.com/v3/document_image/a1e874b8-da96-4236-aa27-03f1a8bb05db-1995134.jpg"></li></ul></li><li>测试CUDA安装成了没：  <figure class="highlight ebnf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ebnf"><span class="hljs-attribute">nvcc -V</span><br></code></pre></div></td></tr></table></figure></li><li>下载cudnn <a href="https://developer.nvidia.com/cuda-toolkit-archive">下载官网匹配版本</a></li></ul></li></ul></li><li>opencv4.5.0:教程中的图文对应OPENCV版本号有问题，方法都一样  <a href="https://blog.csdn.net/weixin_40557160/article/details/111634569">(1条消息) Ubuntu20.04 配置Yolov4(gpu版，安装OpenCV，配置环境)_小菜彭-没拿过奖学金的废物的博客的博客-CSDN博客</a></li></ul></li><li><h3 id="训练数据"><a href="#训练数据" class="headerlink" title="训练数据"></a>训练数据</h3><ul><li><p><a href="https://www.cnblogs.com/answerThe/p/11481564.html">darknet-yolov3训练自己的数据集（超详细） - AnswerThe - 博客园 (cnblogs.com)</a></p></li><li><p>数据集可以用之前在Windows下标注的数据集，将之前标注好的图片和xml文件放到对应目录下。</p><ul><li>  <img src="https://api2.mubu.com/v3/document_image/5884d632-7dda-47c2-ad7a-4ff2d20b959c-1995134.jpg"></li><li>  <img src="https://api2.mubu.com/v3/document_image/593be5d3-522f-4b77-84e0-e30982a5b746-1995134.jpg"></li></ul></li><li><p>在myData目录下创建test.py</p>  <figure class="highlight vim"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vim">import os<br>import random<br>trainval_percent = <span class="hljs-number">0.1</span><br>train_percent = <span class="hljs-number">0.9</span><br>xmlfilepath = <span class="hljs-string">&#x27;Annotations&#x27;</span><br>txtsavepath = <span class="hljs-string">&#x27;ImageSets\Main&#x27;</span><br>total_xml = os.listdir(xmlfilepath)<br>num = <span class="hljs-built_in">len</span>(total_xml)<br><span class="hljs-keyword">list</span> = <span class="hljs-built_in">range</span>(num)<br>tv = <span class="hljs-keyword">int</span>(num * trainval_percent)<br><span class="hljs-keyword">tr</span> = <span class="hljs-keyword">int</span>(tv * train_percent)<br>trainval = random.sample(<span class="hljs-keyword">list</span>, tv)<br>train = random.sample(trainval, <span class="hljs-keyword">tr</span>)<br>ftrainval = <span class="hljs-keyword">open</span>(<span class="hljs-string">&#x27;ImageSets/Main/trainval.txt&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>)<br>ftest = <span class="hljs-keyword">open</span>(<span class="hljs-string">&#x27;ImageSets/Main/test.txt&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>)<br>ftrain = <span class="hljs-keyword">open</span>(<span class="hljs-string">&#x27;ImageSets/Main/train.txt&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>)<br>fval = <span class="hljs-keyword">open</span>(<span class="hljs-string">&#x27;ImageSets/Main/val.txt&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>)<br><span class="hljs-keyword">for</span> i in lis<span class="hljs-variable">t:</span><br>    name = total_xml[i][:-<span class="hljs-number">4</span>] + <span class="hljs-string">&#x27;\n&#x27;</span><br>    <span class="hljs-keyword">if</span> i in trainva<span class="hljs-variable">l:</span><br>        ftrainval.<span class="hljs-keyword">write</span>(name)<br>        <span class="hljs-keyword">if</span> i in train:<br>            ftest.<span class="hljs-keyword">write</span>(name)<br>        <span class="hljs-keyword">else</span>:<br>            fval.<span class="hljs-keyword">write</span>(name)<br>    <span class="hljs-keyword">else</span>:<br>        ftrain.<span class="hljs-keyword">write</span>(name)<br>ftrainval.<span class="hljs-keyword">close</span>()<br>ftrain.<span class="hljs-keyword">close</span>()<br>fval.<span class="hljs-keyword">close</span>()<br>ftest.<span class="hljs-keyword">close</span>()<br></code></pre></div></td></tr></table></figure><ul><li>运行test.py生成对应的四个txt文件运行<ul><li>  <img src="https://api2.mubu.com/v3/document_image/f6e20257-96ae-413c-8b86-efd0d271d0be-1995134.jpg"></li></ul></li><li>  用python脚本将数据集进行格式转换（YOLO 训练需要的格式），在darknet文件夹下新建一个my_lables.py文件(代码如下),运行后生成代表类别和相对位置的myData_train.txt，以及lables文件夹下的txt文件</li></ul>  <figure class="highlight processing"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs processing"><span class="hljs-keyword">import</span> xml.etree.ElementTree as ET<br><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">import</span> os<br>from os <span class="hljs-keyword">import</span> listdir, getcwd<br>from os.path <span class="hljs-keyword">import</span> <span class="hljs-built_in">join</span> #源代码sets=[(<span class="hljs-string">&#x27;2012&#x27;</span>, <span class="hljs-string">&#x27;train&#x27;</span>), (<span class="hljs-string">&#x27;2012&#x27;</span>, <span class="hljs-string">&#x27;val&#x27;</span>), (<span class="hljs-string">&#x27;2007&#x27;</span>, <span class="hljs-string">&#x27;train&#x27;</span>), (<span class="hljs-string">&#x27;2007&#x27;</span>, <span class="hljs-string">&#x27;val&#x27;</span>), (<span class="hljs-string">&#x27;2007&#x27;</span>, <span class="hljs-string">&#x27;test&#x27;</span>)]<br>sets=[(<span class="hljs-string">&#x27;myData&#x27;</span>, <span class="hljs-string">&#x27;train&#x27;</span>)]  # 改成自己建立的myData<br>classes = [<span class="hljs-string">&quot;people&quot;</span>] # 改成自己的类别<br>def convert(<span class="hljs-built_in">size</span>, <span class="hljs-built_in">box</span>):<br>    dw = <span class="hljs-number">1.</span>/(<span class="hljs-built_in">size</span>[<span class="hljs-number">0</span>])<br>    dh = <span class="hljs-number">1.</span>/(<span class="hljs-built_in">size</span>[<span class="hljs-number">1</span>])<br>    x = (<span class="hljs-built_in">box</span>[<span class="hljs-number">0</span>] + <span class="hljs-built_in">box</span>[<span class="hljs-number">1</span>])/<span class="hljs-number">2.0</span> - <span class="hljs-number">1</span><br>    y = (<span class="hljs-built_in">box</span>[<span class="hljs-number">2</span>] + <span class="hljs-built_in">box</span>[<span class="hljs-number">3</span>])/<span class="hljs-number">2.0</span> - <span class="hljs-number">1</span><br>    w = <span class="hljs-built_in">box</span>[<span class="hljs-number">1</span>] - <span class="hljs-built_in">box</span>[<span class="hljs-number">0</span>]<br>    h = <span class="hljs-built_in">box</span>[<span class="hljs-number">3</span>] - <span class="hljs-built_in">box</span>[<span class="hljs-number">2</span>]<br>    x = x*dw<br>    w = w*dw<br>    y = y*dh<br>    h = h*dh<br>    <span class="hljs-keyword">return</span> (x,y,w,h)<br>def convert_annotation(<span class="hljs-built_in">year</span>, image_id):<br>    in_file = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;myData/Annotations/%s.xml&#x27;</span>%(image_id))  # 源代码VOCdevkit/VOC%s/Annotations/%s.xml<br>    out_file = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;myData/labels/%s.txt&#x27;</span>%(image_id), <span class="hljs-string">&#x27;w&#x27;</span>)  # 源代码VOCdevkit/VOC%s/labels/%s.txt<br>    tree=ET.parse(in_file)<br>    root = tree.getroot()<br>    <span class="hljs-built_in">size</span> = root.find(<span class="hljs-string">&#x27;size&#x27;</span>)<br>    w = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">size</span>.find(<span class="hljs-string">&#x27;width&#x27;</span>).<span class="hljs-built_in">text</span>)<br>    h = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">size</span>.find(<span class="hljs-string">&#x27;height&#x27;</span>).<span class="hljs-built_in">text</span>)<br>    <span class="hljs-keyword">for</span> obj in root.iter(<span class="hljs-string">&#x27;object&#x27;</span>):<br>        difficult = obj.find(<span class="hljs-string">&#x27;difficult&#x27;</span>).<span class="hljs-built_in">text</span><br>        cls = obj.find(<span class="hljs-string">&#x27;name&#x27;</span>).<span class="hljs-built_in">text</span><br>        <span class="hljs-keyword">if</span> cls not in classes or <span class="hljs-built_in">int</span>(difficult)==<span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">continue</span><br>        cls_id = classes.index(cls)<br>        xmlbox = obj.find(<span class="hljs-string">&#x27;bndbox&#x27;</span>)<br>        b = (<span class="hljs-built_in">float</span>(xmlbox.find(<span class="hljs-string">&#x27;xmin&#x27;</span>).<span class="hljs-built_in">text</span>), <span class="hljs-built_in">float</span>(xmlbox.find(<span class="hljs-string">&#x27;xmax&#x27;</span>).<span class="hljs-built_in">text</span>), <span class="hljs-built_in">float</span>(xmlbox.find(<span class="hljs-string">&#x27;ymin&#x27;</span>).<span class="hljs-built_in">text</span>), <span class="hljs-built_in">float</span>(xmlbox.find(<span class="hljs-string">&#x27;ymax&#x27;</span>).<span class="hljs-built_in">text</span>))<br>        bb = convert((w,h), b)<br>        out_file.write(<span class="hljs-built_in">str</span>(cls_id) + <span class="hljs-string">&quot; &quot;</span> + <span class="hljs-string">&quot; &quot;</span>.<span class="hljs-built_in">join</span>([<span class="hljs-built_in">str</span>(a) <span class="hljs-keyword">for</span> a in bb]) + <span class="hljs-string">&#x27;\n&#x27;</span>)<br>wd = getcwd()<br><span class="hljs-keyword">for</span> <span class="hljs-built_in">year</span>, image_set in sets:<br>    <span class="hljs-keyword">if</span> not os.path.exists(<span class="hljs-string">&#x27;myData/labels/&#x27;</span>):  # 改成自己建立的myData<br>        os.makedirs(<span class="hljs-string">&#x27;myData/labels/&#x27;</span>)<br>    image_ids = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;myData/ImageSets/Main/%s.txt&#x27;</span>%(image_set)).read().strip().<span class="hljs-built_in">split</span>()<br>    list_file = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;myData/%s_%s.txt&#x27;</span>%(<span class="hljs-built_in">year</span>, image_set), <span class="hljs-string">&#x27;w&#x27;</span>)<br>    <span class="hljs-keyword">for</span> image_id in image_ids:<br>        list_file.write(<span class="hljs-string">&#x27;%s/myData/JPEGImages/%s.jpg\n&#x27;</span>%(wd, image_id))<br>        convert_annotation(<span class="hljs-built_in">year</span>, image_id)<br>    list_file.close()<br></code></pre></div></td></tr></table></figure><ul><li>  <img src="https://api2.mubu.com/v3/document_image/7750cee5-ad12-4224-aec5-b7bcbea3e55a-1995134.jpg"></li><li><img src="https://api2.mubu.com/v3/document_image/212f9f67-c4c6-4605-9222-773c47dbea7f-1995134.jpg"></li></ul></li><li><p>打开自己的cfg文件如图按照自己电脑配置修改训练批次和训练迭代次数。</p><ul><li>  <img src="https://api2.mubu.com/v3/document_image/e044ad96-7a31-409c-9624-eb9ec9617aa1-1995134.jpg"></li></ul></li><li><p>据实际情况分别修改三处classes（每个[yolo]下）,filters=(classes + 5)x3(每个[yolo]上的第一个[convolutional])。</p><ul><li>  <img src="https://api2.mubu.com/v3/document_image/c09e6352-12ba-472b-ac53-0f3acdb4fe9c-1995134.jpg"></li></ul></li><li><p>修改cfg/my_data.data</p><ul><li>  <img src="https://api2.mubu.com/v3/document_image/b60372b3-965c-4bd9-acd5-032502134267-1995134.jpg"></li></ul></li><li><p>新建myData.names</p><ul><li>  <img src="https://api2.mubu.com/v3/document_image/7e0a9e1e-25bf-483b-877f-80011ed272bb-1995134.jpg"></li></ul></li><li><p>下载预训练权重，网上找个拷贝进去</p><ul><li>  <img src="https://api2.mubu.com/v3/document_image/aebec69d-29cf-497a-9cf6-72fcf96bbb24-1995134.jpg"></li></ul><p>  预训练权重链接: <a href="https://pan.baidu.com/s/10HPZsmBP8mpU0HcHLgSk-Q">https://pan.baidu.com/s/10HPZsmBP8mpU0HcHLgSk-Q</a> 提取码: 76fq</p></li><li><p>开始训练：</p>  <figure class="highlight reasonml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs reasonml">./darknet detector train cfg/my\<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">_data</span>.</span></span>data cfg/my\<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">_yolov3</span>.</span></span>cfg darknet53.conv.<span class="hljs-number">74</span><br></code></pre></div></td></tr></table></figure></li><li><p>从停止处重新训练：</p>  <figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">.<span class="hljs-regexp">/darknet detector train cfg/my</span>\_data.data cfg<span class="hljs-regexp">/my\_yolov3.cfg darknet53.conv.74 -gups 0,1,2,3 myData/</span>weights/my_yolov3.backup -gpus <span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span><br></code></pre></div></td></tr></table></figure></li></ul></li></ul></li><li><h2 id="结果分析"><a href="#结果分析" class="headerlink" title="结果分析"></a>结果分析</h2><ul><li>纵坐标平均loss（误差）接近0.0359，即变化不大时可停止训练。横坐标batch（每batch（64）个样本更新一次参数）<ul><li>  <img src="https://api2.mubu.com/v3/document_image/b18024d9-3213-4aa9-91d2-bc348b9c1dde-1995134.jpg"></li></ul></li><li>当前训练的迭代次数: 6478,总体的 Loss(损失）:0.0279,平均 Loss:0.0359<ul><li>  <img src="https://api2.mubu.com/v3/document_image/c0b64427-911b-49ec-b27b-bc8ca0cb1b70-1995134.jpg"></li></ul></li><li>测试效果：<div class="hljs code-wrapper"><pre><code> <figure class="highlight reasonml"><table><tr><td class="gutter hljs"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs reasonml">./darknet detect cfg/my\<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">_yolov3</span>.</span></span>cfg weights/my\<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">_yolov3</span>.</span></span>weights <span class="hljs-number">72.</span>jpg<br></code></pre></div></td></tr></table></figure></code></pre><ul><li>  <img src="https://api2.mubu.com/v3/document_image/06fc433f-79c6-4fba-987c-674fc0b21ac0-1995134.jpg"></li></ul></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>深度学习</category>
      
      <category>Ubuntu</category>
      
    </categories>
    
    
    <tags>
      
      <tag>YOLO</tag>
      
      <tag>目标识别检测</tag>
      
      <tag>训练数据集</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>不花一分钱搭建个人博客</title>
    <link href="/2021/10/22/%E4%B8%8D%E8%8A%B1%E4%B8%80%E5%88%86%E9%92%B1%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <url>/2021/10/22/%E4%B8%8D%E8%8A%B1%E4%B8%80%E5%88%86%E9%92%B1%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="不花一分钱搭建个人博客，有手就行"><a href="#不花一分钱搭建个人博客，有手就行" class="headerlink" title="不花一分钱搭建个人博客，有手就行"></a>不花一分钱搭建个人博客，有手就行</h1><h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><ul><li><ul><li>前段时间在网上找代码，看到一位大佬的个人博客。<ul><li>  <img src="https://api2.mubu.com/v3/document_image/c552f8b5-68ee-4ea4-9576-f5302ab8f8c2-1995134.jpg"></li></ul></li><li>  看到网址后缀有github，对新鲜事物充满好奇又有动手能力的我。遇到这种情况怎么说，当然是打开CSDN 搜索关键字github.io。果然一大堆教程，又了解到一个用 Node.js 构建的快速、简洁且强大的博客框架:Hexo 。最初由Tommy Chen于2012年创建和维护。从那时起，它帮助成千上万的人建立了他们的梦想网站/博客。</li></ul></li></ul><h2 id="上手"><a href="#上手" class="headerlink" title="上手"></a>上手</h2><ul><li><h3 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h3><ul><li><ul><li>那么如何基于github和Hexo搭建个人博客呢<ul><li>  <img src="https://api2.mubu.com/v3/document_image/6f96f714-13aa-42b9-9de6-4c631644d4d8-1995134.jpg"></li></ul>  <a href="https://blog.csdn.net/qq_43270074/article/details/95392429">(3条消息) 搭建GitHub免费个人网站（详细教程）_苍何的博客-CSDN博客_用github搭建个人网站</a></li></ul></li></ul><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><ul><li><ul><li><p>注册gtihub</p></li><li><p><a href="https://blog.csdn.net/qq_41465646/article/details/107656044?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522163487906816780357299722%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=163487906816780357299722&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-107656044.pc_search_all_es&utm_term=%E5%AE%89%E8%A3%85node.js&spm=1018.2226.3001.4187">安装node.js</a></p></li><li><p><a href="https://blog.csdn.net/qq_19681347/article/details/90768640?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522163487998716780255286032%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=163487998716780255286032&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-90768640.pc_search_all_es&utm_term=git%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AEwin10&spm=1018.2226.3001.4187">安装</a>并<a href="https://blog.csdn.net/qq_43112598/article/details/106532649?ops_request_misc=&request_id=&biz_id=&utm_medium=distribute.pc_search_result.none-task-blog-2~all~es_rank~default-3-106532649.pc_search_all_es&utm_term=git%E9%85%8D%E7%BD%AE&spm=1018.2226.3001.4187">配置</a>git</p></li><li><p><a href="https://blog.csdn.net/qq_43270074/article/details/95392429">安装hexo并新建GitHub仓库</a></p></li><li><p><a href="https://blog.csdn.net/zgd826237710/article/details/99671027?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522163488033316780265429237%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=163488033316780265429237&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-99671027.pc_search_all_es&utm_term=hexo%E4%B8%BB%E9%A2%98&spm=1018.2226.3001.4187">修改主题</a>，网上搜hexo主题选择自己喜欢的风格</p><ul><li>感受下大家的魔改版<ul><li><a href="https://www.yunyoujun.cn/">云游君的小站 (yunyoujun.cn)</a><ul><li>  <img src="https://api2.mubu.com/v3/document_image/546214d8-9289-46dc-af37-2f6942a882bb-1995134.jpg"></li></ul></li><li><a href="https://hiitea.io/tech/">小白妹妹写代码</a><ul><li>  <img src="https://api2.mubu.com/v3/document_image/e63982f8-c667-4ffa-bed3-1aca3d486b47-1995134.jpg"></li></ul></li></ul></li></ul></li><li><p>部署好模板后，问题又来了：怎么写博客</p><ul><li>这里介绍下我自己的方法，在\hexo\source_posts目录下，新建.md的博客</li><li>内容格式如图，其中tag为标签，categories为分类<ul><li>  <img src="https://api2.mubu.com/v3/document_image/504629b0-35f5-4ef9-a435-bd1889b788a3-1995134.jpg"></li></ul></li></ul></li><li><p>  OK，现在模板有了，博客内容也有了。问题又来了：网站加载速度有时候特别慢，那咋办嘛                  *   用自己的服务器搭建的，可以试下CDN加速        *   换下图片存储的位置，网上有很多免费的<a href="https://imgtu.com/">图片托管</a>网站，但是一张一张的存太麻烦了        *   <img src="https://api2.mubu.com/v3/document_image/8eca4e2a-9f71-446a-8982-d5bc43bbd7ca-1995134.jpg">      *   直接存到<a href="https://mubu.com/">幕布</a>上，导出HTML文件，<a href="https://zhuanlan.zhihu.com/p/405404977">转为.md文件</a>，复制想要的内容到自己的博客中，适当修改下格式，大功告成。                </p></li></ul></li></ul><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><ul><li><ul><li>我选一款比较简洁的<a href="https://github.com/fluid-dev/hexo-theme-fluid">模板</a>，<a href="https://ethan1024.github.io/">欢迎来访</a>。，增加了页脚网站运行时间、不蒜子网页访问统计等功能</li><li>  <img src="https://api2.mubu.com/v3/document_image/b280872b-4d6d-4a0f-98de-b9909b09275f-1995134.jpg">   </li><li>  <img src="https://api2.mubu.com/v3/document_image/9e4cf9c8-166d-4c78-8ef2-31e3ffc19499-1995134.jpg"></li></ul></li></ul></li></ul><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><ul><li><ul><li>前后尝试试过几种模板，配置起来都不算难。遇到问题先百度下，祝你好运。<ul><li>  <img src="https://api2.mubu.com/v3/document_image/48b00250-fe3d-4631-8dee-d7a41ab03d49-1995134.jpg"></li></ul></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>搭建个人博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>YOLO算法在windows下训练自己的数据集</title>
    <link href="/2021/10/21/YOLO%E7%AE%97%E6%B3%95%E5%9C%A8windows%E4%B8%8B%E8%AE%AD%E7%BB%83%E8%87%AA%E5%B7%B1%E7%9A%84%E6%95%B0%E6%8D%AE%E9%9B%86/"/>
    <url>/2021/10/21/YOLO%E7%AE%97%E6%B3%95%E5%9C%A8windows%E4%B8%8B%E8%AE%AD%E7%BB%83%E8%87%AA%E5%B7%B1%E7%9A%84%E6%95%B0%E6%8D%AE%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<h1 id="YOLO算法在windows下训练自己的数据集"><a href="#YOLO算法在windows下训练自己的数据集" class="headerlink" title="YOLO算法在windows下训练自己的数据集"></a>YOLO算法在windows下训练自己的数据集</h1><h2 id="背景基础"><a href="#背景基础" class="headerlink" title="背景基础"></a>背景基础</h2><ul><li><p>  已有在官方权重下，YOLOV3算法在识别物体上的测试效果</p></li><li><p>  特定数据集的制作与训练实现特有的目标检测</p></li></ul><h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><p>xx目标的识别检测</p><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p><a href="https://blog.csdn.net/congcong7267/article/details/82981084">(1条消息) win10下yolov3训练自己的数据集_congcong7267的博客-CSDN博客</a></p><h3 id="训练自己的数据集、"><a href="#训练自己的数据集、" class="headerlink" title="训练自己的数据集、"></a>训练自己的数据集、</h3><div class="hljs code-wrapper"><pre><code>*   每种物体采集大概两三百张照片（距离、背景、光线）*   标注图片中的目标，制作数据集*   打开win10终端，cd进入darknet-master\\build\\darknet\\x64，darknet.exe detector train data/obj.data yolo-obj.cfg darknet53.conv.74 开始训练</code></pre></div><h3 id="生成权重文件移植到树莓派上进行测试"><a href="#生成权重文件移植到树莓派上进行测试" class="headerlink" title="生成权重文件移植到树莓派上进行测试"></a>生成权重文件移植到树莓派上进行测试</h3><div class="hljs code-wrapper"><pre><code>*   backup文件下最后一个权重文件复制到build\\darknet\\x64\*   打开win10终端，cd进入然后运行darknet-master\\build\\darknet\\x64路径*   输入：darknet.exe detector test data/obj.data yolo-obj.cfg yolo-obj\_100.weights（olo-obj\_100.weights为训练好的权重名）*   终端会提醒你输入图片路径，然后你输入测试图片的绝对路径即可看到效果</code></pre></div><h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><p><a href="https://blog.csdn.net/congcong7267/article/details/82981084">(2条消息) win10下yolov3训练自己的数据集_congcong7267的博客-CSDN博客</a></p><h3 id="新建yolo-obj-cfg文件，将batch-改成64-：batch-64，subdivisions-64"><a href="#新建yolo-obj-cfg文件，将batch-改成64-：batch-64，subdivisions-64" class="headerlink" title="新建yolo-obj.cfg文件，将batch 改成64 ：batch=64，subdivisions=64"></a>新建yolo-obj.cfg文件，将batch 改成64 ：batch=64，subdivisions=64</h3><p>在Darknet中，batch和subdivisions是结合使用的，例如设置batch=64，subdivisions=16，表示训练的过程中将一次性加载64张图片进内存，然后分16次完成前向传播，意思是每次4张，前向传播的循环过程中累加loss求平均，待64张图片都完成前向传播后，再一次性后传更新参数。(<a href="https://zhuanlan.zhihu.com/p/91587361">yolov3.cfg参数说明及调参经验 - 知乎 (zhihu.com)</a>)</p><h3 id="在build-darknet-x64-data-下新建obj-names文件，写入自己的类名"><a href="#在build-darknet-x64-data-下新建obj-names文件，写入自己的类名" class="headerlink" title="在build\darknet\x64\data\下新建obj.names文件，写入自己的类名"></a>在build\darknet\x64\data\下新建obj.names文件，写入自己的类名</h3><p><img src="https://api2.mubu.com/v3/document_image/70fa4c70-c6ff-4ce4-8466-b545569d3448-1995134.jpg"></p><h3 id="在build-darknet-x64-data-下新建obj-data文件"><a href="#在build-darknet-x64-data-下新建obj-data文件" class="headerlink" title="在build\darknet\x64\data\下新建obj.data文件"></a>在build\darknet\x64\data\下新建obj.data文件</h3><p>   <img src="https://api2.mubu.com/v3/document_image/8beaa8bd-abc0-4a83-ab1d-7566e368442f-1995134.jpg"></p><h3 id="制作数据集"><a href="#制作数据集" class="headerlink" title="制作数据集"></a>制作数据集</h3><ul><li>  图片批量顺序命名py脚本</li></ul><p>   <img src="https://api2.mubu.com/v3/document_image/17b4a336-e2d7-4566-83f2-f468af9acdb2-1995134.jpg"></p><ul><li>  使用<a href="https://blog.csdn.net/weixin_44345862/article/details/87039727?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522162996330516780255261821%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=162996330516780255261821&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-87039727.pc_search_result_control_group&utm_term=win10%E5%AE%89%E8%A3%85labelimg&spm=1018.2226.3001.4187">labelimg</a>标注图片中的目标，生成xml文件</li></ul><p>   <img src="https://api2.mubu.com/v3/document_image/94a3ebba-5085-4570-adf7-51a8602270d1-1995134.jpg"></p><div class="hljs code-wrapper"><pre><code>使用py脚本将xml文件转为txt文件<figure class="highlight python"><table><tr><td class="gutter hljs"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> xml.etree.ElementTree <span class="hljs-keyword">as</span> ET<br><br>dirpath = <span class="hljs-string">r&#x27;E:\gongzuo\伪代码\darknet\build\darknet\x64\data\txt&#x27;</span>  <span class="hljs-comment"># 原来存放xml文件的目录</span><br>newdir = <span class="hljs-string">r&#x27;E:\gongzuo\伪代码\darknet\build\darknet\x64\data\obj&#x27;</span>                <span class="hljs-comment"># 修改label后形成的txt目录</span><br><br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(newdir):<br>    os.makedirs(newdir)<br><br>dict_info = &#123;<span class="hljs-string">&#x27;person&#x27;</span>: <span class="hljs-number">0</span>&#125;              <span class="hljs-comment"># 有几个 属性 填写几个label names</span><br><br><span class="hljs-keyword">for</span> fp <span class="hljs-keyword">in</span> os.listdir(dirpath):<br>    <span class="hljs-keyword">if</span> fp.endswith(<span class="hljs-string">&#x27;.xml&#x27;</span>):<br>        root = ET.parse(os.path.join(dirpath, fp)).getroot()<br><br>        xmin, ymin, xmax, ymax = <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br>        sz = root.find(<span class="hljs-string">&#x27;size&#x27;</span>)<br>        width = <span class="hljs-built_in">float</span>(sz[<span class="hljs-number">0</span>].text)<br>        height = <span class="hljs-built_in">float</span>(sz[<span class="hljs-number">1</span>].text)<br>        filename = root.find(<span class="hljs-string">&#x27;filename&#x27;</span>).text<br>        <span class="hljs-keyword">for</span> child <span class="hljs-keyword">in</span> root.findall(<span class="hljs-string">&#x27;object&#x27;</span>):  <span class="hljs-comment"># 找到图片中的所有框</span><br><br>            sub = child.find(<span class="hljs-string">&#x27;bndbox&#x27;</span>)  <span class="hljs-comment"># 找到框的标注值并进行读取</span><br>            label = child.find(<span class="hljs-string">&#x27;name&#x27;</span>).text<br>            label_ = dict_info.get(label)<br>            <span class="hljs-keyword">if</span> label_:<br>                label_ = label_<br>            <span class="hljs-keyword">else</span>:<br>                label_ = <span class="hljs-number">0</span><br>            xmin = <span class="hljs-built_in">float</span>(sub[<span class="hljs-number">0</span>].text)<br>            ymin = <span class="hljs-built_in">float</span>(sub[<span class="hljs-number">1</span>].text)<br>            xmax = <span class="hljs-built_in">float</span>(sub[<span class="hljs-number">2</span>].text)<br>            ymax = <span class="hljs-built_in">float</span>(sub[<span class="hljs-number">3</span>].text)<br>            <span class="hljs-keyword">try</span>:  <span class="hljs-comment"># 转换成yolov3的标签格式，需要归一化到（0-1）的范围内</span><br>                x_center = (xmin + xmax) / (<span class="hljs-number">2</span> * width)<br>                x_center = <span class="hljs-string">&#x27;%.6f&#x27;</span> % x_center<br>                y_center = (ymin + ymax) / (<span class="hljs-number">2</span> * height)<br>                y_center = <span class="hljs-string">&#x27;%.6f&#x27;</span> % y_center<br>                w = (xmax - xmin) / width<br>                w = <span class="hljs-string">&#x27;%.6f&#x27;</span> % w<br>                h = (ymax - ymin) / height<br>                h = <span class="hljs-string">&#x27;%.6f&#x27;</span> % h<br>            <span class="hljs-keyword">except</span> ZeroDivisionError:<br>                <span class="hljs-built_in">print</span>(filename, <span class="hljs-string">&#x27;的 width有问题&#x27;</span>)<br>            <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(os.path.join(newdir, fp.split(<span class="hljs-string">&#x27;.xml&#x27;</span>)[<span class="hljs-number">0</span>] + <span class="hljs-string">&#x27;.txt&#x27;</span>), <span class="hljs-string">&#x27;a+&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>                f.write(<span class="hljs-string">&#x27; &#x27;</span>.join([<span class="hljs-built_in">str</span>(label_), <span class="hljs-built_in">str</span>(x_center), <span class="hljs-built_in">str</span>(y_center), <span class="hljs-built_in">str</span>(w), <span class="hljs-built_in">str</span>(h) + <span class="hljs-string">&#x27;\n&#x27;</span>]))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;ok&#x27;</span>)<br>   <br></code></pre></div></td></tr></table></figure></code></pre><ul><li><p>  将所有样本图片及对应的的txt文件)放到：build\darknet\x64\data\obj\</p></li><li><p>  在build\darknet\x64\data\下新建train.txt，训练图片的路径放入文件</p></li></ul><p>   <img src="https://api2.mubu.com/v3/document_image/75481850-e194-4fe2-8f7f-7e37ba9926a9-1995134.jpg"></p><p>   <img src="https://api2.mubu.com/v3/document_image/6dc36e99-f601-4ded-9332-ade4de302ae5-1995134.jpg"></p><ul><li>  将darknet的预训练权重放入build\darknet\x64</li></ul><p><a href="https://pan.baidu.com/s/1Gdo2gj1bggjUtW9CyYkIpQ">预训练权重文件</a> 密码：x5ht</p><ul><li><p>  在\darknet路径下修改网络配置文件Makefile</p></li><li><p>  对比官方makefile修改：（其中C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v11.4/ 为自己的CUDA安装路径）</p></li></ul><p>（<a href="https://pan.baidu.com/s/1PYKf-47WAgl9Jqs_d-Sx3w">下载链接</a> 提取码：jh1i））</p><div class="hljs code-wrapper"><pre><code>*   GPU=1 CUDNN=1*   NVCC=C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v11.4/bin/nvcc*   COMMON+= -DGPU -I/C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v11.4/include*   LDFLAGS+= -L/C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v11.4/lib -lcuda -lcudart -lcublas -lcurand*   打开cmd，cd进入darknet-master\\build\\darknet\\x64路径，输入：darknet.exe detector train data/obj.data yolo-obj.cfg darknet53.conv.74 开始训练*   avg loss接近0.XX且变化不大时可停止训练，将x64\\backup下的weight文件复制到\\x64下，cd进入darknet-master\\build\\darknet\\x64路径运行darknet.exe detector test data/obj.data yolo-obj.cfg yolo-obj_last.weights，程序会提示输入待检测图片的路径。</code></pre></div><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><ul><li>  纵坐标平均loss（误差）接近0.545，即变化不大时可停止训练。横坐标batch（每batch（64）个样本更新一次参数）</li></ul><p>   <img src="https://api2.mubu.com/v3/document_image/9d13e9f1-0210-46de-a2f9-049b44dced72-1995134.jpg"></p><ul><li><p>在YOLOv3中，Loss分为三个部分:</p><ul><li>1、一个是x、y、w、h部分带来的误差，也就是bbox带来的loss</li><li>2、一个是置信度带来的误差，也就是obj带来的loss</li><li>3、最后一个是类别带来的误差，也就是class带来的loss</li></ul></li><li><p>对比使用官方权重与自己训练的数据集检测目标时，由于检测结果受到样本数量的影响两者检测结果均不为理想。</p><p> <img src="https://api2.mubu.com/v3/document_image/b8d92392-4611-4df4-ae95-5785dcd0a57d-1995134.jpg"></p><p> <img src="https://api2.mubu.com/v3/document_image/8a2b8445-e813-40a3-9eb0-634136c5b403-1995134.jpg"></p><p> <img src="https://api2.mubu.com/v3/document_image/32153f95-4c39-43d3-a7ac-4a265ffce2f2-1995134.jpg"></p></li><li><p>  avg loss（误差）接近0.219时，基本不再变化</p></li></ul><p>   <img src="https://api2.mubu.com/v3/document_image/32e3faf5-64ec-4f8f-ab4c-0b62f5789f21-1995134.jpg"></p><p>####检测结果 ####</p><p>   <img src="https://api2.mubu.com/v3/document_image/896b339c-e6c6-4da3-87bb-f068aa9f8071-1995134.jpg"></p><p>   <img src="https://api2.mubu.com/v3/document_image/9c031abe-524b-416e-ab72-c18a2cbeb9a6-1995134.jpg"></p><p>   <img src="https://api2.mubu.com/v3/document_image/49ee54bf-5529-4721-b86b-26c59cfef737-1995134.jpg"></p><h4 id="参数分析："><a href="#参数分析：" class="headerlink" title="参数分析："></a>参数分析：</h4><p>   <img src="https://api2.mubu.com/v3/document_image/bbe5e7cf-266c-4e84-ab45-21b6869aeba4-1995134.jpg"></p><div class="hljs code-wrapper"><pre><code>*   1623： 当前训练的迭代次数;*   0.215670： 总体的 Loss(损失）;*   0.232835 avg： 平均 Loss, 这个数值应该越低越好, 一般来说, 一旦这个数值低于 0.060730 avg 就可以终止训练了;*   0.001000 rate： 当前的学习率, 在.cfg文件中定义的;*   9.07000 seconds： 当前批次训练花费的总时间;*   103875 images： 这一行最后的这个数值是 9798*64 的大小, 表示到目前为止, 参与训练的图片的总量.</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>深度学习</category>
      
      <category>windos</category>
      
    </categories>
    
    
    <tags>
      
      <tag>YOLO</tag>
      
      <tag>目标识别检测</tag>
      
      <tag>训练数据集</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于YOLO的目标识别检测</title>
    <link href="/2021/10/21/%E5%9F%BA%E4%BA%8EYOLO%E7%9A%84%E7%9B%AE%E6%A0%87%E8%AF%86%E5%88%AB%E6%A3%80%E6%B5%8B/"/>
    <url>/2021/10/21/%E5%9F%BA%E4%BA%8EYOLO%E7%9A%84%E7%9B%AE%E6%A0%87%E8%AF%86%E5%88%AB%E6%A3%80%E6%B5%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="基于YOLO的目标识别检测"><a href="#基于YOLO的目标识别检测" class="headerlink" title="基于YOLO的目标识别检测"></a>基于YOLO的目标识别检测</h1><div class="hljs code-wrapper"><pre><code>性能目标：*   目标识别准确率大于90%*   机载相机的有效地空检测距离大于10米*   所选取相机能实现自主或结合机载电脑实时处理目标识别</code></pre></div><hr><h2 id="感受下基于树莓派的YOLO目标检测算法（可见光）："><a href="#感受下基于树莓派的YOLO目标检测算法（可见光）：" class="headerlink" title="感受下基于树莓派的YOLO目标检测算法（可见光）："></a>感受下基于树莓派的YOLO目标检测算法（可见光）：</h2><p><img src="https://api2.mubu.com/v3/document_image/94481330-678e-4519-aac9-d11a63f06636-1995134.jpg"></p><p><img src="https://api2.mubu.com/v3/document_image/6d81dcb5-5fbb-4147-9853-ae14145098d9-1995134.jpg"></p><p><a href="https://blog.csdn.net/tMb8Z9Vdm66wH68VX1/article/details/104831844?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522162971033316780269896247%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=162971033316780269896247&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v29_ecpm-2-104831844.first_rank_v2_pc_rank_v29&utm_term=%E6%A0%91%E8%8E%93%E6%B4%BEYOLO%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B%E7%AE%97%E6%B3%95&spm=1018.2226.3001.4187">独家 | 在树莓派+Movidius NCS上运用YOLO和Tiny-YOLO完成目标检测（附代码下载）_数据派THU-CSDN博客</a></p><p><img src="https://api2.mubu.com/v3/document_image/e589f8d8-e481-40a3-9d42-cf322728e0f2-1995134.jpg"><br><a href="https://blog.csdn.net/weixin_43878078/article/details/103893426">在树莓派4使用YOLO v3 Tiny进行实时对象检测_weixin_43878078的博客-CSDN博客_树莓派yolo目标检测</a></p><p><img src="https://api2.mubu.com/v3/document_image/5c234c70-8695-44b8-b07d-55033a6660d5-1995134.jpg"></p><hr><h2 id="方法论证与实践"><a href="#方法论证与实践" class="headerlink" title="方法论证与实践"></a>方法论证与实践</h2><p><a href="https://blog.csdn.net/weixin_43878078/article/details/103893426">(1条消息) 在树莓派4使用YOLO v3 Tiny进行实时对象检测_weixin_43878078的博客-CSDN博客_树莓派yolo目标检测</a></p><h3 id="YOLO算法在树莓派3B-、4B上实现"><a href="#YOLO算法在树莓派3B-、4B上实现" class="headerlink" title="YOLO算法在树莓派3B+、4B上实现"></a>YOLO算法在树莓派3B+、4B上实现</h3><ul><li><p>步骤</p><ul><li>准备Python和Pi相机</li><li>安装 Ninja Building tool（控制编译的工具，它相对于Makefile这套工具更注重于编译速度）</li><li>安装修改后的 NNPACK（加速神经网络计算的加速包，NNPACK可以在多核CPU平台上提高卷积层计算性能）</li><li>安装darknet-nnpack（目的是给树莓派配置yolo模型，Darknet是一个小众的深度学习框架）</li></ul></li><li><p>存在问题</p><ul><li>安装完成，使用树莓派摄像头进行测试。从摄像头获取图像，通过YOLO算法实时的识别物体类别，使用usb摄像头会比CSI（Camera Serial Interface）接口的摄像头慢很多。无法识别摄像头，原因可能是：<div class="hljs code-wrapper"><pre><code> ①摄像头硬件有问题 ②树莓派上的摄像头驱动等存在问题</code></pre></div></li></ul></li></ul><h3 id="YOLOV3在Windows10（OpenCV3-4-CUDA11-4（CUDNN）-VisualStudio2017）下的实现"><a href="#YOLOV3在Windows10（OpenCV3-4-CUDA11-4（CUDNN）-VisualStudio2017）下的实现" class="headerlink" title="YOLOV3在Windows10（OpenCV3.4+CUDA11.4（CUDNN）+VisualStudio2017）下的实现"></a>YOLOV3在Windows10（OpenCV3.4+CUDA11.4（CUDNN）+VisualStudio2017）下的实现</h3><p><a href="https://blog.csdn.net/KID_yuan/article/details/88380269">(1条消息) Windows10+YOLOV3+VisualStudio2017最新版本超详细过程_【秋名鱼酱的博客】-CSDN博客_win yolov3</a></p><ul><li><p>步骤</p><ul><li>安装最新版本的cuda和cudnn（CUDA是NVIDIA推出的用于自家GPU的并行计算框架，CUDNN是NVIDIA打造的针对深度神经网络的加速库，是一个用于深层神经网络的GPU加速库）</li><li>安装OpenCV3.4（通过OpenCV调用dll实时检测）</li><li>  安装vs2017（使用本身2017对YOLOV3中的darknet项目文件进行编译）</li></ul></li></ul><ul><li><p>测试</p><ul><li>在测试效果之前还需要添加以下官网上下载训练好的权重文件</li><li>权重文件保存的就是训练好的网络各层的权值，也就是通过训练集训练出来的。训练好之后，应用时只要加载权值就可以，不再需要训练集了</li><li>  输入检测程序命令，实现对JPG、avi文件以及调用摄像头的实时目标检测</li></ul></li></ul><h2 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h2><h3 id="使用官方提供的权重文件检测对一下目标进行检测"><a href="#使用官方提供的权重文件检测对一下目标进行检测" class="headerlink" title="使用官方提供的权重文件检测对一下目标进行检测"></a>使用官方提供的权重文件检测对一下目标进行检测</h3><p><img src="https://api2.mubu.com/v3/document_image/d6d875e2-c7da-40e7-a2c7-d7a04bf65ede-1995134.jpg"></p><p><img src="https://api2.mubu.com/v3/document_image/a2bdeb98-0720-4375-bc44-21affad3737a-1995134.jpg"></p><h3 id="视频检测"><a href="#视频检测" class="headerlink" title="视频检测"></a>视频检测</h3><p><a href="https://www.bilibili.com/video/BV1Xv411A7Lj">视频检测效果</a></p><h2 id="制作训练集"><a href="#制作训练集" class="headerlink" title="制作训练集"></a>制作训练集</h2><ul><li><p>  YOLO有自己训练好的数据集，在YOLO v2 中，数据集可检测的类别达9000种以上，但是9000毕竟不是全部，它能涵盖大部分的物体识别，但是可能对于某些用户来说是不够的，所以我们需要学习它的数据集制作方法。</p></li><li><p>数据集分为以下几个部分：</p><ul><li>1.数据集的搜集，这一部分主要是在网上搜集整理相关数据集的图片，比如我要做某种猫的数据集，我需要上网上查找这种猫的图片；我需要做自己做的手工艺品的数据集，那我需要自己拍摄等等。</li><li>2.数据集的标注，计算机去认识一个物体，需要人去告诉他，哪个物体，是什么。就像我们在小时候，我们的父母会一点一点耐心教我们，什么是桌子，什么是椅子，什么是筷子，什么是树，什么是花……数据集的标注就是一个“教授”的过程。</li><li>3.数据集的训练，不是别人一教，你就能学会的，你需要不断地练习，比如说话，小时候父母不厌其烦的教我们；比如写汉字，中国人最应该骄傲的就是我们学会了世界上最难的一门语言，并且能够熟练应用。这就是因为我们从上学开始，老师就教我们写字，一写就是好几十遍……计算机也是如此，想让计算机明白什么是花，什么是自行车，就要让他“训练”，让他学会。</li><li>  4.数据集的应用，我们学会说话，学会认识物体，目的就是为了应用，学会说话，我们可以交流，认识自行车，是我们能够方便交通……数据集也一样，训练好的数据集的目的就是为了应用，或者说，我们训练数据集是因为我们需要应用这个数据集，例如，我们需要检测人流量，首先我们需要识别人，当然现在就有很多人体识别的算法，如果我们要采用数据集来识别，我们需要先制作一个数据集，然后在应用数据集完成我们需要的功能</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>深度学习</category>
      
      <category>树莓派</category>
      
    </categories>
    
    
    <tags>
      
      <tag>YOLO</tag>
      
      <tag>目标识别检测</tag>
      
      <tag>训练数据集</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>戴面具的猫</title>
    <link href="/2021/10/20/test4/"/>
    <url>/2021/10/20/test4/</url>
    
    <content type="html"><![CDATA[<h2 id><a href="#" class="headerlink" title></a></h2><p>图片</p><p><img src="https://api2.mubu.com/v3/document_image/a94b0309-01be-4a66-929b-459ccecb1686-1995134.jpg" alt="收手吧阿祖，外面全是警察"></p><p><img src="https://api2.mubu.com/v3/document_image/99485699-a9fd-45bb-9f64-df3434d60c1c-1995134.jpg" alt="HYUKOH"></p>]]></content>
    
    
    <categories>
      
      <category>图片</category>
      
    </categories>
    
    
    <tags>
      
      <tag>蒙面猫猫</tag>
      
      <tag>吴彦祖</tag>
      
      <tag>胖橘</tag>
      
      <tag>HYUKOH</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
