<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>YOLO算法在windows下训练自己的数据集</title>
    <link href="/2021/10/21/YOLO%E7%AE%97%E6%B3%95%E5%9C%A8windows%E4%B8%8B%E8%AE%AD%E7%BB%83%E8%87%AA%E5%B7%B1%E7%9A%84%E6%95%B0%E6%8D%AE%E9%9B%86/"/>
    <url>/2021/10/21/YOLO%E7%AE%97%E6%B3%95%E5%9C%A8windows%E4%B8%8B%E8%AE%AD%E7%BB%83%E8%87%AA%E5%B7%B1%E7%9A%84%E6%95%B0%E6%8D%AE%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<h1 id="YOLO算法在windows下训练自己的数据集"><a href="#YOLO算法在windows下训练自己的数据集" class="headerlink" title="YOLO算法在windows下训练自己的数据集"></a>YOLO算法在windows下训练自己的数据集</h1><h2 id="背景基础"><a href="#背景基础" class="headerlink" title="背景基础"></a>背景基础</h2><div class="hljs code-wrapper"><pre><code>*   已有在官方权重下，YOLOV3算法在识别物体上的测试效果    *   特定数据集的制作与训练实现特有的目标检测    </code></pre></div><hr><h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><div class="hljs code-wrapper"><pre><code>*   目标的检测    </code></pre></div><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><div class="hljs code-wrapper"><pre><code>[(1条消息) win10下yolov3训练自己的数据集_congcong7267的博客-CSDN博客](https://blog.csdn.net/congcong7267/article/details/82981084)*   训练自己的数据集、        *   每种物体采集大概两三百张照片（距离、背景、光线）            *   标注图片中的目标，制作数据集            *   打开win10终端，cd进入darknet-master\\build\\darknet\\x64，darknet.exe detector train data/obj.data yolo-obj.cfg darknet53.conv.74 开始训练            *   生成权重文件移植到树莓派上进行测试        *   backup文件下最后一个权重文件复制到build\\darknet\\x64\            *   打开win10终端，cd进入然后运行darknet-master\\build\\darknet\\x64路径            *   输入：darknet.exe detector test data/obj.data yolo-obj.cfg yolo-obj\_100.weights（olo-obj\_100.weights为训练好的权重名）            *   终端会提醒你输入图片路径，然后你输入测试图片的绝对路径即可看到效果             </code></pre></div><hr><h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><div class="hljs code-wrapper"><pre><code>[(2条消息) win10下yolov3训练自己的数据集_congcong7267的博客-CSDN博客](https://blog.csdn.net/congcong7267/article/details/82981084)*   新建yolo-obj.cfg文件，将batch 改成64 ：batch=64，subdivisions=64        *   在Darknet中，batch和subdivisions是结合使用的，例如设置batch=64，subdivisions=16，表示训练的过程中将一次性加载64张图片进内存，然后分16次完成前向传播，意思是每次4张，前向传播的循环过程中累加loss求平均，待64张图片都完成前向传播后，再一次性后传更新参数。([yolov3.cfg参数说明及调参经验 - 知乎 (zhihu.com)](https://zhuanlan.zhihu.com/p/91587361))            *   在build\\darknet\\x64\\data\\下新建obj.names文件，写入自己的类名        *   ![](https://api2.mubu.com/v3/document_image/70fa4c70-c6ff-4ce4-8466-b545569d3448-1995134.jpg)*   在build\\darknet\\x64\\data\\下新建obj.data文件        *   ![](https://api2.mubu.com/v3/document_image/8beaa8bd-abc0-4a83-ab1d-7566e368442f-1995134.jpg)*   制作数据集        *   图片批量顺序命名py脚本                *   ![](https://api2.mubu.com/v3/document_image/17b4a336-e2d7-4566-83f2-f468af9acdb2-1995134.jpg)    *   使用labelimg标注图片中的目标，生成xml文件            *   使用py脚本将xml文件转为txt文件                *   ![](https://api2.mubu.com/v3/document_image/13f0934f-6041-4bf9-97ce-bbc3ea74f417-1995134.jpg)    *   将所有样本图片及对应的的txt文件)放到：build\\darknet\\x64\\data\\obj\            *   在build\darknet\x64\data\下新建train.txt，训练图片的路径放入文件                *   ![](https://api2.mubu.com/v3/document_image/75481850-e194-4fe2-8f7f-7e37ba9926a9-1995134.jpg)        *   ![](https://api2.mubu.com/v3/document_image/6dc36e99-f601-4ded-9332-ade4de302ae5-1995134.jpg)    *   将darknet的预训练权重放入build\\darknet\\x64        [预训练权重文件](https://pan.baidu.com/s/1Gdo2gj1bggjUtW9CyYkIpQ) 密码：x5ht    *   在\\darknet路径下修改网络配置文件Makefile        *   对比官方makefile修改：（其中C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v11.4/ 为自己的CUDA安装路径）                （[下载链接](https://pan.baidu.com/s/1PYKf-47WAgl9Jqs_d-Sx3w) 提取码：jh1i））                *   GPU=1 CUDNN=1                    *   NVCC=C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v11.4/bin/nvcc                    *   COMMON+= -DGPU -I/C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v11.4/include                    *   LDFLAGS+= -L/C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v11.4/lib -lcuda -lcudart -lcublas -lcurand                        *   打开cmd，cd进入darknet-master\\build\\darknet\\x64路径，输入：darknet.exe detector train data/obj.data yolo-obj.cfg darknet53.conv.74 开始训练    *   avg loss接近0.XX且变化不大时可停止训练，将x64\\backup下的weight文件复制到\\x64下，cd进入darknet-master\\build\\darknet\\x64路径运行darknet.exe detector test data/obj.data yolo-obj.cfg yolo-obj_last.weights，程序会提示输入待检测图片的路径。    </code></pre></div><hr><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><div class="hljs code-wrapper"><pre><code>*   纵坐标平均loss（误差）接近0.545，即变化不大时可停止训练。横坐标batch（每batch（64）个样本更新一次参数）        *   ![](https://api2.mubu.com/v3/document_image/9d13e9f1-0210-46de-a2f9-049b44dced72-1995134.jpg)        *   在YOLOv3中，Loss分为三个部分:                *   1、一个是x、y、w、h部分带来的误差，也就是bbox带来的loss                    *   2、一个是置信度带来的误差，也就是obj带来的loss                    *   3、最后一个是类别带来的误差，也就是class带来的loss                        *   检测效果测试：训练时的数据集90%是野外图像数据，，对比使用官方权重与自己训练的数据集检测目标时，由于检测结果受到样本数量的影响两者检测结果均不为理想。                *   ![](https://api2.mubu.com/v3/document_image/b8d92392-4611-4df4-ae95-5785dcd0a57d-1995134.jpg)        *   ![](https://api2.mubu.com/v3/document_image/8a2b8445-e813-40a3-9eb0-634136c5b403-1995134.jpg)        *   ![](https://api2.mubu.com/v3/document_image/32153f95-4c39-43d3-a7ac-4a265ffce2f2-1995134.jpg)    *   avg loss（误差）接近0.219时，基本不再变化        *   ![](https://api2.mubu.com/v3/document_image/32e3faf5-64ec-4f8f-ab4c-0b62f5789f21-1995134.jpg)        *   检测结果                *   ![](https://api2.mubu.com/v3/document_image/896b339c-e6c6-4da3-87bb-f068aa9f8071-1995134.jpg)        *   ![](https://api2.mubu.com/v3/document_image/9c031abe-524b-416e-ab72-c18a2cbeb9a6-1995134.jpg)        *   ![](https://api2.mubu.com/v3/document_image/49ee54bf-5529-4721-b86b-26c59cfef737-1995134.jpg)    *   参数分析：        *   ![](https://api2.mubu.com/v3/document_image/bbe5e7cf-266c-4e84-ab45-21b6869aeba4-1995134.jpg)        *   1623： 当前训练的迭代次数;            *   0.215670： 总体的 Loss(损失）;            *   0.232835 avg： 平均 Loss, 这个数值应该越低越好, 一般来说, 一旦这个数值低于 0.060730 avg 就可以终止训练了;            *   0.001000 rate： 当前的学习率, 在.cfg文件中定义的;            *   9.07000 seconds： 当前批次训练花费的总时间;            *   103875 images： 这一行最后的这个数值是 9798*64 的大小, 表示到目前为止, 参与训练的图片的总量.</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>深度学习</category>
      
      <category>windos</category>
      
    </categories>
    
    
    <tags>
      
      <tag>YOLO</tag>
      
      <tag>目标识别检测</tag>
      
      <tag>训练数据集</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于YOLO的目标识别检测</title>
    <link href="/2021/10/21/%E5%9F%BA%E4%BA%8EYOLO%E7%9A%84%E7%9B%AE%E6%A0%87%E8%AF%86%E5%88%AB%E6%A3%80%E6%B5%8B/"/>
    <url>/2021/10/21/%E5%9F%BA%E4%BA%8EYOLO%E7%9A%84%E7%9B%AE%E6%A0%87%E8%AF%86%E5%88%AB%E6%A3%80%E6%B5%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="基于YOLO的目标识别检测"><a href="#基于YOLO的目标识别检测" class="headerlink" title="基于YOLO的目标识别检测"></a>基于YOLO的目标识别检测</h1><ul><li>性能目标：<ul><li>目标识别准确率大于90%</li><li>机载相机的有效地空检测距离大于10米</li><li>所选取相机能实现自主或结合机载电脑实时处理目标识别</li></ul></li></ul><hr><h2 id="感受下基于树莓派的YOLO目标检测算法（可见光）："><a href="#感受下基于树莓派的YOLO目标检测算法（可见光）：" class="headerlink" title="感受下基于树莓派的YOLO目标检测算法（可见光）："></a>感受下基于树莓派的YOLO目标检测算法（可见光）：</h2><div class="hljs code-wrapper"><pre><code>*   ![](https://api2.mubu.com/v3/document_image/94481330-678e-4519-aac9-d11a63f06636-1995134.jpg)*   ![](https://api2.mubu.com/v3/document_image/6d81dcb5-5fbb-4147-9853-ae14145098d9-1995134.jpg)*   [独家 | 在树莓派+Movidius NCS上运用YOLO和Tiny-YOLO完成目标检测（附代码下载）_数据派THU-CSDN博客](https://blog.csdn.net/tMb8Z9Vdm66wH68VX1/article/details/104831844?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522162971033316780269896247%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=162971033316780269896247&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v29_ecpm-2-104831844.first_rank_v2_pc_rank_v29&amp;utm_term=%E6%A0%91%E8%8E%93%E6%B4%BEYOLO%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B%E7%AE%97%E6%B3%95&amp;spm=1018.2226.3001.4187)            *   ![](https://api2.mubu.com/v3/document_image/e589f8d8-e481-40a3-9d42-cf322728e0f2-1995134.jpg)*   [在树莓派4使用YOLO v3 Tiny进行实时对象检测\_weixin\_43878078的博客-CSDN博客_树莓派yolo目标检测](https://blog.csdn.net/weixin_43878078/article/details/103893426)        *   ![](https://api2.mubu.com/v3/document_image/5c234c70-8695-44b8-b07d-55033a6660d5-1995134.jpg)</code></pre></div><hr><h2 id="方法论证与实践"><a href="#方法论证与实践" class="headerlink" title="方法论证与实践"></a>方法论证与实践</h2><div class="hljs code-wrapper"><pre><code>[(1条消息) 在树莓派4使用YOLO v3 Tiny进行实时对象检测\_weixin\_43878078的博客-CSDN博客_树莓派yolo目标检测](https://blog.csdn.net/weixin_43878078/article/details/103893426)###   YOLO算法在树莓派3B+、4B上实现        *   步骤                *   准备Python和Pi相机                    *   安装 Ninja Building tool（控制编译的工具，它相对于Makefile这套工具更注重于编译速度）                    *   安装修改后的 NNPACK（加速神经网络计算的加速包，NNPACK可以在多核CPU平台上提高卷积层计算性能）                    *   安装darknet-nnpack（目的是给树莓派配置yolo模型，Darknet是一个小众的深度学习框架）                        *   存在问题                *   安装完成，使用树莓派摄像头进行测试。从摄像头获取图像，通过YOLO算法实时的识别物体类别，使用usb摄像头会比CSI（Camera Serial Interface）接口的摄像头慢很多。无法识别摄像头，原因可能是：                        *   ①摄像头硬件有问题                            *   ②树莓派上的摄像头驱动等存在问题。                                        ###   YOLOV3在Windows10（OpenCV3.4+CUDA11.4（CUDNN）+VisualStudio2017）下的实现        [(1条消息) Windows10+YOLOV3+VisualStudio2017最新版本超详细过程_【秋名鱼酱的博客】-CSDN博客_win yolov3](https://blog.csdn.net/KID_yuan/article/details/88380269)        *   步骤                *   安装最新版本的cuda和cudnn（CUDA是NVIDIA推出的用于自家GPU的并行计算框架，CUDNN是NVIDIA打造的针对深度神经网络的加速库，是一个用于深层神经网络的GPU加速库）                    *   安装OpenCV3.4（通过OpenCV调用dll实时检测）                    *   安装vs2017（使用本身2017对YOLOV3中的darknet项目文件进行编译）                        *   测试                *   在测试效果之前还需要添加以下官网上下载训练好的权重文件                        权重文件保存的就是训练好的网络各层的权值，也就是通过训练集训练出来的。训练好之后，应用时只要加载权值就可以，不再需要训练集了                    *   输入检测程序命令，实现对JPG、avi文件以及调用摄像头的实时目标检测                        </code></pre></div><hr><h2 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h2><div class="hljs code-wrapper"><pre><code>*   使用官方提供的权重文件检测对一下目标进行检测        *   ![](https://api2.mubu.com/v3/document_image/d6d875e2-c7da-40e7-a2c7-d7a04bf65ede-1995134.jpg)    *   ![](https://api2.mubu.com/v3/document_image/a2bdeb98-0720-4375-bc44-21affad3737a-1995134.jpg)        *   [视频检测效果](https://www.bilibili.com/video/BV1Xv411A7Lj)            </code></pre></div><hr><h2 id="制作训练集"><a href="#制作训练集" class="headerlink" title="制作训练集"></a>制作训练集</h2><div class="hljs code-wrapper"><pre><code>*   YOLO有自己训练好的数据集，在YOLO v2 中，数据集可检测的类别达9000种以上，但是9000毕竟不是全部，它能涵盖大部分的物体识别，但是可能对于某些用户来说是不够的，所以我们需要学习它的数据集制作方法。    *   数据集分为以下几个部分：        *   1.数据集的搜集，这一部分主要是在网上搜集整理相关数据集的图片，比如我要做某种猫的数据集，我需要上网上查找这种猫的图片；我需要做自己做的手工艺品的数据集，那我需要自己拍摄等等。            *   2.数据集的标注，计算机去认识一个物体，需要人去告诉他，哪个物体，是什么。就像我们在小时候，我们的父母会一点一点耐心教我们，什么是桌子，什么是椅子，什么是筷子，什么是树，什么是花……数据集的标注就是一个“教授”的过程。            *   3.数据集的训练，不是别人一教，你就能学会的，你需要不断地练习，比如说话，小时候父母不厌其烦的教我们；比如写汉字，中国人最应该骄傲的就是我们学会了世界上最难的一门语言，并且能够熟练应用。这就是因为我们从上学开始，老师就教我们写字，一写就是好几十遍……计算机也是如此，想让计算机明白什么是花，什么是自行车，就要让他“训练”，让他学会。            *   4.数据集的应用，我们学会说话，学会认识物体，目的就是为了应用，学会说话，我们可以交流，认识自行车，是我们能够方便交通……数据集也一样，训练好的数据集的目的就是为了应用，或者说，我们训练数据集是因为我们需要应用这个数据集，例如，我们需要检测人流量，首先我们需要识别人，当然现在就有很多人体识别的算法，如果我们要采用数据集来识别，我们需要先制作一个数据集，然后在应用数据集完成我们需要的功能</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>深度学习</category>
      
      <category>树莓派</category>
      
    </categories>
    
    
    <tags>
      
      <tag>训练集</tag>
      
      <tag>目标识别</tag>
      
      <tag>YOLO</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>戴面具的猫</title>
    <link href="/2021/10/20/test4/"/>
    <url>/2021/10/20/test4/</url>
    
    <content type="html"><![CDATA[<h2 id><a href="#" class="headerlink" title></a></h2><p>图片</p><p><img src="https://api2.mubu.com/v3/document_image/a94b0309-01be-4a66-929b-459ccecb1686-1995134.jpg" alt="收手吧阿祖，外面全是警察"></p><p><img src="https://api2.mubu.com/v3/document_image/99485699-a9fd-45bb-9f64-df3434d60c1c-1995134.jpg" alt="HYUKOH"></p>]]></content>
    
    
    <categories>
      
      <category>图片</category>
      
    </categories>
    
    
    <tags>
      
      <tag>蒙面猫猫</tag>
      
      <tag>吴彦祖</tag>
      
      <tag>胖橘</tag>
      
      <tag>HYUKOH</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
