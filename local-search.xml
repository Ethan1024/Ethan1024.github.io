<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Pytorch 中 “forward”使用</title>
    <link href="/2022/04/13/Pytorch%E4%B8%AD%E7%9A%84%E2%80%9Cforward%E2%80%9D/"/>
    <url>/2022/04/13/Pytorch%E4%B8%AD%E7%9A%84%E2%80%9Cforward%E2%80%9D/</url>
    
    <content type="html"><![CDATA[<h3 id="Pytorch-中-“forward”使用"><a href="#Pytorch-中-“forward”使用" class="headerlink" title="Pytorch 中 “forward”使用"></a>Pytorch 中 “forward”使用</h3><p><strong>数据进入网络模型的主要处理流程：</strong>数据集输入 -&gt; 网络前向传播 -&gt; 损失loss计算 -&gt; 反向传播计算梯度 -&gt; 根据梯度自动调参</p><p> **__call__函数:**可将类的实例对象变为可调用对象</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Rapper</span>():</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__call__</span>(<span class="hljs-params">self,name,AKA</span>):</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;我是实例对象781号Rapper:&#123;&#125;,AKA:&#123;&#125;&quot;</span> .<span class="hljs-built_in">format</span> (name, AKA))<br> <br>num_781_Rapper = Rapper()<br>num_781_Rapper(<span class="hljs-string">&quot;周延&quot;</span>,<span class="hljs-string">&quot;gai&quot;</span>)<br></code></pre></div></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">output:<br>我是实例对象<span class="hljs-number">781</span>号Rapper:周延,AKA:gai<br></code></pre></div></td></tr></table></figure><p>__call__函数调用forward，当把定义的网络模型model当作函数调用的时候就自动调用定义的网络模型的forward方法。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Rapper</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__call__</span>(<span class="hljs-params">self, Name</span>):</span><br>        search = self.forward(Name)<br>        <span class="hljs-keyword">return</span> search<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">forward</span>(<span class="hljs-params">self, name</span>):</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;信息查询函数 函数被调用了&#x27;</span>)<br>        <span class="hljs-keyword">if</span> name == <span class="hljs-string">&#x27;gai&#x27;</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;姓名：&#123;&#125;  来自: &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(name, <span class="hljs-string">&quot;重庆&quot;</span>))<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;系统未录入此人信息&quot;</span>)<br>        <span class="hljs-keyword">return</span> name<br><br><br>rapper = Rapper()<br>about = rapper(<span class="hljs-string">&#x27;gai&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;目标人物：&quot;</span>, about)<br></code></pre></div></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">output:<br>        信息查询函数 函数被调用了<br>        姓名：gai  来自: 重庆<br>        目标人物： gai<br></code></pre></div></td></tr></table></figure><h4 id="参考："><a href="#参考：" class="headerlink" title="参考："></a><strong>参考：</strong></h4><p><a href="https://blog.csdn.net/xu380393916/article/details/97280035?ops_request_misc=%7B%22request_id%22:%22165709594516782388029565%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=165709594516782388029565&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-97280035-null-null.142%5Ev31%5Eexperiment_2_v1,185%5Ev2%5Etag_show&utm_term=pytorch+forward&spm=1018.2226.3001.4187">pytorch 中的 forward 的使用与解释</a></p><p><a href="https://blog.csdn.net/u011501388/article/details/84062483?spm=1001.2101.3001.6661.1&utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~BlogCommendFromBaidu~default-1-84062483-blog-108745538.pc_relevant_vip_default&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~BlogCommendFromBaidu~default-1-84062483-blog-108745538.pc_relevant_vip_default&utm_relevant_index=1">PyTorch之前向传播函数forward</a></p><p><a href="https://zhuanlan.zhihu.com/p/357021687">Pytorch 中的 forward理解</a></p>]]></content>
    
    
    <categories>
      
      <category>深度学习</category>
      
      <category>练习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前向传播函数</tag>
      
      <tag>forward</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python中self的使用</title>
    <link href="/2022/04/10/python%E4%B8%ADself%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/2022/04/10/python%E4%B8%ADself%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="python中self的使用"><a href="#python中self的使用" class="headerlink" title="python中self的使用"></a>python中self的使用</h2><p>self的用法牵扯到类（class）和实例（instance）的概念，实例需要通过类来创建。</p><p>class被创建为模板，根据类创建的实例会包含类的所有属性。</p><p>由于类起到模板的作用，因此，可以在创建实例的时候，把我们认为必须绑定的属性强制填写进去。这里就用到Python当中的一个内置方法<code>__init__</code>方法，例如在Student类时，把name、score等属性绑上去。</p><p><strong>例子:</strong></p><p><strong>类和方法</strong></p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Rapper</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, name, AKA</span>):</span><br>        self.name = name<br>        self.AKA = AKA<br><br>Rapper = Rapper(<span class="hljs-string">&quot;周延&quot;</span>,<span class="hljs-string">&quot;Gai&quot;</span>)<br><span class="hljs-built_in">print</span>(Rapper.name)<br><span class="hljs-built_in">print</span>(Rapper.AKA)<br></code></pre></div></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">output：<br>周延<br>gai<br></code></pre></div></td></tr></table></figure><p><strong>类内部定义访问数据的函数</strong> </p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Rapper</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span><span class="hljs-comment">#类</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, name, AKA</span>):</span><span class="hljs-comment">#方法,作用是封装数据，便于调用。init 中第一个参数  self  表示实例本体，self代表类的实例，而非类</span><br>        self.name = name<br>        self.AKA = AKA<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">relationship</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;Name: %s\nAKA: %s&quot;</span> % (self.name, self.AKA))<br><br>Rapper = Rapper(<span class="hljs-string">&quot;zhouyan&quot;</span>,<span class="hljs-string">&quot;gai&quot;</span>)<br>Rapper.relationship()<br></code></pre></div></td></tr></table></figure><figure class="highlight dts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dts"><span class="hljs-symbol">output:</span><br><span class="hljs-symbol">Name:</span> zhouyan<br><span class="hljs-symbol">AKA:</span> gai<br></code></pre></div></td></tr></table></figure><p><strong>类内部定义访问和修改私有变量的函数</strong></p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Rapper</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span><span class="hljs-comment">#类</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, name, AKA</span>):</span><span class="hljs-comment">#方法</span><br>        self.__name = name<br>        self.__AKA = AKA<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">relationship</span>(<span class="hljs-params">self</span>):</span>  <br>        <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;姓名: %s\nAKA: %s&quot;</span> % (self.__name, self.__AKA))<span class="hljs-comment">#私有变量可以不被外部轻易访问</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_name</span>(<span class="hljs-params">self</span>):</span> <span class="hljs-comment">#需要访问和修改的情况下定义以下两个函数</span><br>        <span class="hljs-keyword">return</span> self.__name<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_AKA</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> self.__AKA<br>   <span class="hljs-comment">#外部函数修改私有变量</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">set_AKA</span>(<span class="hljs-params">self, AKA</span>):</span><br>        self.__AKA = AKA<br><br>Rapper = Rapper(<span class="hljs-string">&quot;周延&quot;</span>,<span class="hljs-string">&quot;gai&quot;</span>)<br>Rapper.relationship()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;-----------------------------&#x27;</span>)<br>Rapper.set_AKA(<span class="hljs-string">&#x27;金牌小密探&#x27;</span>)<br>Rapper.relationship()<br></code></pre></div></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">output:<br>姓名: 周延<br>        AKA: gai<br>        -----------------------------<br>        姓名: 周延<br>        AKA: 金牌小密探<br></code></pre></div></td></tr></table></figure><h4 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h4><p><a href="https://blog.csdn.net/CLHugh/article/details/75000104?spm=1001.2101.3001.6650.1&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-1-75000104-blog-85805481.pc_relevant_multi_platform_whitelistv2&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-1-75000104-blog-85805481.pc_relevant_multi_platform_whitelistv2&utm_relevant_index=2">Python中self用法详解_CLHugh的博客-CSDN博客_python中的self</a></p>]]></content>
    
    
    <categories>
      
      <category>深度学习</category>
      
      <category>练习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>实例</tag>
      
      <tag>类</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python中的&quot; self &quot;</title>
    <link href="/2022/04/10/python%E4%B8%AD%E7%9A%84self%20/"/>
    <url>/2022/04/10/python%E4%B8%AD%E7%9A%84self%20/</url>
    
    <content type="html"><![CDATA[<h2 id="python中的”-self-“"><a href="#python中的”-self-“" class="headerlink" title="python中的” self “"></a>python中的” self “</h2><p>self的用法牵扯到类（class）和实例（instance）的概念，实例需要通过类来创建。</p><p>class被创建为模板，根据类创建的实例会包含类的所有属性。</p><p>由于类起到模板的作用，因此，可以在创建实例的时候，把我们认为必须绑定的属性强制填写进去。这里就用到Python当中的一个内置方法<code>__init__</code>方法，例如在Student类时，把name、score等属性绑上去。</p><p><strong>例子:</strong></p><p><strong>类和方法</strong></p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Rapper</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, name, AKA</span>):</span><br>        self.name = name<br>        self.AKA = AKA<br><br>Rapper = Rapper(<span class="hljs-string">&quot;周延&quot;</span>,<span class="hljs-string">&quot;Gai&quot;</span>)<br><span class="hljs-built_in">print</span>(Rapper.name)<br><span class="hljs-built_in">print</span>(Rapper.AKA)<br></code></pre></div></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">output：<br>周延<br>gai<br></code></pre></div></td></tr></table></figure><p><strong>类内部定义访问数据的函数</strong> </p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Rapper</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span><span class="hljs-comment">#类</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, name, AKA</span>):</span><span class="hljs-comment">#方法,作用是封装数据，便于调用。init 中第一个参数  self  表示实例本体，self代表类的实例，而非类</span><br>        self.name = name<br>        self.AKA = AKA<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">relationship</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;Name: %s\nAKA: %s&quot;</span> % (self.name, self.AKA))<br><br>Rapper = Rapper(<span class="hljs-string">&quot;zhouyan&quot;</span>,<span class="hljs-string">&quot;gai&quot;</span>)<br>Rapper.relationship()<br></code></pre></div></td></tr></table></figure><figure class="highlight dts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dts"><span class="hljs-symbol">output:</span><br><span class="hljs-symbol">Name:</span> zhouyan<br><span class="hljs-symbol">AKA:</span> gai<br></code></pre></div></td></tr></table></figure><p><strong>类内部定义访问和修改私有变量的函数</strong></p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Rapper</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span><span class="hljs-comment">#类</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, name, AKA</span>):</span><span class="hljs-comment">#方法</span><br>        self.__name = name<br>        self.__AKA = AKA<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">relationship</span>(<span class="hljs-params">self</span>):</span>  <br>        <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;姓名: %s\nAKA: %s&quot;</span> % (self.__name, self.__AKA))<span class="hljs-comment">#私有变量可以不被外部轻易访问</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_name</span>(<span class="hljs-params">self</span>):</span> <span class="hljs-comment">#需要访问和修改的情况下定义以下两个函数</span><br>        <span class="hljs-keyword">return</span> self.__name<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_AKA</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> self.__AKA<br>   <span class="hljs-comment">#外部函数修改私有变量</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">set_AKA</span>(<span class="hljs-params">self, AKA</span>):</span><br>        self.__AKA = AKA<br><br>Rapper = Rapper(<span class="hljs-string">&quot;周延&quot;</span>,<span class="hljs-string">&quot;gai&quot;</span>)<br>Rapper.relationship()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;-----------------------------&#x27;</span>)<br>Rapper.set_AKA(<span class="hljs-string">&#x27;金牌小密探&#x27;</span>)<br>Rapper.relationship()<br></code></pre></div></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">output:<br>姓名: 周延<br>        AKA: gai<br>        -----------------------------<br>        姓名: 周延<br>        AKA: 金牌小密探<br></code></pre></div></td></tr></table></figure><h4 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h4><p><a href="https://blog.csdn.net/CLHugh/article/details/75000104?spm=1001.2101.3001.6650.1&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-1-75000104-blog-85805481.pc_relevant_multi_platform_whitelistv2&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-1-75000104-blog-85805481.pc_relevant_multi_platform_whitelistv2&utm_relevant_index=2">Python中self用法详解_CLHugh的博客-CSDN博客_python中的self</a></p>]]></content>
    
    
    <categories>
      
      <category>深度学习</category>
      
      <category>练习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>实例</tag>
      
      <tag>类</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>“炼丹”之数据组成</title>
    <link href="/2022/04/07/%E2%80%9C%E7%82%BC%E4%B8%B9%E2%80%9D%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%84%E6%88%90/"/>
    <url>/2022/04/07/%E2%80%9C%E7%82%BC%E4%B8%B9%E2%80%9D%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%84%E6%88%90/</url>
    
    <content type="html"><![CDATA[<h3 id="“炼丹”之数据组成"><a href="#“炼丹”之数据组成" class="headerlink" title="“炼丹”之数据组成"></a>“炼丹”之数据组成</h3><p>待机器进行学习的标注数据被送入火炉前会被分为：训练集、验证集、测试集。三者发挥自己的作用对网络模型进行构建、筛选调整以及评估。主干网络的骨架在训练阶段利用训练集的特征拟合了模型的血和肉，训练的过程并不会用到测试集和验证集。验证集主要用来评估迭代训练时当前模型泛化能力（准确率，召回率等），以决定是否停止继续训练。在神经网络中， 我们用验证数据集去寻找最优的网络深度，或者决定反向传播算法的停止点或者在神经网络中选择隐藏层神经元的数量；</p><table><thead><tr><th align="center">类别</th><th align="center">验证集</th><th align="center">测试集</th></tr></thead><tbody><tr><td align="center">作用</td><td align="center">纯粹用于调超参数</td><td align="center">纯粹为了加试以验证泛化性能</td></tr><tr><td align="center">使用次数</td><td align="center">多次使用，以不断调参</td><td align="center">仅仅一次使用</td></tr><tr><td align="center">用于训练</td><td align="center">否</td><td align="center">否</td></tr></tbody></table><p><strong>两者的缺陷</strong>：模型在一次次重新手动调参并继续训练后所逼近的验证集，可能只代表一部分非训练集，导致最终训练好的模型泛化性能不够  测试集为了具有泛化代表性，往往数据量比较大，测试一轮要很久，所以往往只取测试集的其中一小部分作为训练过程中的验证集</p><p><strong>互相转化</strong>：验证集具有足够泛化性（一般来说，如果验证集足够大到包括大部分非训练集时，也等于具有足够泛化性了）验证集具有足够泛化性时，测试集就没有存在的必要</p><h4 id="训练集和测试集的划分"><a href="#训练集和测试集的划分" class="headerlink" title="训练集和测试集的划分"></a>训练集和测试集的划分</h4><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Generate txt in ImageSets.&quot;</span>)<br>xmlfilepath     = os.path.join(VOCdevkit_path, <span class="hljs-string">&#x27;VOC2007/Annotations&#x27;</span>)<br>saveBasePath    = os.path.join(VOCdevkit_path, <span class="hljs-string">&#x27;VOC2007/ImageSets/Main&#x27;</span>)<br>temp_xml        = os.listdir(xmlfilepath)   <span class="hljs-comment">#传入xml文件的路径,返回该目录下的所有xml文件名</span><br>total_xml       = []<br><span class="hljs-keyword">for</span> xml <span class="hljs-keyword">in</span> temp_xml:<br>    <span class="hljs-keyword">if</span> xml.endswith(<span class="hljs-string">&quot;.xml&quot;</span>):<br>        total_xml.append(xml)   <span class="hljs-comment">#添加每个xml文件</span><br><br>num     = <span class="hljs-built_in">len</span>(total_xml)  <br><span class="hljs-built_in">list</span>    = <span class="hljs-built_in">range</span>(num)  <span class="hljs-comment">#返回xml文件列表</span><br>tv      = <span class="hljs-built_in">int</span>(num*trainval_percent)  <br>tr      = <span class="hljs-built_in">int</span>(tv*train_percent)  <br>trainval= random.sample(<span class="hljs-built_in">list</span>,tv)  <br>train   = random.sample(trainval,tr)  <br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;train and val size&quot;</span>,tv)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;train size&quot;</span>,tr)<br>ftrainval   = <span class="hljs-built_in">open</span>(os.path.join(saveBasePath,<span class="hljs-string">&#x27;trainval.txt&#x27;</span>), <span class="hljs-string">&#x27;w&#x27;</span>)  <br>ftest       = <span class="hljs-built_in">open</span>(os.path.join(saveBasePath,<span class="hljs-string">&#x27;test.txt&#x27;</span>), <span class="hljs-string">&#x27;w&#x27;</span>)  <br>ftrain      = <span class="hljs-built_in">open</span>(os.path.join(saveBasePath,<span class="hljs-string">&#x27;train.txt&#x27;</span>), <span class="hljs-string">&#x27;w&#x27;</span>)  <br>fval        = <span class="hljs-built_in">open</span>(os.path.join(saveBasePath,<span class="hljs-string">&#x27;val.txt&#x27;</span>), <span class="hljs-string">&#x27;w&#x27;</span>)  <br></code></pre></div></td></tr></table></figure><p><a href="https://so.csdn.net/so/search?q=range%E5%87%BD%E6%95%B0&spm=1001.2101.3001.7020">range函数</a>返回一个range类型的整数序列，一般用在循环结构中。</p><table><thead><tr><th><strong>参数名称</strong></th><th><strong>说明</strong></th><th><strong>备注</strong></th></tr></thead><tbody><tr><td>start</td><td>计数起始位置</td><td>整数参数，可省略。省略时默认从0开始计数</td></tr><tr><td>stop</td><td>计数终点位置</td><td>不可省略的整数参数。计数迭代的序列中不包含stop</td></tr><tr><td>step</td><td>步长</td><td>可省略的整数参数，默认时步长为1</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">list</span>:  <br>    name=total_xml[i][:-<span class="hljs-number">4</span>]+<span class="hljs-string">&#x27;\n&#x27;</span>  <br>    <span class="hljs-keyword">if</span> i <span class="hljs-keyword">in</span> trainval:  <br>        ftrainval.write(name)  <br>        <span class="hljs-keyword">if</span> i <span class="hljs-keyword">in</span> train:  <br>            ftrain.write(name)  <br>        <span class="hljs-keyword">else</span>:  <br>            fval.write(name)  <br>    <span class="hljs-keyword">else</span>:  <br>        ftest.write(name)  <br><br>ftrainval.close()  <br>ftrain.close()  <br>fval.close()  <br>ftest.close()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Generate txt in ImageSets done.&quot;</span>)<br></code></pre></div></td></tr></table></figure><h4 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h4><p><a href="https://blog.csdn.net/kieven2008/article/details/81582591?ops_request_misc=%7B%22request_id%22:%22165631207516781685360179%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=165631207516781685360179&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-81582591-null-null.142%5Ev24%5Epc_rank_34,157%5Ev15%5Enew_3&utm_term=%E9%AA%8C%E8%AF%81%E9%9B%86%E5%92%8C%E6%B5%8B%E8%AF%95%E9%9B%86%E7%9A%84%E5%8C%BA%E5%88%AB&spm=1018.2226.3001.4187">训练集、验证集、测试集以及交验验证的理解</a></p><p><a href="https://blog.csdn.net/ZhangJingHuaJYO/article/details/122452878?ops_request_misc=&request_id=&biz_id=102&utm_term=%E9%AA%8C%E8%AF%81%E9%9B%86%E5%92%8C%E6%B5%8B%E8%AF%95%E9%9B%86%E7%9A%84%E5%8C%BA%E5%88%AB&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-0-122452878.nonecase&spm=1018.2226.3001.4187">验证集和测试集有什么区别？</a></p><p><a href="https://blog.csdn.net/jningwei/article/details/78170171/?ops_request_misc=&request_id=&biz_id=102&utm_term=%E9%AA%8C%E8%AF%81%E9%9B%86%E5%92%8C%E6%B5%8B%E8%AF%95%E9%9B%86%E7%9A%84%E5%8C%BA%E5%88%AB&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-5-78170171.nonecase&spm=1018.2226.3001.4187">深度学习: 验证集 &amp; 测试集 区别</a></p>]]></content>
    
    
    <categories>
      
      <category>深度学习</category>
      
      <category>炼丹笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>训练集</tag>
      
      <tag>测试集</tag>
      
      <tag>验证集</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>交叉熵损失函数🔋</title>
    <link href="/2022/03/20/%E6%8D%9F%E5%A4%B1%E5%87%BD%E6%95%B0%EF%BD%9C%E4%BA%A4%E5%8F%89%E7%86%B5%E6%8D%9F%E5%A4%B1%E5%87%BD%E6%95%B0/"/>
    <url>/2022/03/20/%E6%8D%9F%E5%A4%B1%E5%87%BD%E6%95%B0%EF%BD%9C%E4%BA%A4%E5%8F%89%E7%86%B5%E6%8D%9F%E5%A4%B1%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h4 id="损失函数｜交叉熵损失函数"><a href="#损失函数｜交叉熵损失函数" class="headerlink" title="损失函数｜交叉熵损失函数"></a><a href="https://zhuanlan.zhihu.com/p/35709485">损失函数｜交叉熵损失函数</a></h4><h4 id="⚠️-真实面试题"><a href="#⚠️-真实面试题" class="headerlink" title="⚠️ 真实面试题"></a>⚠️ 真实面试题</h4><blockquote><p><strong>假设我们有一个图像分类的任务，图片特征已经提取好，维度D，类别数N：</strong></p><p><strong>题目1</strong> 请用Pytorch/TF代码编写分类器：(1) 3层全连接；(2) 具有非线性变化；（3）具有过拟合处理<br><strong>题目2</strong> 这个任务，你会使用什么损失函数？<br><strong>题目3</strong> 交叉熵表达式？<br><strong>题目4</strong> 为什么使用交叉熵？能不能用MSE？<br><strong>题目5</strong> 如果让你选择提取图片特征的模型，你会选择什么模型？</p></blockquote><p>*主成分分析法(PCA) 提取的是数据分布方差比较大的方向，隐藏层可以提取有预测能力的特征</p><p>*混沌度可以理解为不确定性，当然是越低越好。</p><p>*输入图片大小为200×200，依次经过一层卷积（kernel size 5×5，padding 1，stride 2），pooling（kernel size 3×3，padding 0，stride 1），又一层卷积（kernel size 3×3，padding 1，stride 1）之后，输出特征图大小为:</p><p>​      **97    **</p><p><a href="https://blog.csdn.net/w5688414/article/details/79335232">解答</a></p><p><strong>卷积向下取整,池化向上取整</strong></p><figure class="highlight tap"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs tap">计算公式为：( input_size - kernel_size + 2*padding) / stride+1 = output_size)<br><br>输出高度 = （输入高度 - Kernel高度 +<span class="hljs-number"> 2 </span>* padding）/ 步长stride + 1<br><br>输出宽度 = （输入宽度 - Kernel宽度 +<span class="hljs-number"> 2 </span>* padding）/ 步长stride + 1<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>深度学习</category>
      
      <category>炼丹笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>卷积</tag>
      
      <tag>池化</tag>
      
      <tag>损失函数</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>极本穷源：YOLO篇Ⅲ</title>
    <link href="/2022/03/07/%E6%9E%81%E6%9C%AC%E7%A9%B7%E6%BA%90%EF%BC%9AYOLO%E7%AF%87%E2%85%A2/"/>
    <url>/2022/03/07/%E6%9E%81%E6%9C%AC%E7%A9%B7%E6%BA%90%EF%BC%9AYOLO%E7%AF%87%E2%85%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="极本穷源：YOLO篇Ⅲ"><a href="#极本穷源：YOLO篇Ⅲ" class="headerlink" title="极本穷源：YOLO篇Ⅲ"></a>极本穷源：YOLO篇Ⅲ</h1><h3 id="YOLOV4-tiny源码解读"><a href="#YOLOV4-tiny源码解读" class="headerlink" title="YOLOV4-tiny源码解读"></a>YOLOV4-tiny源码解读</h3><p>有了基本概念的理解，接着深入源码一步一步学习。在开始之前先做下回顾，<strong>小目标</strong>&amp;&amp;<strong>配置文件</strong>参数解读</p><h4 id="小目标识别检测中”小目标”尺寸占原始图片的比例："><a href="#小目标识别检测中”小目标”尺寸占原始图片的比例：" class="headerlink" title="小目标识别检测中”小目标”尺寸占原始图片的比例："></a>小目标识别检测中”小目标”尺寸占原始图片的比例：</h4><p>ubuntu下安装个labelImg，查看下标注目标时的尺寸。labelImg图片标注工具安装 从 PyPI 获取，但只有 python3.0 或更高版本，这是现代Linux发行版（如Ubuntu和Fedora）上最简单的（单命令）安装方法。</p><figure class="highlight cmake"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cmake">pip3 <span class="hljs-keyword">install</span> labelImg<br>labelImg<br>labelImg [IMAGE_PATH] [PRE-<span class="hljs-keyword">DEFINED</span> CLASS <span class="hljs-keyword">FILE</span>]<br></code></pre></div></td></tr></table></figure><p>经不完全统计。本次数据集目标尺寸大致如下：</p><table><thead><tr><th align="left"></th><th align="center">大部分尺寸</th><th align="center">最大</th><th align="center">最小</th><th align="center">肉眼看不见</th></tr></thead><tbody><tr><td align="left">目标尺寸</td><td align="center">170x151</td><td align="center">1200x2356</td><td align="center">47x82</td><td align="center">167x95</td></tr><tr><td align="left">图片尺寸</td><td align="center">5472x3648</td><td align="center">5472x3648</td><td align="center">5472x3648</td><td align="center">5472x3648</td></tr></tbody></table><h4 id="yolov4-tiny-cfg配置文件解读"><a href="#yolov4-tiny-cfg配置文件解读" class="headerlink" title="yolov4-tiny.cfg配置文件解读"></a>yolov4-tiny.cfg配置文件解读</h4><p>训练开始之前根据自己的显卡性能调整btach以及subdivisions的大小，普遍以batch = 64,subdivisions = 16设置。显卡差点的subdivisions设置成64。</p><p>整个训练样本会被分成若干个batch，网络中每个batch积累64个样本后会进行一次正向传播（在训练的过程中将一次性加载64张图片进内存）。subdivisions表示每个batch会分16次完成前向传播，前向传播的循环过程中累加loss求平均，待64张图片都完成前向传播后，再一次性后传更新参数。</p><figure class="highlight ini"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ini"><span class="hljs-section">[net]</span><br><span class="hljs-comment"># Testing</span><br><span class="hljs-comment"># 图片测试</span><br><span class="hljs-comment">#batch=1</span><br><span class="hljs-comment">#subdivisions=1</span><br><span class="hljs-comment"># Training</span><br><span class="hljs-comment"># 数据训练</span><br><span class="hljs-attr">batch</span>=<span class="hljs-number">64</span><span class="hljs-comment">#</span><br><span class="hljs-attr">subdivisions</span>=<span class="hljs-number">16</span><span class="hljs-comment">#</span><br><br><span class="hljs-attr">width</span>=<span class="hljs-number">416</span><span class="hljs-comment">#输入图像的宽</span><br><span class="hljs-attr">height</span>=<span class="hljs-number">416</span><br><span class="hljs-attr">channels</span>=<span class="hljs-number">3</span><span class="hljs-comment">#图像通道数，RGB三色图片 </span><br><span class="hljs-attr">momentum</span>=<span class="hljs-number">0.9</span><span class="hljs-comment">#动量系数</span><br><span class="hljs-attr">decay</span>=<span class="hljs-number">0.0005</span><span class="hljs-comment">#权重衰减正则项，防止过拟合</span><br><br><span class="hljs-comment">#图像增强，通过旋转图片，改变饱和度等操作增加训练样本数</span><br><span class="hljs-attr">angle</span>=<span class="hljs-number">0</span><span class="hljs-comment">#角度</span><br><span class="hljs-attr">saturation</span> = <span class="hljs-number">1.5</span><span class="hljs-comment">#饱和度</span><br><span class="hljs-attr">exposure</span> = <span class="hljs-number">1.5</span><span class="hljs-comment">#曝光量</span><br><span class="hljs-attr">hue</span>=.<span class="hljs-number">1</span><span class="hljs-comment">#色调</span><br><br><span class="hljs-comment">#学习率的调整</span><br><span class="hljs-attr">learning_rate</span>=<span class="hljs-number">0.00261</span><span class="hljs-comment">#学习率</span><br><span class="hljs-attr">burn_in</span>=<span class="hljs-number">1000</span><span class="hljs-comment">#应该是在1000轮后产生计算map</span><br><br><span class="hljs-attr">max_batches</span> = <span class="hljs-number">3000</span><span class="hljs-comment">#训练论次</span><br><span class="hljs-attr">policy</span>=steps<span class="hljs-comment">#调整学习率的policy，有如下policy：CONSTANT, STEP, EXP, POLY, STEPS, SIG, RANDOM</span><br><br><span class="hljs-attr">steps</span>=<span class="hljs-number">1600000</span>,<span class="hljs-number">1800000</span><span class="hljs-comment">#根据batch_num调整学习率</span><br><span class="hljs-attr">scales</span>=.<span class="hljs-number">1</span>,.<span class="hljs-number">1</span><span class="hljs-comment">#学习率变化比例，累计相乘</span><br></code></pre></div></td></tr></table></figure><h4 id="convolutional"><a href="#convolutional" class="headerlink" title="convolutional"></a>convolutional</h4><p>在训练数据前要修改每个yolo下的classes类别数，以及每个yolo上的第一个filters卷积核个数（等于输出的特征图的维度）：filters=(classes + 5)x3。</p><p>q:公式中的5是怎么来的？</p><p>这5个数分别包括：pc,bx, by, bh, bw。其中pc 为标志位，代表检测框中是否包含对象，框中包含任一目标对象    时pc = 1,反之只有背景没有目标时pc = 0。后面四个为bounding box的边界参数，分别是对象的中心位置x和y    坐标，对象的高和宽。参考<a href="https://blog.csdn.net/jliang3/article/details/86555519">博客</a>理解，后面乘以3就很容易理解，rgb三个通道的意思吧，红绿蓝三个通道各卷    一次。</p><p>每个卷积层之后包含一个批量归一化处理（BN）和一个激活函数（Leaky），YOLOv4的主干网络CSPDarknet53中，使用Mish代替了原来的Leaky ReLU。常见的激活函数：Sigmoid、tanh、Leaky ，ReLU、Mish。</p><p>batch、上采样（下采样）、卷积核和激活函数的概念，卷积核（filters）和滤波器（kernels）的区别。详细参考<a href="https://ethan1024.github.io/2021/12/15/%E6%9E%81%E6%9C%AC%E7%A9%B7%E6%BA%90%EF%BC%9AYOLO%E7%AF%87%E2%85%A1/">极本穷源2</a></p><figure class="highlight ini"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ini"><span class="hljs-comment">#卷积层</span><br><br><span class="hljs-section">[convolutional]</span><br><br><span class="hljs-attr">batch_normalize</span>=<span class="hljs-number">1</span>   <span class="hljs-comment">#是否做归一化处理，传统的归一化公式 (number - mean) / std， mean表示均值， std表示标准差</span><br><br><span class="hljs-attr">filters</span>=<span class="hljs-number">18</span>          <span class="hljs-comment">#卷积核个数（输出的特征图的维度）只修改每个yolo上的第一个conv层</span><br><br><span class="hljs-attr">size</span>=<span class="hljs-number">3</span><span class="hljs-comment">#卷积核尺寸3×3</span><br><br><span class="hljs-attr">stride</span>=<span class="hljs-number">2</span><span class="hljs-comment">#卷积运算时的步长</span><br><br><span class="hljs-attr">pad</span>=<span class="hljs-number">1</span><span class="hljs-comment">#如果pad为0,padding由 padding参数指定。如果pad为1，padding大小为size/2</span><br><br><span class="hljs-attr">activation</span>=leaky<span class="hljs-comment">#激活函数</span><br></code></pre></div></td></tr></table></figure><h4 id="route"><a href="#route" class="headerlink" title="route"></a>route</h4><p>route应该就是全连接层，起到连接的作用，将不同卷积层输出的特征进行连接。本质上它是一个融合层，它的作用是在当前层引出之前卷积所得到的特征层。全连接层的作用就是将网络学到分布式特征映射到样本标记空间。</p><p>参考<a href="https://blog.csdn.net/Mr_Coffe/article/details/115297103">YOLO中的route层</a></p><p>layers = -6,-1表示将向前数的第6层与第1层相连接，完成特征的传递。</p><p>layer = -2 ，表示引出前两层的conv输出的特征图。</p><figure class="highlight ini"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ini"><span class="hljs-section">[route]</span><br><br><span class="hljs-attr">layers</span> = -<span class="hljs-number">6</span>,-<span class="hljs-number">1</span><br></code></pre></div></td></tr></table></figure><h4 id="maxpool-（池化层）"><a href="#maxpool-（池化层）" class="headerlink" title="maxpool （池化层）"></a>maxpool （池化层）</h4><figure class="highlight ini"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ini"><span class="hljs-section">[maxpool]</span><br><br><span class="hljs-attr">size</span>=<span class="hljs-number">2</span><br><br><span class="hljs-attr">stride</span>=<span class="hljs-number">2</span><br></code></pre></div></td></tr></table></figure><h4 id="网络模型的构建"><a href="#网络模型的构建" class="headerlink" title="网络模型的构建"></a>网络模型的构建</h4><p>当然，只有cfg配置文件是远远不够的。配置文件本质上调用了一大堆定义好的函数，改变传入函数的参数实现不同的功能及效果。这些函数主要包括 /src下的</p><p>我们从最常用的 detector命令切入，简单分析下调用规则。从以下命令不难发现，这些命令是运行了当前文件夹下的darknet.c文件。</p><figure class="highlight jboss-cli"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jboss-cli"><span class="hljs-comment">#训练</span><br><span class="hljs-string">./darknet</span> detector train<br><br><span class="hljs-comment">#map计算</span><br><span class="hljs-string">./darknet</span> detector map<br><br><span class="hljs-comment">#图片检测</span><br><span class="hljs-string">./darknet</span> detector test<br><br><span class="hljs-comment">#聚类先验框</span><br><span class="hljs-string">./darknet</span> detector calc_anchors<br><br><span class="hljs-comment">#视频检测</span><br><span class="hljs-string">./darknet</span> detector demo<br></code></pre></div></td></tr></table></figure><p>打darknet.c看下：</p><figure class="highlight reasonml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs reasonml"><span class="hljs-number">1.</span>先看main函数<br>#先是一堆#ifndef防止多重定义,接下来就是一大堆<span class="hljs-keyword">if</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span><br><br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-number">0</span><span class="hljs-operator"> == </span>strcmp(argv<span class="hljs-literal">[<span class="hljs-number">1</span>]</span>, <span class="hljs-string">&quot;detector&quot;</span>))&#123;<br>        run<span class="hljs-constructor">_detector(<span class="hljs-params">argc</span>, <span class="hljs-params">argv</span>)</span>;<span class="hljs-comment">//492行</span><br>        <br>当./darknet后面的命令为 detector 时，调用函数run<span class="hljs-constructor">_dector()</span><br><br><span class="hljs-number">2.</span>右键这个函数转到定义：<br>void run<span class="hljs-constructor">_detector(<span class="hljs-params">int</span> <span class="hljs-params">argc</span>, <span class="hljs-params">char</span> <span class="hljs-operator">**</span><span class="hljs-params">argv</span>)</span><span class="hljs-comment">//1966行</span><br>和main.c一样先定义一大堆，然后就是<span class="hljs-keyword">if</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span><br><br>直接找到关键词 test train map...<br><span class="hljs-keyword">if</span> (<span class="hljs-number">0</span><span class="hljs-operator"> == </span>strcmp(argv<span class="hljs-literal">[<span class="hljs-number">2</span>]</span>, <span class="hljs-string">&quot;test&quot;</span>)) test<span class="hljs-constructor">_detector(<span class="hljs-params">datacfg</span>, <span class="hljs-params">cfg</span>, <span class="hljs-params">weights</span>, <span class="hljs-params">filename</span>, <span class="hljs-params">thresh</span>, <span class="hljs-params">hier_thresh</span>, <span class="hljs-params">dont_show</span>, <span class="hljs-params">ext_output</span>, <span class="hljs-params">save_labels</span>, <span class="hljs-params">outfile</span>, <span class="hljs-params">letter_box</span>, <span class="hljs-params">benchmark_layers</span>)</span>;<span class="hljs-comment">//2038</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-number">0</span><span class="hljs-operator"> == </span>strcmp(argv<span class="hljs-literal">[<span class="hljs-number">2</span>]</span>, <span class="hljs-string">&quot;train&quot;</span>)) train<span class="hljs-constructor">_detector(<span class="hljs-params">datacfg</span>, <span class="hljs-params">cfg</span>, <span class="hljs-params">weights</span>, <span class="hljs-params">gpus</span>, <span class="hljs-params">ngpus</span>, <span class="hljs-params">clear</span>, <span class="hljs-params">dont_show</span>, <span class="hljs-params">calc_map</span>, <span class="hljs-params">thresh</span>, <span class="hljs-params">iou_thresh</span>, <span class="hljs-params">mjpeg_port</span>, <span class="hljs-params">show_imgs</span>, <span class="hljs-params">benchmark_layers</span>, <span class="hljs-params">chart_path</span>)</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-number">0</span><span class="hljs-operator"> == </span>strcmp(argv<span class="hljs-literal">[<span class="hljs-number">2</span>]</span>, <span class="hljs-string">&quot;valid&quot;</span>)) validate<span class="hljs-constructor">_detector(<span class="hljs-params">datacfg</span>, <span class="hljs-params">cfg</span>, <span class="hljs-params">weights</span>, <span class="hljs-params">outfile</span>)</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-number">0</span><span class="hljs-operator"> == </span>strcmp(argv<span class="hljs-literal">[<span class="hljs-number">2</span>]</span>, <span class="hljs-string">&quot;recall&quot;</span>)) validate<span class="hljs-constructor">_detector_recall(<span class="hljs-params">datacfg</span>, <span class="hljs-params">cfg</span>, <span class="hljs-params">weights</span>)</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-number">0</span><span class="hljs-operator"> == </span>strcmp(argv<span class="hljs-literal">[<span class="hljs-number">2</span>]</span>, <span class="hljs-string">&quot;map&quot;</span>)) validate<span class="hljs-constructor">_detector_map(<span class="hljs-params">datacfg</span>, <span class="hljs-params">cfg</span>, <span class="hljs-params">weights</span>, <span class="hljs-params">thresh</span>, <span class="hljs-params">iou_thresh</span>, <span class="hljs-params">map_points</span>, <span class="hljs-params">letter_box</span>, NULL)</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-number">0</span><span class="hljs-operator"> == </span>strcmp(argv<span class="hljs-literal">[<span class="hljs-number">2</span>]</span>, <span class="hljs-string">&quot;calc_anchors&quot;</span>)) calc<span class="hljs-constructor">_anchors(<span class="hljs-params">datacfg</span>, <span class="hljs-params">num_of_clusters</span>, <span class="hljs-params">width</span>, <span class="hljs-params">height</span>, <span class="hljs-params">show</span>)</span>;<br></code></pre></div></td></tr></table></figure><p>果然都能找到定义了好的detector函数：（参考<a href="https://blog.csdn.net/jocelyn870/article/details/78931829">已有资料</a>理解）</p><figure class="highlight reasonml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs reasonml"><span class="hljs-comment">//detector.c</span><br><span class="hljs-number">3.</span>右键test_detector找到函数定义：<br><br>void test<span class="hljs-constructor">_detector(<span class="hljs-params">char</span> <span class="hljs-operator">*</span><span class="hljs-params">datacfg</span>, <span class="hljs-params">char</span> <span class="hljs-operator">*</span><span class="hljs-params">cfgfile</span>, <span class="hljs-params">char</span> <span class="hljs-operator">*</span><span class="hljs-params">weightfile</span>, <span class="hljs-params">char</span> <span class="hljs-operator">*</span><span class="hljs-params">filename</span>, <span class="hljs-params">float</span> <span class="hljs-params">thresh</span>,<span class="hljs-params">float</span> <span class="hljs-params">hier_thresh</span>, <span class="hljs-params">int</span> <span class="hljs-params">dont_show</span>, <span class="hljs-params">int</span> <span class="hljs-params">ext_output</span>, <span class="hljs-params">int</span> <span class="hljs-params">save_labels</span>, <span class="hljs-params">char</span> <span class="hljs-operator">*</span><span class="hljs-params">outfile</span>, <span class="hljs-params">int</span> <span class="hljs-params">letter_box</span>, <span class="hljs-params">int</span> <span class="hljs-params">benchmark_layers</span>)</span><span class="hljs-comment">//1626行</span><br><br>void train<span class="hljs-constructor">_detector(<span class="hljs-params">char</span> <span class="hljs-operator">*</span><span class="hljs-params">datacfg</span>, <span class="hljs-params">char</span> <span class="hljs-operator">*</span><span class="hljs-params">cfgfile</span>, <span class="hljs-params">char</span> <span class="hljs-operator">*</span><span class="hljs-params">weightfile</span>, <span class="hljs-params">int</span> <span class="hljs-operator">*</span><span class="hljs-params">gpus</span>, <span class="hljs-params">int</span> <span class="hljs-params">ngpus</span>, <span class="hljs-params">int</span> <span class="hljs-params">clear</span>, <span class="hljs-params">int</span> <span class="hljs-params">dont_show</span>, <span class="hljs-params">int</span> <span class="hljs-params">calc_map</span>, <span class="hljs-params">float</span> <span class="hljs-params">thresh</span>, <span class="hljs-params">float</span> <span class="hljs-params">iou_thresh</span>, <span class="hljs-params">int</span> <span class="hljs-params">mjpeg_port</span>, <span class="hljs-params">int</span> <span class="hljs-params">show_imgs</span>, <span class="hljs-params">int</span> <span class="hljs-params">benchmark_layers</span>, <span class="hljs-params">char</span><span class="hljs-operator">*</span> <span class="hljs-params">chart_path</span>)</span><span class="hljs-comment">//26行</span><br><br><span class="hljs-built_in">float</span> validate<span class="hljs-constructor">_detector_map(<span class="hljs-params">char</span> <span class="hljs-operator">*</span><span class="hljs-params">datacfg</span>, <span class="hljs-params">char</span> <span class="hljs-operator">*</span><span class="hljs-params">cfgfile</span>, <span class="hljs-params">char</span> <span class="hljs-operator">*</span><span class="hljs-params">weightfile</span>, <span class="hljs-params">float</span> <span class="hljs-params">thresh_calc_avg_iou</span>, <span class="hljs-params">const</span> <span class="hljs-params">float</span> <span class="hljs-params">iou_thresh</span>, <span class="hljs-params">const</span> <span class="hljs-params">int</span> <span class="hljs-params">map_points</span>, <span class="hljs-params">int</span> <span class="hljs-params">letter_box</span>, <span class="hljs-params">network</span> <span class="hljs-operator">*</span><span class="hljs-params">existing_net</span>)</span><span class="hljs-comment">//940行</span><br><br>void calc<span class="hljs-constructor">_anchors(<span class="hljs-params">char</span> <span class="hljs-operator">*</span><span class="hljs-params">datacfg</span>, <span class="hljs-params">int</span> <span class="hljs-params">num_of_clusters</span>, <span class="hljs-params">int</span> <span class="hljs-params">width</span>, <span class="hljs-params">int</span> <span class="hljs-params">height</span>, <span class="hljs-params">int</span> <span class="hljs-params">show</span>)</span><span class="hljs-comment">//1443行</span><br><br><span class="hljs-comment">//视频检测比较特殊，单独定义在 /src/demo.c</span><br><br>void validate<span class="hljs-constructor">_detector(<span class="hljs-params">char</span> <span class="hljs-operator">*</span><span class="hljs-params">datacfg</span>, <span class="hljs-params">char</span> <span class="hljs-operator">*</span><span class="hljs-params">cfgfile</span>, <span class="hljs-params">char</span> <span class="hljs-operator">*</span><span class="hljs-params">weightfile</span>, <span class="hljs-params">char</span> <span class="hljs-operator">*</span><span class="hljs-params">outfile</span>)</span><span class="hljs-comment">//643行</span><br><br></code></pre></div></td></tr></table></figure><p>以  train_detector（）为例：</p><figure class="highlight reasonml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs reasonml"><span class="hljs-comment">//detector.c</span><br><br><span class="hljs-comment">//读取cfg文件</span><br><span class="hljs-built_in">list</span> *options = read<span class="hljs-constructor">_data_cfg(<span class="hljs-params">datacfg</span>)</span>;<span class="hljs-comment">//28行</span><br><br><span class="hljs-comment">//根据train.txt找到训练的图片</span><br><span class="hljs-built_in">char</span> *train_images = option<span class="hljs-constructor">_find_str(<span class="hljs-params">options</span>, <span class="hljs-string">&quot;train&quot;</span>, <span class="hljs-string">&quot;data/train.txt&quot;</span>)</span>;<br><br><span class="hljs-comment">//用训练集合作为验证图片</span><br><span class="hljs-built_in">char</span> *valid_images = option<span class="hljs-constructor">_find_str(<span class="hljs-params">options</span>, <span class="hljs-string">&quot;valid&quot;</span>, <span class="hljs-params">train_images</span>)</span>;<br><br><span class="hljs-comment">//训练好的权重文件存储在/backup/</span><br><span class="hljs-built_in">char</span> *backup_directory = option<span class="hljs-constructor">_find_str(<span class="hljs-params">options</span>, <span class="hljs-string">&quot;backup&quot;</span>, <span class="hljs-string">&quot;/backup/&quot;</span>)</span>;<br></code></pre></div></td></tr></table></figure><p>大概就是从这里调的cfg配置文件吧，其他命令也是类似的。参考<a href="https://zhuanlan.zhihu.com/p/111478675">yolov3网络模型构建</a>。</p>]]></content>
    
    
    <categories>
      
      <category>极本穷源</category>
      
    </categories>
    
    
    <tags>
      
      <tag>yolov4-tiny</tag>
      
      <tag>cfg文件解读</tag>
      
      <tag>网络模型构建</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>YOLOv4-tiny训练数据集（kmeans聚类anchors）</title>
    <link href="/2022/03/03/YOLOv4-tiny%E8%AE%AD%E7%BB%83%E6%95%B0%E6%8D%AE%E9%9B%86%EF%BC%88kmeans%E8%81%9A%E7%B1%BBanchors%EF%BC%89/"/>
    <url>/2022/03/03/YOLOv4-tiny%E8%AE%AD%E7%BB%83%E6%95%B0%E6%8D%AE%E9%9B%86%EF%BC%88kmeans%E8%81%9A%E7%B1%BBanchors%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h2 id="YOLOv4-tiny训练数据集（kmeans聚类anchors）"><a href="#YOLOv4-tiny训练数据集（kmeans聚类anchors）" class="headerlink" title="YOLOv4-tiny训练数据集（kmeans聚类anchors）"></a>YOLOv4-tiny训练数据集（kmeans聚类anchors）</h2><p>接着上篇<a href="https://ethan1024.github.io/2022/02/22/padlepadle(%E7%99%BE%E5%BA%A6%E9%A3%9E%E6%A1%A8)/">开工总结</a>，上次总结到想训练yolov4-tiny检验下模型对小目标的感知能力，白嫖的GPU平台不得行。只好用自己的电脑训练数据了，训练起来也不算难。</p><p>网上有看到<a href="https://blog.csdn.net/cgt19910923/article/details/82154401">用Kmeans聚类计算先验框</a> 可以有效的提升检测准确率。</p><p>在darknet中源码默认附带了计算的命令：</p><h4 id="yolov4-tiny-聚类先验框"><a href="#yolov4-tiny-聚类先验框" class="headerlink" title="yolov4(tiny)聚类先验框"></a><a href="https://blog.csdn.net/weixin_41444791/article/details/114626098">yolov4(tiny)聚类先验框</a></h4><p>yolov4-tiny:</p><p><code>./darknet detector calc_anchors data/train.data -num_of_clusters 6 -width 416 -height 416</code></p><p>yolov4:</p><p><code>/darknet detector calc_anchors data/train.data -num_of_clusters 9 -width 416 -height 416</code></p><p>将聚类后得到的anchor替换cfg配置文件里对应的参数，再进行数据训练查看效果。</p><h4 id="训练效果对比"><a href="#训练效果对比" class="headerlink" title="训练效果对比"></a>训练效果对比</h4><p>总共训练两次：</p><p>①未使用kmeans聚类，map达到60%左右</p><p><img src="https://api2.mubu.com/v3/document_image/3baa00b8-17dc-4f8c-88f9-27b65183ccff-1995134.jpg"></p><p>②使用kmeans聚类预测框，map达到90%左右</p><p><img src="https://api2.mubu.com/v3/document_image/946b1744-614a-4a8f-8431-28807a3a9fa3-1995134.jpg"></p><h4 id="遇到的坑"><a href="#遇到的坑" class="headerlink" title="遇到的坑"></a>遇到的坑</h4><p>之前在windows下训练就遇到过opencv报错 -&gt; video stream stopped</p><p>解决方法：查了很多资料，有说卸载opencv重新安装，重新编译darknet的。感觉都不靠谱，按照以往经验这就是突然安装什么软件或者运行什么程序导致opencv文件丢失的，之前安装opencv用的是源码编译安装，这次直接到安装目录下重新执行安装命令，问题得以解决。</p>]]></content>
    
    
    <categories>
      
      <category>深度学习</category>
      
      <category>炼丹笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kmeans</tag>
      
      <tag>bounding boxs</tag>
      
      <tag>yolov4-tiny</tag>
      
      <tag>anchor boxes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>深度学习模型转换技术</title>
    <link href="/2022/02/28/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%A8%A1%E5%9E%8B%E8%BD%AC%E6%8D%A2%E6%8A%80%E6%9C%AF/"/>
    <url>/2022/02/28/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%A8%A1%E5%9E%8B%E8%BD%AC%E6%8D%A2%E6%8A%80%E6%9C%AF/</url>
    
    <content type="html"><![CDATA[<h1 id="深度学习模型转换技术"><a href="#深度学习模型转换技术" class="headerlink" title="深度学习模型转换技术"></a>深度学习模型转换技术</h1><h3 id="什么是深度学习模型转换"><a href="#什么是深度学习模型转换" class="headerlink" title="什么是深度学习模型转换"></a>什么是深度学习模型转换</h3><p>首先需要明白深度学习模型的概念，在使用深度学习<br>深度学习模型是指一种包含深度神经网络结构的机器学习模型。算法工程师使用某种深度学习框架构建好模型，经调参和训练优化后，将最终生成的网络参数和模型结构一并保存，得到的文件即为可用于前向推理的模型文件。不同深度学习框架训练得到的模型文件的格式不尽相同，但完整的模型文件一般都包含了张量数据、运算单元和计算图等信息。</p><p>之前在复现<a href="https://github.com/jkjung-avt/tensorrt_demos">jetson nano上部署yolov4-tiny</a>，实时检测目标时用到了两次模型转换，很疑惑为啥要转换模型，今天就来学习下模型转换相关技术，用到的两次模型准换：</p><div class="hljs code-wrapper"><pre><code>    ①yolo转onnx​    ②onnx转trt</code></pre></div><h4 id="什么是onnx"><a href="#什么是onnx" class="headerlink" title="什么是onnx?+"></a>什么是onnx?+</h4><p>了解一下：<a href="http://bindog.github.io/blog/2020/03/13/deep-learning-model-convert-and-depoly/">深度学习模型转换与部署那些事(含ONNX格式详细分析)</a></p><h4 id="什么是tensorRT？"><a href="#什么是tensorRT？" class="headerlink" title="什么是tensorRT？"></a>什么是tensorRT？</h4><h3 id="为什么要模型转换"><a href="#为什么要模型转换" class="headerlink" title="为什么要模型转换"></a>为什么要模型转换</h3><p>目的是为了提速，简单的来说</p><h3 id="如何进行模型转换"><a href="#如何进行模型转换" class="headerlink" title="如何进行模型转换"></a>如何进行模型转换</h3><p>tensorRT</p>]]></content>
    
    
    <categories>
      
      <category>深度学习</category>
      
      <category>炼丹笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>onnx</tag>
      
      <tag>yolo</tag>
      
      <tag>tensorrt</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>开工总结(padlepadle,yolo-fasterV2)</title>
    <link href="/2022/02/22/padlepadle(%E7%99%BE%E5%BA%A6%E9%A3%9E%E6%A1%A8)/"/>
    <url>/2022/02/22/padlepadle(%E7%99%BE%E5%BA%A6%E9%A3%9E%E6%A1%A8)/</url>
    
    <content type="html"><![CDATA[<h1 id="开工总结-padlepadle-yolo-fasterV2"><a href="#开工总结-padlepadle-yolo-fasterV2" class="headerlink" title="开工总结(padlepadle,yolo-fasterV2)"></a>开工总结(padlepadle,yolo-fasterV2)</h1><h3 id="问题概要"><a href="#问题概要" class="headerlink" title="问题概要"></a>问题概要</h3><p>终于在春节前西安疫情消退，回家简短的休整后又来搬砖了。这段时间主要完成节前留下的问题：原使用yolov4-Tiny（TensorRT加速）在jetson nano上达到实时检测（FPS：40）的效果，后在win10下用yolov3训练数据测试效果<a href="https://blog.csdn.net/weixin_41950276/article/details/87733523?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164553362416781685349539%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=164553362416781685349539&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_ulrmf~default~default-2-87733523.pc_search_insert_ulrmf&utm_term=map+ap&spm=1018.2226.3001.4187">mAP</a>达到91.07%，用训练好的yolov3权重文件测试在nano的帧数只有8帧左右（不能用v3训练的权重测试v4-tiny检测不出来，可能是网络结构不同导致的）,而预期目标要求在nano上满足准确率高的前提下实时的效果。参考<a href="https://github.com/jkjung-avt/tensorrt_demos">下图</a>在nano上用trt加速的各种算法帧数测试效果。</p><p><img src="https://gitee.com/seaman1024/pic/raw/master/https:/gitee.com/seaman1024/pic.git/image-20220222203850046.png"></p><h3 id="解决思路："><a href="#解决思路：" class="headerlink" title="解决思路："></a>解决思路：</h3><p>①提升yolov4-Tiny检测准确率 </p><p>②通过<a href="https://blog.csdn.net/qq_38109843/article/details/107234801?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164552065516781685333871%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=164552065516781685333871&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_ulrmf~default~default-3-107234801.pc_search_insert_ulrmf&utm_term=yolov3+%E5%89%AA%E6%9E%9D&spm=1018.2226.3001.4187">剪枝压缩</a>等操作提升yolov3在nano上的的检测速度</p><h3 id="方法实施："><a href="#方法实施：" class="headerlink" title="方法实施："></a>方法实施：</h3><p>yolov3网络模型较为复杂，剪枝压缩不好操作，那就先用yolov4-tiny训练下数据看下效果。受限于每次训练数据电脑就用不了这一因素，最近有看到白嫖百度GPU服务器在线训练的内容，有这种好事当然要冲，给我也整一个。简单完成几个小任务算力卡就到手了，接下来就可以准备在飞桨的AI studio在线用yolov4-Tiny训练自己的数据集了。</p><p><img src="https://gitee.com/seaman1024/pic/raw/master/https:/gitee.com/seaman1024/pic.git/image-20220222211530679.png"></p><h4 id="国产深度学习开源框架—飞桨"><a href="#国产深度学习开源框架—飞桨" class="headerlink" title="国产深度学习开源框架—飞桨"></a>国产深度学习开源框架—<a href="https://github.com/paddlepaddle/paddle">飞桨</a></h4><p>padlepadle(百度飞桨)—国内最大的开源深度学习框架，是可以与PyTorch、TensorFlow掰手腕的国产框架佼佼者，简单<a href="https://zhuanlan.zhihu.com/p/190255066">了解</a>下。顺便了解下其他<a href="https://blog.csdn.net/javastart/article/details/108242804">国产深度学习平台</a>。</p><h5 id="飞桨能干啥？"><a href="#飞桨能干啥？" class="headerlink" title="飞桨能干啥？"></a>飞桨能干啥？</h5><p>①超多深度学习<a href="https://aistudio.baidu.com/aistudio/course">免费课程</a></p><p>②在线<a href="https://aistudio.baidu.com/aistudio/projectoverview/public">跑项目</a></p><p>③创建<a href="https://aistudio.baidu.com/aistudio/projectoverview/private/1">自己的项目</a>并在线训练数据</p><p><img src="https://gitee.com/seaman1024/pic/raw/master/https:/gitee.com/seaman1024/pic.git/image-20220222214044453.png" alt="在线跑项目"></p><h5 id="飞桨怎么用？"><a href="#飞桨怎么用？" class="headerlink" title="飞桨怎么用？"></a>飞桨怎么用？</h5><p>①<a href="https://www.paddlepaddle.org.cn/install/quick?docurl=/documentation/docs/zh/install/conda/windows-conda.html">本地使用</a>，推荐win10下安装conda，可以安装各种想要的虚拟环境</p><p>②<a href="https://blog.csdn.net/qq_43632917/article/details/105456180?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164482824016780271946743%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=164482824016780271946743&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~baidu_landing_v2~default-2-105456180.pc_search_insert_ulrmf&utm_term=%E7%99%BD%E5%AB%96%E7%99%BE%E5%BA%A6GPU&spm=1018.2226.3001.4187">在线</a>创建项目并运行</p><h5 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h5><p>在线创建了项目并上传了自己的数据集，下载darknet源码，编译后报错。可能和cuda版本或者显卡驱动有关。</p><p><img src="https://gitee.com/seaman1024/pic/raw/master/https:/gitee.com/seaman1024/pic.git/image-20220222215439029.png"></p><p><img src="https://gitee.com/seaman1024/pic/raw/master/https:/gitee.com/seaman1024/pic.git/image-20220222215836380.png"></p><p>白嫖的GPU服务器sudo权限没有给解决起这个报错有点受阻，后面再百度试试实在不行还是用自己的电脑跑起来省事。</p><p>后面查了下百度aistudio早已不再支持tensorflow、pytorch、mxnet等框架，果然白嫖来的不会完美。不过在aistuidio从学习基础到上手跑项目代码确实是良心国产。</p><h4 id="Yolo-fasterV2-训练自己的数据"><a href="#Yolo-fasterV2-训练自己的数据" class="headerlink" title="Yolo-fasterV2 训练自己的数据"></a><a href="https://github.com/dog-qiuqiu/Yolo-FastestV2">Yolo-fasterV2</a> 训练自己的数据</h4><h5 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h5><h5 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h5><p>按照球球大佬在<a href="https://github.com/dog-qiuqiu/Yolo-FastestV2/blob/main/README.md">readme.md</a>中的说明，之前标注的数据集就可以用。</p><p><img src="https://gitee.com/seaman1024/pic/raw/master/https:/gitee.com/seaman1024/pic.git/image-20220222220734864.png"></p><p>安装 requirements 环境，测试一张图片看看效果.可能会遇到torch和cuda不版本匹配的问题，报错如下：</p><figure class="highlight vbnet"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vbnet"><span class="hljs-symbol">RunTimeError:</span> CUDA <span class="hljs-keyword">error</span>: no kernel image <span class="hljs-built_in">is</span> available <span class="hljs-keyword">for</span> execution <span class="hljs-keyword">on</span> the device<br></code></pre></div></td></tr></table></figure><p>参考<a href="https://blog.csdn.net/BohnLee/article/details/122392115">这篇</a>解决。</p><p>按照目录结构，准备相应文件。</p><p><img src="https://gitee.com/seaman1024/pic/raw/master/https:/gitee.com/seaman1024/pic.git/image-20220222221656128.png"></p><p>修改下自己的 .data文件，设定训练参数,删除文件中的注释</p><figure class="highlight ini"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ini"><span class="hljs-section">[name]</span><br><span class="hljs-attr">model_name</span>=obj           <span class="hljs-comment"># model name</span><br><br><span class="hljs-section">[train-configure]</span><br><span class="hljs-attr">epochs</span>=<span class="hljs-number">500</span>                <span class="hljs-comment"># train epichs</span><br><span class="hljs-attr">steps</span>=<span class="hljs-number">150</span>,<span class="hljs-number">250</span>             <span class="hljs-comment"># Declining learning rate steps</span><br><span class="hljs-attr">batch_size</span>=<span class="hljs-number">64</span>             <span class="hljs-comment"># batch size</span><br><span class="hljs-attr">subdivisions</span>=<span class="hljs-number">1</span>            <span class="hljs-comment"># Same as the subdivisions of the darknet cfg file</span><br><span class="hljs-attr">learning_rate</span>=<span class="hljs-number">0.001</span>       <span class="hljs-comment"># learning rate</span><br><br><span class="hljs-section">[model-configure]</span><br><span class="hljs-attr">pre_weights</span>=None          <span class="hljs-comment"># The path to load the model, if it is none, then restart the training</span><br><span class="hljs-attr">classes</span>=<span class="hljs-number">80</span>                <span class="hljs-comment"># Number of detection categories</span><br><span class="hljs-attr">width</span>=<span class="hljs-number">352</span>                 <span class="hljs-comment"># The width of the model input image</span><br><span class="hljs-attr">height</span>=<span class="hljs-number">352</span>                <span class="hljs-comment"># The height of the model input image</span><br><span class="hljs-attr">anchor_num</span>=<span class="hljs-number">3</span>              <span class="hljs-comment"># anchor num</span><br><span class="hljs-attr">anchors</span>=<span class="hljs-number">12.64</span>,<span class="hljs-number">19.39</span>, <span class="hljs-number">37.88</span>,<span class="hljs-number">51.48</span>, <span class="hljs-number">55.71</span>,<span class="hljs-number">138.31</span>, <span class="hljs-number">126.91</span>,<span class="hljs-number">78.23</span>, <span class="hljs-number">131.57</span>,<span class="hljs-number">214.55</span>, <span class="hljs-number">279.92</span>,<span class="hljs-number">258.87</span> <span class="hljs-comment">#anchor bias</span><br><br><span class="hljs-section">[data-configure]</span><br><span class="hljs-attr">train</span>=/media/qiuqiu/D/coco/train2017.txt   <span class="hljs-comment"># train dataset path .txt file</span><br><span class="hljs-attr">val</span>=/media/qiuqiu/D/coco/val2017.txt       <span class="hljs-comment"># val dataset path .txt file </span><br><span class="hljs-attr">names</span>=./data/coco.names                    <span class="hljs-comment"># .names category label file</span><br></code></pre></div></td></tr></table></figure><p>yolo-fatest的设计初衷是因为Darknet CPU推理效率优化不好，所以为了能够在像运算能力较低的ARM-cpu,虽然说“更快、更轻“，但训练出来的结果不尽人意。造成这一结果的原因太多了，可能是样本数量、学习率、训练轮次。</p><p><img src="https://api2.mubu.com/v3/document_image/828a4915-5071-41a4-b1cb-0469bcce11f2-1995134.jpg"></p><p>后面还是再试下<a href="https://ethan1024.github.io/2022/03/03/YOLOv4-tiny%E8%AE%AD%E7%BB%83%E6%95%B0%E6%8D%AE%E9%9B%86%EF%BC%88kmeans%E8%81%9A%E7%B1%BBanchors%EF%BC%89/">yolov4-tiny</a>的训练效果吧。</p><p><a href="https://blog.csdn.net/huiyuanliyan/article/details/87900550">深度学习的宏观框架——训练（training）和推理（inference）及其应用场景</a></p>]]></content>
    
    
    <categories>
      
      <category>深度学习</category>
      
      <category>炼丹笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>飞桨</tag>
      
      <tag>Yolo-faster</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>疫情下的炼丹笔记(yolov3计算map)🎈</title>
    <link href="/2022/01/05/%E7%96%AB%E6%83%85%E4%B8%8B%E7%9A%84%E7%82%BC%E4%B8%B9%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/01/05/%E7%96%AB%E6%83%85%E4%B8%8B%E7%9A%84%E7%82%BC%E4%B8%B9%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>好久没写，最近发生的事情太多了，简要汇总下吧。12月22日，西安要封城的消息传遍了VX群，随即收拾资料准备居家办公做好持久战的准备。短短一周防疫政策的不断变化让很多物资储备不足的小伙伴慌了起来，当时去屯物资的时候还在疑惑，怎么大爷大妈扛着整袋面粉，盐也要买好几袋。“ 菜量充足，不必哄抢。一键下单，送到你家。” 这有问题吗？没有啊！有问题的是老实人你。。 只能说大爷大妈的预判YYDS。</p><p><img src="https://s2.loli.net/2022/01/10/DLAhzX1n69Y2fEy.png" alt="Screenshot_2022-01-10-17-35-23-434_高德地图"></p><p>后来嘛，就是居家封闭，定期核酸检测。醒来第一件事就是查看核酸检测结果，看着每天新增的病例数，每个人都期盼着拐点的出现。ww没想到去年屯的五谷派上了用场，还好在家学会了几道菜，这三板斧解决吃饭难题。因为这波疫情，整天被圈在个水泥盒子里的人也被联系了起来。夜深人静，群里谈及梦想，都挺不容易。“都睡了几天了 该有不该有的梦里都有了 就是没能走出这个房子”，焯！彩票梦，老板梦的气泡一个个的被扎破。生活嘛，总是让一批又一批不知死活的小b崽子在不知不觉中成长，耳机里又响起  “想学功夫 修炼仙术 先征服这条山路 我在三清观里录歌 旋律和韵脚兼顾” 《崂山道士》—Masiwei。</p><p><img src="https://s2.loli.net/2022/01/10/4NJpRxlwLZSIahe.jpg" alt="IMG_20211230_164936R"></p><p>新年了，新年了。被关在这里，只能用一场酩酊大醉送走2021，从炸金花玩到摇骰子，到最后的真心话大冒险。新的一年，只希望自己平安喜乐，一切都尽快的回归正轨。一周多了，睡也睡够了玩也玩够了，是时候充实自己了。古有“天大寒，砚冰坚，手指不可屈伸，弗之怠”，每想到这句诗就找不到不学习的理由。</p><p>接着之前的工作，初识YOLO算法后对采集的数据进行处理。这段时间的规划是：<strong>制作数据集、训练模型、模型优化</strong>。这次的数据训练是在Windows下采用YOLOV3训练自己的数据，达到对目标的较高可靠度的准确识别。</p><h4 id="制作数据集"><a href="#制作数据集" class="headerlink" title="制作数据集"></a>制作数据集</h4><p>使用labelimg标注工具，对图片中感兴趣的目标进行标注，为后续的训练提供目标信息在图片中的信息,其中主要包括类别信息以及位置信息：两个点坐标（xmin,ymin）（xmax,ymax）</p><p><img src="https://s2.loli.net/2022/01/10/gfDlQkZJq4E1wMe.png" alt="image-20220108170848801"></p><p>低对比度小目标识别检测：上图目标像素大小大概为371 X 240 ，原图片像素为2000w像素：5472 X 3648）</p><p>①labelimg标注后生成对应的xml文件</p><p>②使用python脚本将位置信息转换为YOLO训练所需要的数据格式，生成对应的txt文件。最后将图片与txt文件都放输入data\obj目录下，方便后续使用。</p><p>③新建一个类别文件obj.names （内容只需要填写自己的类别名称，中文名称需要做数据集是中文标签，且在源代码中修改相关文件并重新编译）, 新建一个图片目录文件train.txt, 都放到data/目录下</p><p>总的来说，训练的时候会用到obj.data文件。而obj.data写入了train.txt以及obj.names,train.txt又写入了标注好的图片路径，从而达到一连串的调用。</p><p><img src="https://s2.loli.net/2022/01/10/rTP8KySXeEFanRI.png" alt="image-20220110190523584"></p><h4 id="训练模型"><a href="#训练模型" class="headerlink" title="训练模型"></a>训练模型</h4><h5 id="准备工作："><a href="#准备工作：" class="headerlink" title="准备工作："></a>准备工作：</h5><p>①在修改训练轮次 max_batches = 8000，按照以往经验200张左右的图片，训练8000轮就够了</p><p>②Windows版的darknet-YOLOV3提供了map命令，可以一边训练数据集一边计算训练集的map以寻找最优模型。</p><p>命令如下：        </p><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus">darknet<span class="hljs-selector-class">.exe</span> detector train data\obj<span class="hljs-selector-class">.data</span> yolo-obj<span class="hljs-selector-class">.cfg</span> darknet53<span class="hljs-selector-class">.conv</span>.<span class="hljs-number">74</span> -map<br></code></pre></div></td></tr></table></figure><p>报错记录：错误信息说的是obj.data里的test.txt没有对应的测试数据</p><p><img src="https://s2.loli.net/2022/01/10/bGeM9KWZqnC8uAS.png" alt="image-20220108174536234"></p><p>valid = data/test.txt  改为  valid = data/train.txt</p><p><img src="https://s2.loli.net/2022/01/10/deMfHZtcnbENJok.png" alt="image-20220109001832409"></p><h5 id="开始训练："><a href="#开始训练：" class="headerlink" title="开始训练："></a>开始训练：</h5><p>这次使用map命令边训练边计算 average perscion，如红线所示，极其不稳定。</p><p><img src="https://s2.loli.net/2022/01/10/fEpnS62iUDCoZhK.png" alt="image-20220108223530753"></p><p>群里问了下出现这种情况有两种可能：训练的数据太少了（确实少），batchsize设置的较小（有待研究）</p><p><img src="https://s2.loli.net/2022/01/10/CT4NObkmLt6nFyX.png" alt="chart_yolo-obj"></p><p>这个时候停止训练，计算一下测试集的mAP。</p><h4 id="测试集的mAP计算"><a href="#测试集的mAP计算" class="headerlink" title="测试集的mAP计算"></a>测试集的mAP计算</h4><p>①标注测试集对应的目标信息，和训练集一样用labelimg生成xml文件，转换为txt文件。</p><p>②新建test.txt,和train.txt一样写入待测试图片的路径，通过调用obj.data里的valid = data/test.txt实现对测试图片的调用。</p><p>③测试命令如下：</p><p><img src="https://s2.loli.net/2022/01/10/Sxn9ds25YrA1uCw.png" alt="image-20220109060257840"></p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">darknet</span>.exe detector map data\obj.data yolo-obj.cfg .\backup\yolo-obj_last.weights -thresh <span class="hljs-number">0</span>.<span class="hljs-number">25</span> -iou_thresh <span class="hljs-number">0</span>.<span class="hljs-number">45</span><br></code></pre></div></td></tr></table></figure><p>测试结果表明：mAP(只有一个类别所以平均准确率AP = mAP) 达到惊人的91.07%</p><p>其中，测试结果参数解析：</p><figure class="highlight armasm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs armasm">TP：正样本预测为正样本<br>​<span class="hljs-built_in">FP</span>：负样本预测为正样本<br>​TN：负样本预测为负样本<br>​           <span class="hljs-meta">FN</span>: 正样本预测为负样本<br><br>​           精确率 = <span class="hljs-number">94</span>%（precision）,即用训练好的模型去预测测试集,预测结果与实际相比有对有错，精确率就是实际正确预测占模型认为正确预测的比例。<br>            计算公式：precision = TP/(TP+<span class="hljs-built_in">FP</span>)<br><br>​召回率 = <span class="hljs-number">92</span>% （recall），即用训练好的模型预测测试集,这个模型会有四类预测结果，召回率就是实际正确预测占应该被预测出来的比例。<br>            计算公式：recall = TP/(TP+<span class="hljs-meta">FN</span>)<br><br>​           交并比 = <span class="hljs-number">69</span>.<span class="hljs-number">74</span>%（IoU），即预测边框与实际边框的交集与并集的比例。<br></code></pre></div></td></tr></table></figure><p><img src="https://s2.loli.net/2022/01/10/x9af2LIH8EDj1KA.png" alt="image-20220109055847116"></p><h4 id="测试效果"><a href="#测试效果" class="headerlink" title="测试效果"></a>测试效果</h4><h5 id="图片检测："><a href="#图片检测：" class="headerlink" title="图片检测："></a>图片检测：</h5><p>测试集里随便拉一张图片，执行如下命令，看下效果。</p><figure class="highlight taggerscript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs taggerscript">darknet.exe detector test data<span class="hljs-symbol">\o</span>bj.data yolo-obj.cfg .<span class="hljs-symbol">\b</span>ackup<span class="hljs-symbol">\y</span>olo-obj_last.weights .<span class="hljs-symbol">\d</span>ata<span class="hljs-symbol">\T</span>est<span class="hljs-symbol">\1</span>21.jpg <br></code></pre></div></td></tr></table></figure><p><img src="https://s2.loli.net/2022/01/10/4gmnPU3pRKDjEvQ.png" alt="image-20220109061727288"></p><h5 id="视频检测："><a href="#视频检测：" class="headerlink" title="视频检测："></a>视频检测：</h5><p>错误记录：video stream stopped ，大部分是缺少openCV相关文件。复制·openCV安装目录下的opencv_ffmpeg340_64.dll文件到darknet\x64目录下，问题解决。</p><p>执行如下命令：</p><figure class="highlight taggerscript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs taggerscript">darknet.exe detector demo data<span class="hljs-symbol">\o</span>bj.data yolo-obj.cfg .<span class="hljs-symbol">\w</span>eights<span class="hljs-symbol">\y</span>olo-obj_last.weights .<span class="hljs-symbol">\d</span>ata<span class="hljs-symbol">\T</span>est<span class="hljs-symbol">\m</span>p4<span class="hljs-symbol">\t</span>est2.avi <br><br>保存检测视频加上下面这一句  <br><br>-thresh 0.25 -out_filename .<span class="hljs-symbol">\d</span>ata<span class="hljs-symbol">\T</span>est<span class="hljs-symbol">\m</span>p4<span class="hljs-symbol">\t</span>est2_result.avi<br></code></pre></div></td></tr></table></figure><p><a href="https://www.bilibili.com/video/BV1bS4y1j7uu?spm_id_from=333.999.0.0">视频检测效果</a></p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>​        深度学习，道阻且长。革命尚未成功，同志仍需努力！</p>]]></content>
    
    
    <categories>
      
      <category>深度学习</category>
      
      <category>炼丹笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>训练集</tag>
      
      <tag>新冠</tag>
      
      <tag>封城</tag>
      
      <tag>mAP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>极本穷源：YOLO篇Ⅱ</title>
    <link href="/2021/12/15/%E6%9E%81%E6%9C%AC%E7%A9%B7%E6%BA%90%EF%BC%9AYOLO%E7%AF%87%E2%85%A1/"/>
    <url>/2021/12/15/%E6%9E%81%E6%9C%AC%E7%A9%B7%E6%BA%90%EF%BC%9AYOLO%E7%AF%87%E2%85%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="极本穷源：YOLO篇Ⅱ"><a href="#极本穷源：YOLO篇Ⅱ" class="headerlink" title="极本穷源：YOLO篇Ⅱ"></a>极本穷源：YOLO篇Ⅱ</h1><ul><li>上篇中我们提到了yolo的大概属性，今天接着总结一下yolo是基于什么样的背景发展而来。</li><li>YOLO是如何实现目标的识别检测？</li><li><h3 id="首先YOLO由多层网络组成以YOLOv3为例："><a href="#首先YOLO由多层网络组成以YOLOv3为例：" class="headerlink" title="首先YOLO由多层网络组成以YOLOv3为例："></a>首先YOLO由多层网络组成以YOLOv3为例：</h3><ul><li><a href="https://blog.csdn.net/nan355655600/article/details/106246625">yolov3</a><ul><li><img src="https://api2.mubu.com/v3/document_image/831861db-2134-49e0-81f7-509bb10f7505-1995134.jpg"></li><li>yolov3.cfg</li></ul></li></ul></li><li>结构组成<a href="https://blog.csdn.net/wjinjie/article/details/105016766?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522163724052216780255281953%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=163724052216780255281953&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_click~default-2-105016766.first_rank_v2_pc_rank_v29&utm_term=%E5%85%A8%E8%BF%9E%E6%8E%A5%E5%B1%82&spm=1018.2226.3001.4187">卷积层+池化层+激活函数+全连接层</a><ul><li>卷积层<ul><li>卷积层由一组滤波器组成输入图像与滤波器进行卷积产生输出图像<ul><li>  <img src="https://api2.mubu.com/v3/document_image/5f5719a9-cbce-4594-bcc2-bf142f7c96a0-1995134.jpg"></li></ul>  <a href="https://www.zhihu.com/question/49376084">(16 条消息) 如何理解卷积神经网络（CNN）中的卷积和池化？ - 知乎 (zhihu.com)</a><ul><li>卷积核（filters）和滤波器（kernels）的区别<ul><li>  <img src="https://api2.mubu.com/v3/document_image/795d9ad7-09bc-42a7-a54f-21084ced58b1-1995134.jpg"></li></ul>  <a href="https://www.cnblogs.com/elitphil/p/12040671.html">科普-深度学习中的卷积-卷积核和滤波器的区别 - 重大的小鸿 - 博客园 (cnblogs.com)</a><ul><li>filter和kernel之间的不同很微妙。很多时候，它们可以互换，所以这可能造成我们的混淆。那它们之间的不同在于哪里呢？一个”kernel”更倾向于是2D的权重矩阵。而’filter”则是指多个Kernel堆叠的3D结构。如果是一个2D的filter，那么两者就是一样的。但是一个3Dfilter, 在大多数深度学习的卷积中，它是包含kernel的。每个卷积核都是独一无二的，主要在于强调输入通道的不同方面</li></ul></li></ul></li><li>除了卷积层，卷积网络也经常使用池化层来缩减模型的大小，提高计算速度，同时提高所提取特征的鲁棒性.因为经过池化后，得到的是 概要统计特征 。它们不仅 具有低得多的维度 (相比使用所有提取得到的特征)，同时还会 改善结果(不容易过拟合)</li></ul></li><li>池化层<ul><li>池化层目的是进行特征选择，图像经过卷积提取的特征图会产生很多冗余特征，主要采用平均池化和最大池化。</li><li>下采样和池化应该是包含关系，池化属于下采样，而下采样不局限于池化，如果卷积 stride=2，此时也可以把这种卷积叫做下采样<ul><li><a href="https://blog.csdn.net/qq_31347869/article/details/90378030?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522163724200216780265449115%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=163724200216780265449115&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-90378030.first_rank_v2_pc_rank_v29&utm_term=%E4%B8%8B%E9%87%87%E6%A0%B7%E5%92%8C%E6%B1%A0%E5%8C%96%E7%9A%84%E5%8C%BA%E5%88%AB&spm=1018.2226.3001.4187">下采样和池化的区别</a><ul><li>池化 = 涨水</li><li>池化的过程 = 升高水位（扩大矩阵网格）</li><li>池化的目的是为了得到物体的边缘形状</li><li>可以想象水要了解山立体的形状，水位低时得出山脚的形状，水位中等时得出山腰的形状，水位高时得出山顶的形状，三点就可以大致描出山的简笔画</li><li>而卷积的过程是区分哪里是水，哪里是山</li><li>对于网络结构而言，上面的层看下面的层经过 pooling 后传上来的特征图，就好像在太空上俯瞰地球，看到的只有山脊和雪峰。这即是对特征进行宏观上的进一步抽象</li></ul></li></ul></li></ul></li><li>激活函数<ul><li>激活函数是啥？（Sigmoid函数、tanh函数、Relu函数）  <a href="https://blog.csdn.net/m0_38065572/article/details/104937481?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522163935873416780271550129%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=163935873416780271550129&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_click~default-3-104937481.pc_search_insert_es_download&utm_term=%E6%BF%80%E6%B4%BB%E5%87%BD%E6%95%B0&spm=1018.2226.3001.4187">(2条消息) 神经网络之激活函数_August-us的博客-CSDN博客_神经网络激活函数</a>  <a href="https://blog.csdn.net/asdfsadfasdfsa/article/details/92831177?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522163645939116780271573345%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=163645939116780271573345&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-92831177.first_rank_v2_pc_rank_v29&utm_term=%E6%BF%80%E6%B4%BB%E5%87%BD%E6%95%B0%E7%9A%84%E4%BD%9C%E7%94%A8&spm=1018.2226.3001.4187">(1条消息) 激活函数的作用_atarik@163.com-CSDN博客_激活函数的作用</a>  <a href="https://blog.csdn.net/tyhj_sf/article/details/79932893?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522163644727216780274166398%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=163644727216780274166398&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-79932893.first_rank_v2_pc_rank_v29&utm_term=%E6%BF%80%E6%B4%BB%E5%87%BD%E6%95%B0&spm=1018.2226.3001.4187">(1条消息) 常用激活函数（激励函数）理解与总结_tyhj_sf的博客空间-CSDN博客_激活函数</a>​</li><li>在YOLOv3中，每个卷积层之后包含一个批量归一化层和一个Leaky ReLU。而在YOLOv4的主干网络CSPDarknet53中，使用Mish代替了原来的Leaky ReLU。Leaky ReLU和Mish激活函数的公式与图像如下：</li><li>Softmax<ul><li><img src="https://api2.mubu.com/v3/document_image/d9a66f32-f6e4-4032-8ea8-428e590eefd3-1995134.jpg"></li><li>Softmax 函数不仅可以将输出值映射到[0,1]区间，还满足所有的输出值之和为 1 的特性。如下图的例子，输出层的输出为[2.,1.,0.1]，经过 Softmax 函数计算后，得到输出为[0.7,0.2,0.1]，可以看到每个值代表了当前样本属于每个类别的概率，概率值之和为 1。</li><li>通过 Softmax 函数可以将输出层的输出转译为类别概率，在多分类问题中使用的非常频繁</li><li>另外，在softmax函数多分类问题中，若损失函数选用交叉熵，则下降梯度计算起来将会非常方便，使得网络训练过程中的迭代计算复杂度大大降低。</li></ul></li></ul></li><li><a href="https://blog.csdn.net/weixin_42713739/article/details/103067132?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522163724052216780255281953%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=163724052216780255281953&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-103067132.first_rank_v2_pc_rank_v29&utm_term=%E5%85%A8%E8%BF%9E%E6%8E%A5%E5%B1%82&spm=1018.2226.3001.4187">全连接层</a><ul><li>全连接层将学到的“分布式特征表示”映射到样本标记空间</li><li>假设你是一只小蚂蚁，你的任务是找小面包。你的视野还比较窄，只能看到很小一片区域。当你找到一片小面包之后，你不知道你找到的是不是全部的小面包，所以你们全部的蚂蚁开了个会，把所有的小面包都拿出来分享了，全连接层就是这个蚂蚁大会。</li></ul></li></ul></li><li><h3 id="yolo基础知识"><a href="#yolo基础知识" class="headerlink" title="yolo基础知识"></a>yolo基础知识</h3><ul><li>概念解释：<ul><li>训练神经网络:Batch、Epoch和Iteration<ul><li>Batch（批 / 一批样本）：将整个训练样本分成若干个Batch。</li><li>Batch_Size（批大小）：每批样本的大小。</li><li>Iteration（一次迭代）：训练一个Batch就是一次Iteration（这个概念跟程序语言中的迭代器相似）</li><li><a href="https://blog.csdn.net/mid_Faker/article/details/105705879?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522163723580016780366513507%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=163723580016780366513507&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-105705879.first_rank_v2_pc_rank_v29&utm_term=epoch&spm=1018.2226.3001.4187">Epoch</a>（时期）：当一个完整的数据集通过了神经网络一次并且返回了一次，这个过程称为一次&gt;epoch。（也就是说，所有训练样本在神经网络中都  进行了一次<a href="https://blog.csdn.net/weixin_43325134/article/details/119814264?spm=1001.2101.3001.6661.1&utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~default-1.no_search_link&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~default-1.no_search_link">正向传播</a> 和一次反向传播  ）再通俗一点，一个Epoch就是将所有训练样本训练一次的过程。<ul><li>随着epoch数量增加，神经网络中的权重的更新次数也在增加，曲线从欠拟合变得过拟合。</li><li>那么，问题来了，几个epoch才是合适的呢？</li><li>不幸的是，这个问题并没有正确的答案。对于不同的数据集，答案是不一样的。但是数据的多样性会影响合适的epoch的数量。比如，只有黑色的猫的数据集，以及有各种颜色的猫的数据集。</li></ul></li></ul></li><li><a href="https://blog.csdn.net/qq_41800366/article/details/86583789?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522163724575216780271942966%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=163724575216780271942966&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-86583789.first_rank_v2_pc_rank_v29&utm_term=%E6%A2%AF%E5%BA%A6&spm=1018.2226.3001.4187">梯度下降算法原理讲解</a>——机器学习<ul><li>梯度是微积分中一个很重要的概念，之前提到过梯度的意义</li><li>在单变量的函数中，梯度其实就是函数的微分，代表着函数在某个给定点的切线的斜率</li><li>在多变量函数中，梯度是一个向量，向量有方向，梯度的方向就指出了函数在给定点的上升最快的方向</li><li>这也就说明了为什么我们需要千方百计的求取梯度！我们需要到达山底，就需要在每一步观测到此时最陡峭的地方，梯度就恰巧告诉了我们这个方向。梯度的方向是函数在给定点上升最快的方向，那么梯度的反方向就是函数在给定点下降最快的方向，这正是我们所需要的。所以我们只要沿着梯度的方向一直走，就能走到局部的最低点</li></ul></li><li>学习率<ul><li>学习率越低，损失函数的变化速度就越慢，容易过拟合。虽然使用低学习率可以确保我们不会错过任何局部极小值，但也意味着我们将花费更长的时间来进行收敛，特别是在被困在局部最优点的时候。而学习率过高容易发生梯度爆炸，loss振动幅度较大，模型难以收敛。下图是不同学习率的loss变化，因此，选择一个合适的学习率是十分重要的。</li></ul></li><li>通道channel、特征图<a href="https://blog.csdn.net/shyjhyp11/article/details/108048264?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522163724463816780271981750%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=163724463816780271981750&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-108048264.first_rank_v2_pc_rank_v29&utm_term=feature+map&spm=1018.2226.3001.4187">feature map、</a>过滤器filter和卷积核kernel</li><li>（<a href="https://blog.csdn.net/qq_41853758/article/details/82930944?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522163904125516780264016075%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=163904125516780264016075&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-82930944.pc_search_all_es&utm_term=bn%E6%89%B9%E9%87%8F%E5%BD%92%E4%B8%80%E5%8C%96&spm=1018.2226.3001.4187">BN</a>）批量归一化全面解析,<a href="https://blog.csdn.net/t20134297/article/details/105745566?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522163724437616780357266262%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=163724437616780357266262&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-105745566.first_rank_v2_pc_rank_v29&utm_term=+backbone&spm=1018.2226.3001.4187">backbone</a>：主干网络.head：head是获取网络输出内容的网络，neck:是放在backbone和head之间的，是为了更好的利用backbone提取的特征.GAP：Global Average Pool全局平均池化（AP）平均预测</li><li>上采样，下采样  《图像的上采样（upsampling）与下采样（subsampled）》 <a href="https://blog.csdn.net/stf1065716904/article/details/78450997?utm_source=app&app_version=4.17.2&code=app_1562916241&uLinkId=usr1mkqgl919blen">https://blog.csdn.net/stf1065716904/article/details/78450997?utm_source=app&amp;app_version=4.17.2&amp;code=app_1562916241&amp;uLinkId=usr1mkqgl919blen</a><ul><li>缩小图像（或称为下采样（subsampled）或降采样（downsampled））的主要目的有两个：1、使得图像符合显示区域的大小；2、生成对应图像的缩略图。</li><li>放大图像（或称为上采样（upsampling）或图像插值（interpolating））的主要目的是放大原图像,从而可以显示在更高分辨率的显示设备上。</li><li>对图像的缩放操作并不能带来更多关于该图像的信息, 因此图像的质量将不可避免地受到影响。然而，确实有一些缩放方法能够增加图像的信息，从而使得缩放后的图像质量超过原图质量的。</li></ul></li><li>Anchor Boxes机制<ul><li><a href="https://blog.csdn.net/weixin_44259900/article/details/89440506?ops_request_misc=&request_id=&biz_id=102&utm_term=anchor%20boxfovea%20box&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-1-89440506.pc_search_all_es&spm=1018.2226.3001.4187">论文学习 FoveaBox: Beyond Anchor-based Object Detector_何以解忧唯有杜康的博客-CSDN博客_foveabox</a></li><li>YOLO会将输入的图片分成S*S个网格，每个小网格会生成n个anchor Box。图像的真实框会和图像中心点所在的小网格生成的anchor box做IOU计算。回归出来的框就是Bounding Box（也就是网络输出的框，他与真实框和anchor Box都有差距）</li><li>通过引入anchor box，一方面，模型学习到的是物体真实边框与对应的anchor box的偏移量，而不是目标物体在图像中的绝对坐标，保证了检测任务的平移不变性；另一方面，通过这种对齐，可以使模型对多尺度物体检测的训练变得容易，因为物体边框对相应anchor box的偏移量的值分布于有限范围内。</li></ul></li></ul></li></ul></li><li><h3 id="讲这么多直接上操作感受下吧，打开YOLOv4-Tiny的-cfg文件"><a href="#讲这么多直接上操作感受下吧，打开YOLOv4-Tiny的-cfg文件" class="headerlink" title="讲这么多直接上操作感受下吧，打开YOLOv4-Tiny的.cfg文件"></a>讲这么多直接上操作感受下吧，打开YOLOv4-Tiny的.cfg文件</h3></li><li>NMS调参<ul><li>288.cfg<ul><li>ignore_thresh = .7</li><li>beta_nms=0.7</li><li>result<ul><li>  <img src="https://api2.mubu.com/v3/document_image/6408bce3-2e06-4b00-b947-feb5692c6510-1995134.jpg"></li></ul></li></ul></li><li>288.cfg<ul><li>ignore_thresh = .7</li><li>beta_nms=0.8</li><li>result<ul><li>  <img src="https://api2.mubu.com/v3/document_image/b052fcbe-09b7-4670-8086-da3d412d0e24-1995134.jpg"></li><li>  <img src="https://api2.mubu.com/v3/document_image/fd585dd4-60de-43a3-9d2d-65b9c91dca3e-1995134.jpg"></li></ul></li></ul></li><li>416.cfg<ul><li>ignore_thresh = .7</li><li>beta_nms=0.7</li><li>result<ul><li>  <img src="https://api2.mubu.com/v3/document_image/f6a1caf4-cdaf-4eb2-a5b5-3686bc80812a-1995134.jpg"></li></ul></li></ul></li><li>416.cfg<ul><li>ignore_thresh = .7</li><li>beta_nms=0.5</li><li>result<ul><li>  <img src="https://api2.mubu.com/v3/document_image/d78d9cdb-b2f2-48d4-a7bf-0d9e75307ac6-1995134.jpg"></li></ul></li></ul></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>极本穷源</category>
      
    </categories>
    
    
    <tags>
      
      <tag>yolov3</tag>
      
      <tag>网络结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>极本穷源：YOLO篇Ⅰ</title>
    <link href="/2021/12/14/%E6%9E%81%E6%9C%AC%E7%A9%B7%E6%BA%90%EF%BC%9AYOLO%E7%AF%87%E2%85%A0/"/>
    <url>/2021/12/14/%E6%9E%81%E6%9C%AC%E7%A9%B7%E6%BA%90%EF%BC%9AYOLO%E7%AF%87%E2%85%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="极本穷源：YOLO篇Ⅰ"><a href="#极本穷源：YOLO篇Ⅰ" class="headerlink" title="极本穷源：YOLO篇Ⅰ"></a>极本穷源：YOLO篇Ⅰ</h1><ul><li>总听到神经网络<ul><li>什么是神经网络？  <a href="https://www.captainbed.net/whatisnn/">1.1.1 什么是神经网络 - 床长人工智能教程 (captainbed.net)</a><ul><li>人工神经网络是受到人类大脑结构的启发而创造出来的，这也是它能拥有真智能的根本原因。在我们的大脑中，有数十亿个称为神经元的细胞，它们连接成了一个神经网络。<img src="https://api2.mubu.com/v3/document_image/6c5708d3-9410-4f8d-854a-d1bd7f51f6d4-1995134.jpg"><img src="https://api2.mubu.com/v3/document_image/eae460ac-c4d1-47cc-9b76-09c0e0c2a7ca-1995134.jpg"></li><li>层数越多那么构造的神经网络就越复杂，训练深度神经网络的过程就叫做深度学习</li></ul></li><li>AI”炼丹”是啥<ul><li>深度学习就像炼丹，没啥理论，纯靠实验，要有很多比较好的显卡等设备，动不动就要训练好几天的数据模型。</li></ul></li><li>这段时间在学习YOLO算法，相信很多小伙伴和我一样，机器学习深度学习，傻傻分不清楚。  <img src="https://api2.mubu.com/v3/document_image/398714d1-f1e3-4e8a-a133-16508cc6b77d-1995134.jpg"></li><li>遇到这种情况怎么说，旋即打开浏览器搜索“机器学习”，wdnmd,“学习”居然分了这么多的类：机器学习、监督学习、非监督学习、强化学习、迁移学习、深度学习（DNN、CNN、RNN、LSTM、GAN）。脑瓜子嗡嗡的，这种感觉就像…“马肾么妹，马冬梅啊，大爷！”。世上无难事，只要肯放弃。从入门到放弃只需轻轻一点，关闭浏览器冷静一下。  <img src="https://api2.mubu.com/v3/document_image/d01e2f46-ad30-4713-ad7b-401959281c3e-1995134.jpg"></li><li>重新来会会这些“牛鬼蛇神”，一张图了解下它们的关系  <img src="https://gitee.com/seaman1024/pic/raw/master/https://gitee.com/seaman1024/pic.git/d4304b93-72ca-42e9-94c2-7b894c5a60d9-1995134.jpg">  <img src="https://api2.mubu.com/v3/document_image/be896f62-ee45-4c31-aef7-17b2b1ba1abe-1995134.jpg"><ul><li>传统机器学习的模型结构<ul><li>线性回归</li><li>逻辑回归</li><li>决策树</li><li>支持向量机</li><li>贝叶斯模型</li><li>正则化模型</li><li>集成模型</li><li>神经网络</li></ul></li><li>机器学习<ul><li>监督学习</li><li>非监督学习</li><li>强化学习</li><li>迁移学习</li><li>深度学习<ul><li>DNN（深度神经网络）网络拓扑结构分类<ul><li>RNN（递归神经网络）</li><li>LSTM（长期短期记忆网络）</li><li>GAN（生成对抗网络）</li><li>CNN（卷积神经网络）  以卷积为核心的一大类网络 <a href="https://www.zhihu.com/question/67490422">CNN、RCNN、YOLO等和Alexnet、VGG等的关系是什么？ - 知乎 (zhihu.com)</a><ul><li>图像分类<ul><li>LeNet、AlexNet、VGG、GoogleNet、ResNet</li></ul></li><li>目标检测<ul><li>RCNN、Fast RCNN、Faster RCNN、SSD、<a href="https://zhuanlan.zhihu.com/p/33363195">Mask-RCNN</a></li><li>YOLO</li></ul></li></ul></li></ul></li></ul></li></ul></li><li>千呼万唤始出来，“YOLO”与机器学习的关系可谓是千丝万缕。</li><li><a href="https://zhuanlan.zhihu.com/p/303355997">语义分割与实例分割</a></li><li><a href="https://blog.csdn.net/kk123k/article/details/86584216">图像分类、目标检测、语义分割、实例分割和全景分割的区别</a><ul><li>全景分割  （全景分割是语义分割和实例分割的结合。跟实例分割不同的是：实例分割只对图像中的object进行检测，并对检测到的object进行分割，而全景分割是对图中的所有物体包括背景都要进行检测和分割。）<ul><li>语义分割  通常意义上的目标分割指的就是语义分割  语义分割（下图左）就是需要区分到图中每一点像素点，而不仅仅是矩形框框住了。但是同一物体的不同实例不需要单独分割出来。对下图左，标注为人，羊，狗，草地。而不需要羊1，羊2，羊3，羊4，羊5等。</li><li>实例分割  实例分割：其实就是目标检测和语义分割的结合。相对目标检测的边界框，实例分割可精确到物体的边缘；相对语义分割，实例分割需要标注出图上同一物体的不同个体（羊1，羊2，羊3…） 目前常用的实例分割算法是Mask R-CNN。<ul><li>目标检测  目前常用的目标检测算法有Faster R-CNN和基于YOLO的目标检测的算法</li><li>图像分类  图像分类：就是对图像判断出所属的分类，比如在学习分类中数据集有人（person）、羊（sheep）、狗（dog）和猫（cat）四种，图像分类要求给定一个图片输出图片里含有哪些分类，比如下图的例子是含有person、sheep和dog三种。</li></ul></li></ul></li></ul></li></ul></li><li>揭开“YOLO”的神秘面纱  <img src="https://gitee.com/seaman1024/pic/raw/master/https://gitee.com/seaman1024/pic.git/186cce88-9910-4c6d-a17e-f10824cc23be-1995134.jpg"></li><li>从2018年Yolov3年提出的两年后，在原作者声名放弃更新Yolo算法后，俄罗斯的Alexey大神扛起了Yolov4的大旗，然后不久又出现了Yolov5,而到了2021年，就在大家质疑Yolo系列该如何改进时？旷视科技又发布了Yolox算法，感兴趣的可以参考这篇<a href="https://blog.csdn.net/weixin_45192980/article/details/113697157">博客</a>了解。</li><li>2020年2月份YOLO之父Joseph Redmon宣布退出计算机视觉的研究的时候，很多人都以为目标检测神器YOLO系列就此终结。</li><li>没想到的是, 2020年4月份曾经参与YOLO项目维护Alexey Bochkovskiy带着论文《Optimal Speed and Accuracy of Object Detection》和代码在Github上重磅开源！YOLOv4正式发布！</li><li>令我们更没想到的是！！！2020年6月份，短短两个月！Ultralytics LLC 公司的创始人兼 CEO Glenn Jocher 在 GitHub 上发布了 YOLOv5 的一个开源实现，标志着YOLOv5的到来！</li></ul></li><li>现如今的YOLO算法在各位大佬的神奇改造下，在保持算法准确性的前提下轻量化网络模型，使其能够部署到像树莓派、RK3399等低算力的设备上并得到比较不错的检测速度与准度。</li><li>那么这些大佬们平时在自己的岗位上都需要干些啥呢？<ul><li>1.基于提出需求设计组合算法即策略解决问题，不限于深度学习，传统视觉，算法策略，大部分需求都是组合算法解决的，例如检测分类姿态等多模态模型组合并配合一些传统算法解决问题(pytorch/caffe opencv)</li><li>2.训练数据采集方案的设计，标注规则的指定以及数据审核</li><li>3.快速实现算法demo并验证算法逻辑策略部分以及评估自测(Python)</li><li>4.模型实际部署平台的性能资源占用和效率评估，评估ok走下一步，否则返回3步骤针对优化验证，</li><li>4.基于c/c++完成算法sdk库开发，其中涉及到模型多平台移植部署(涉及到后端nn推理框架的选用，前后处理部分代码的编写)，代码高性能优化(simd cuda openc,openmpl…)</li><li>5.算法库文档编写，外发sdk库 (…..算法岗不是调参侠)机器学习算法工程师都要干些啥</li></ul></li><li>  那么YOLO是如何实现目标的识别检测？下一篇接着总结！</li></ul>]]></content>
    
    
    <categories>
      
      <category>极本穷源</category>
      
    </categories>
    
    
    <tags>
      
      <tag>yolo</tag>
      
      <tag>AI炼丹</tag>
      
      <tag>神经网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>图片上传测试👀</title>
    <link href="/2021/12/10/%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0%E6%B5%8B%E8%AF%95/"/>
    <url>/2021/12/10/%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0%E6%B5%8B%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<p><img src="https://gitee.com/seaman1024/pic/raw/master/https://gitee.com/seaman1024/pic.git/%E4%BC%81%E9%B9%85.jpg"></p><p><img src="https://gitee.com/seaman1024/pic/raw/master/https://gitee.com/seaman1024/pic.git/%E5%8D%B7%E7%A7%AF.gif"></p><p><img src="https://gitee.com/seaman1024/pic/raw/master/https://gitee.com/seaman1024/pic.git/1.jpg"></p><p><img src="https://gitee.com/seaman1024/pic/raw/master/https://gitee.com/seaman1024/pic.git/image-20211210163112981.png" alt="image-20211210163112981"></p><p><img src="https://gitee.com/seaman1024/pic/raw/master/https://gitee.com/seaman1024/pic.git/724ad6284c7279e72b28550bbe1d30f.png"></p>]]></content>
    
    
    <categories>
      
      <category>图片</category>
      
    </categories>
    
    
    <tags>
      
      <tag>沙滩企鹅</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何优雅的写博客👀</title>
    <link href="/2021/12/10/%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E7%9A%84%E5%86%99%E5%8D%9A%E5%AE%A2%F0%9F%91%80/"/>
    <url>/2021/12/10/%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E7%9A%84%E5%86%99%E5%8D%9A%E5%AE%A2%F0%9F%91%80/</url>
    
    <content type="html"><![CDATA[<h1 id="如何优雅的写博客👀"><a href="#如何优雅的写博客👀" class="headerlink" title="如何优雅的写博客👀"></a>如何优雅的写博客👀</h1><h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>最近发现幕布笔记原来越不稳定了，动不动就崩了，网上有传言幕布要倒闭了。这几天就又找了下其他办法，趁早转移图片素材存储空间。</p><p>之前在这篇<a href="https://ethan1024.github.io/2021/10/22/%E4%B8%8D%E8%8A%B1%E4%B8%80%E5%88%86%E9%92%B1%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/">博客</a>里面说过，搭建好自己的博客网站后如何写博客。经过这段时间测试这个方法的可行性，结果上来看属实是有点麻烦了🤦‍♂️，先要在幕布写一遍笔记。为的是白嫖幕布的网络存储，然后用makdownPad排一下版，写博客界面如图二的界面写起博客极度不舒适。</p><p><img src="https://gitee.com/seaman1024/pic/raw/master/https://gitee.com/seaman1024/pic.git/image-20211210100648059.png" alt="之前用的写博客方法"></p><p><img src="https://gitee.com/seaman1024/pic/raw/master/https://gitee.com/seaman1024/pic.git/image-20211210100350300.png" alt="markdown写博客的界面"></p><h2 id="经过"><a href="#经过" class="headerlink" title="经过"></a>经过</h2><p>今天看到了一种肥肠方便且舒服的markdown的正确打开方式✔</p><p>它的原理很简单，还是之前说的图片存到免费图床上。然后用一个极度舒适markdown编辑软件自动的将博客中用到的图片上传到图床，那么它到底有多舒适呢，首先：①自动上传图片到图床②实时预览③人性化的主题以及专注模式和打字机模式。如下图所示，专注模式会将当前编辑行高亮显示。专不专注我不知道，zb这一块拿捏了。</p><p><img src="https://gitee.com/seaman1024/pic/raw/master/https://gitee.com/seaman1024/pic.git/image-20211210102532462.png" alt="Typora写博客"></p><p>那么如何实现呢：</p><p>①下载并安装相关 <a href="https://pan.baidu.com/s/16ydcoMywgmzAt35N1SXKHA">软件</a>  Typora+PicGo（提取码：8848）</p><p>②配置gitee仓库设置，新建仓库</p><p><img src="https://gitee.com/seaman1024/pic/raw/master/https://gitee.com/seaman1024/pic.git/image-20211210103403714.png" alt="新建仓库"></p><p>创建私人令牌，复制生成的密钥一会要用👻</p><p><img src="https://gitee.com/seaman1024/pic/raw/master/https://gitee.com/seaman1024/pic.git/image-20211210104046770.png" alt="生成私人令牌"></p><p><img src="https://gitee.com/seaman1024/pic/raw/master/https://gitee.com/seaman1024/pic.git/image-20211210103842177.png" alt="创建私人令牌"></p><p>③打开PicGo点击安装可能会装不上，不要慌，去他的 <a href="https://github.com/Molunerfinn/PicGo">GitHub</a> 下一份源码，然后导入本地插件。</p><p><img src="https://gitee.com/seaman1024/pic/raw/master/https://gitee.com/seaman1024/pic.git/image-20211210104533029.png" alt="picgo设置"></p><p>如图所示，配置一下。</p><p><img src="https://gitee.com/seaman1024/pic/raw/master/https://gitee.com/seaman1024/pic.git/image-20211210105106193.png" alt="picgo设置"></p><p>④配置 一下Typora</p><p><img src="https://gitee.com/seaman1024/pic/raw/master/https://gitee.com/seaman1024/pic.git/image-20211210112816065.png" alt="配置 一下Typora"></p><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p>然后就可以愉快的写博客了🤔</p><p><img src="https://gitee.com/seaman1024/pic/raw/master/https://gitee.com/seaman1024/pic.git/image-20211210113053652.png" alt="源代码模式"></p><p><img src="https://gitee.com/seaman1024/pic/raw/master/https://gitee.com/seaman1024/pic.git/image-20211210130030727.png" alt="实时预览"></p><p>参考文档：<a href="http://www.soolco.com/post/118186_1_1.html">typora 图床配置方法-博客 (soolco.com)</a></p>]]></content>
    
    
    <categories>
      
      <category>搭建个人博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PicGo</tag>
      
      <tag>gitee图床</tag>
      
      <tag>Typora</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>用于缓解OSA的医疗枕</title>
    <link href="/2021/12/06/%E7%94%A8%E4%BA%8E%E7%BC%93%E8%A7%A3OSA%E7%9A%84%E5%8C%BB%E7%96%97%E6%9E%95/"/>
    <url>/2021/12/06/%E7%94%A8%E4%BA%8E%E7%BC%93%E8%A7%A3OSA%E7%9A%84%E5%8C%BB%E7%96%97%E6%9E%95/</url>
    
    <content type="html"><![CDATA[<h1 id="用于缓解OSA的医疗枕"><a href="#用于缓解OSA的医疗枕" class="headerlink" title="用于缓解OSA的医疗枕"></a>用于缓解OSA的医疗枕</h1><h2 id="起因"><a href="#起因" class="headerlink" title="*   起因"></a>*   起因</h2><p>   由于工作原因，六月份的时候做了一款基于生物雷达、薄膜式压力传感器、LoRa、Stm32f103、电磁气阀、气泵等电子元器件的缓解OSA（阻塞性睡眠呼吸暂停）的医疗枕头。现将大概原理总结如下：</p><h2 id="目的"><a href="#目的" class="headerlink" title="*   目的"></a>*   目的</h2><ul><li>  简单说明下这款设计的意义：众所周知，很多人在睡觉的时候会打呼，从医学角度解释的话是因为患者在睡眠时发生了呼吸阻塞引起打呼的发生。那么有人就要说了，不就是打呼嘛，多大个事！这有问题吗？没有问题。很不幸啊，鄙人在大学期间和一个体重较重的同学同住过一个寝室，每次睡觉都要赶在他睡着之前睡，他的呼噜打的那叫一个地道！好几次打呼时发生了阻塞性睡眠呼吸暂停，直接一口气没上来把自己憋醒了。较为严重的症状会引起肺功能失调、哮喘等疾病，因此设计一款非接触式的睡眠呼吸暂停监测及缓解的枕头是极其有必要的！</li></ul><h2 id="方法"><a href="#方法" class="headerlink" title="*   方法"></a>*   方法</h2><ul><li>  <strong>原理说明</strong>：简单来说，通过<a href="https://baike.baidu.com/item/%E7%94%9F%E7%89%A9%E9%9B%B7%E8%BE%BE/16593763">生物雷达</a>实时监测人体呼吸信号，使用Stm32单片机将模拟信号转换为数字信号，做数据处理判断后做出呼吸状态评估，进而通过LoRa无线通信将这一结果反馈至缓解装置（缓解装置为一个由气泵、气囊、电磁气阀、Stm32单片机、LoRa、薄膜式压力传感器组成的医疗枕头）。当缓解装置接收到来自监测端的OSA信号时，通过薄膜式压力传感器判断人体头部位置，从而触发电磁气阀为对应的气囊充气，推动患者头部对头部睡眠姿势做出改变，以达到缓解OSA的目的。电路图如下:</li></ul><p>   <img src="https://api2.mubu.com/v3/document_image/e37607c6-193b-4333-bbc6-4ee9564f1160-1995134.jpg"></p><ul><li><strong>硬件组成</strong>：</li><li>  薄膜式压力传感器：</li></ul><p>   <img src="https://api2.mubu.com/v3/document_image/3e2c17d9-6699-4e8a-8d06-c651a3f82647-1995134.jpg"><br>   <img src="https://api2.mubu.com/v3/document_image/834508de-91f0-4789-a7b0-b3321b41bc63-1995134.jpg"></p><ul><li>  生物雷达、STM32、HC05蓝牙（后改蓝牙）</li></ul><p>   <img src="https://api2.mubu.com/v3/document_image/d32daad5-3d6d-4f66-ad2f-792a5cf2e424-1995134.jpg"></p><ul><li>  气泵、电磁气阀</li></ul><p>   <img src="https://api2.mubu.com/v3/document_image/7cd9a5d3-9cd9-41a6-8225-442e66b4d1bf-1995134.jpg"></p><p>   <img src="https://api2.mubu.com/v3/document_image/da0cbf04-1ab2-4ecf-b044-2b1be26f9522-1995134.jpg"></p><h2 id="结果"><a href="#结果" class="headerlink" title="*   结果"></a>*   结果</h2><ul><li>  采用非接触式的呼吸监测，减少了患者佩戴各种监测仪器带来的不便与影响，实际测试表明整套的流程走完是没有问题，然而因为考虑到气囊充气的力度，这次选择的鱼缸供氧的气泵，噪音较大。除此之外，程序上的一些小bug也没来得及改完就被强行收工。最终效果如下图：</li></ul><p>   <img src="https://api2.mubu.com/v3/document_image/0c64df64-0935-4c99-995d-1651aaafd2a8-1995134.jpg"></p><p>   <img src="https://api2.mubu.com/v3/document_image/a9d411e0-fe9d-4655-a9cf-1a6a71f47c95-1995134.jpg"></p><h2 id="结论"><a href="#结论" class="headerlink" title="*   结论"></a>*   结论</h2><ul><li>  当一个人去解决一大堆需求时，你能做的就是多动脑，勤动手，实在不会的就简化需求！以前压根没听说过电磁气阀这类东西，一个劲的按照自己的想法搜索合适的硬件选型，用鱼缸增氧的气泵也是处于给的时间并不多的原因。总之，干就完了，奥利给！</li></ul>]]></content>
    
    
    <categories>
      
      <category>单片机</category>
      
    </categories>
    
    
    <tags>
      
      <tag>OSA</tag>
      
      <tag>生物雷达</tag>
      
      <tag>呼吸暂停</tag>
      
      <tag>薄膜式压力传感器</tag>
      
      <tag>LoRa</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>四旋翼无人机组装</title>
    <link href="/2021/12/05/%E5%9B%9B%E6%97%8B%E7%BF%BC%E6%97%A0%E4%BA%BA%E6%9C%BA%E7%BB%84%E8%A3%85/"/>
    <url>/2021/12/05/%E5%9B%9B%E6%97%8B%E7%BF%BC%E6%97%A0%E4%BA%BA%E6%9C%BA%E7%BB%84%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<h1 id="四旋翼无人机组装"><a href="#四旋翼无人机组装" class="headerlink" title="四旋翼无人机组装"></a>四旋翼无人机组装</h1><ul><li>  去年夏天由于工作需要，在淘宝购买了一款拉线版四旋翼无人机开发套件。简单介绍下这款套件，如下图所示无人机主要包括机架、电机、电调、分电板、飞控、GPS导航（罗盘指南针）、电源、遥控器（接收机）、碳桨、抛投器等。</li></ul><p>   <img src="https://api2.mubu.com/v3/document_image/b8d78807-438e-4690-9670-1086441ecf07-1995134.jpg"></p><ul><li>  <strong>机架</strong>和<strong>浆叶</strong>均采用了碳钎维材料，目的是减轻自身重量，获得较好的续航性能。<strong>电机</strong>与<strong>电调</strong>配合飞控的控制指令使得无人机获得动力来源，电调的主要作用就是控制电机以合适的转速和功率转动，从而使得无人机平稳的飞行。飞控选配的是开源飞控pixhawk2.4.8，刚接触的小伙伴可能对<strong>APM、PIXHAWK、PX4</strong>这三者分不清楚，简单来说pixhawk是一款开源硬件APM和PX4都是烧写在该硬件上的固件程序。</li></ul><p>   <img src="https://api2.mubu.com/v3/document_image/2a2edfac-1430-4839-b8a8-9cde9a4ce220-1995134.jpg"></p><ul><li>  <strong>遥控器</strong>和<strong>接收机</strong>是一套用于联通无人机状态、图像采集与地面站通信的通信设施，本次选配的是云卓T10套件（有配套的地面站软件）。<strong>电池</strong>选择的是8000mAh（6s 22.2v）的大容量供电，这为无人机提供了极其强悍的动力，可以后续观看电调校准感受下。它本质上还是定位为一款载重电力拉线无人机（4kg）,<strong>四旋翼无人机组装</strong>通过设置遥控器上的特定通道无线控制舵机工作，配合连杆的开合实现抛投功能。</li></ul><h2 id="目的"><a href="#目的" class="headerlink" title="*   目的"></a>*   目的</h2><p>  通过此次组装四旋翼无人机初步了解无人机原理构造，积累经验为后续开发打下基础。</p><h2 id="方法"><a href="#方法" class="headerlink" title="*   方法"></a>*   方法</h2><p>   无人机到货后，心情是激动的、操作是无序的导致很多工作不得不返工，如下图飞行之前都先不用装桨叶。对新手来说拿到一堆零件后最忌讳的就是直接上手（天赋异禀的除外），先大概看一遍视频教程大致了解下步骤，然后边看教程边做。</p><p><img src="https://api2.mubu.com/v3/document_image/93c701b3-0f8d-450a-89db-ce52ed6cc0b3-1995134.jpg">     </p><p>   动起手来也不难就是要心细点，主要包括：焊接、接线、拧螺丝、校准、测试。焊接：电池里的电流首先经过稳压模块接入到分电板，接着通过分电板正负极引脚分别分传输到四个电调，经过电调的调整控制四个电机以规定好的旋转方向工作从而为无人机提供动力，需要注意的是电调的线较粗控制好焊接面积，切记注意短路的问题。</p><p><img src="https://api2.mubu.com/v3/document_image/9390e5ca-2385-4253-8e56-99cead8b305f-1995134.jpg">  </p><p>   <strong>接线</strong>：主要是电调与飞控通道的匹配（四个飞控通道对应四个电调）、GPS接线（直接插上）、接收机也给插上。<strong>校准</strong>：机架组装、焊接、接线都准备完毕后就需要对电调、罗盘、指南针、遥控器进行校准。电调校准时（不装桨叶）需要关注四个电机转向是否正确，下图所示为正确转向，出现侧飞或各种飞行不问首先检查电机转向，其次校准罗盘、GPS等。最后通过mission planner地面站软件分别对电调、罗盘、指南针、遥控器进行校准，设置遥控器的一个闲置通道为抛投器开关。</p><p><img src="https://api2.mubu.com/v3/document_image/1ed452b3-032f-45ec-8038-4c7dc235481a-1995134.jpg"></p><p>​<br>   <strong>如果上述工作你都认真检查过了</strong>，就可以进行试飞了。尽量在空旷（卫星质量佳、人少）的环境测试，切换为定点（loiter）模式操作，这种模式依靠卫星定位，辅助无人机稳定飞行。</p><p><img src="https://api2.mubu.com/v3/document_image/c7fba90f-810c-4c00-93c0-1321d3e2bb17-1995134.jpg"></p><h2 id="结果"><a href="#结果" class="headerlink" title="*   结果"></a>*   结果</h2><p>  大概一周的时间我完成了这架无人机的组装，之前飞过大疆的M100，懂一些基本的操作常识。首次飞行还算顺利，飞了大概10几分钟。第二次起飞可能是因为电量不是很充足，飞了一会自动下降，它这个电量是通过观察电池电压来判断的，没啥经验的我没意识到低电量的问题，强行推油门上升高度，随后因为动力不足直接炸机，检查后还好只烧了一个电机（电机内铜丝发黑，并且有烧焦味），后续换了新的电机，它又重获新生了！</p><p><img src="https://api2.mubu.com/v3/document_image/b01e9805-9477-49b5-8f3a-da6415dacb31-1995134.jpg"></p><h2 id="结论"><a href="#结论" class="headerlink" title="*   结论"></a>*   结论</h2><p>  这次的无人机组装接触到了很多新知识，为客服的耐心解答点赞。还是有很多收获的，看着这个大家伙挺有成就感的！最后，感受下他的<a href="https://www.bilibili.com/video/BV1KF411z75a?spm_id_from=333.999.0.0">动力</a>吧！（建议调低音量观看！）</p>]]></content>
    
    
    <categories>
      
      <category>无人机</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pixhawk2.4.8</tag>
      
      <tag>APM</tag>
      
      <tag>PX4</tag>
      
      <tag>电调</tag>
      
      <tag>DIY无人机</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>智能路灯平台灯具控制系统的设计与实现</title>
    <link href="/2021/11/29/%E6%99%BA%E8%83%BD%E8%B7%AF%E7%81%AF%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/"/>
    <url>/2021/11/29/%E6%99%BA%E8%83%BD%E8%B7%AF%E7%81%AF%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="智能路灯平台灯具控制系统的设计与实现"><a href="#智能路灯平台灯具控制系统的设计与实现" class="headerlink" title="智能路灯平台灯具控制系统的设计与实现"></a>智能路灯平台灯具控制系统的设计与实现</h1><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><figure class="highlight asciidoc"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs asciidoc"><span class="hljs-bullet">*   </span>摘要<br><span class="hljs-code">    </span><br><span class="hljs-bullet">*   </span>研究过程与总体设计:<br><span class="hljs-code">    </span><br><span class="hljs-bullet">*   </span>关键技术：NB-IOT模块与STM32 MQTT通信协议<br><span class="hljs-code">    </span><br><span class="hljs-bullet">*   </span>代码实现：<br><span class="hljs-code">    </span><br><span class="hljs-bullet">*   </span>MQTT服务器的连接：打开 MQTT 客户端网络及连接客户端至 MQTT 服务器。<br><span class="hljs-code">    </span><br><span class="hljs-bullet">*   </span>订阅与发布：订阅激活、开\\关路灯相关主题；发布反馈结果及状态信息相关主题。<br><span class="hljs-code">    </span><br><span class="hljs-bullet">*   </span>硬件看门狗：程序出现死循环时，通过及时喂狗让系统进行复位让系统更加可靠稳定。<br><span class="hljs-code">    </span><br><span class="hljs-bullet">*   </span>配置信息存储：FLASH的读写。<br><span class="hljs-code">    </span><br><span class="hljs-bullet">*   </span>STM32通用定时器：定时上发路灯状态<br><span class="hljs-code">    </span><br><span class="hljs-bullet">*   </span>效果展示及系统测试：远程打开/关闭路灯及路灯异常检测<br></code></pre></div></td></tr></table></figure><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><ul><li><p>随着科技社会的不断发展，传统路灯已经不能满足绿色、环保、节能生活的需求。越来越多的照明系统开始通过网络控制平台进行在线管理，实现新时代新理念的智能生活。针对目前节能生活的迫切需求，经过此次项目开发，设计并实现了智能灯具控制系统。</p></li><li><p>系统利用NB-IoT技术覆盖范围广、连接多、成本低、功耗低的优点，解决了传统路灯系统电力浪费过大、维护成本过高的问题，满足了功能性需求及在可靠性方面的非功能性需求，达到了系统设计目标。</p><p> <img src="https://api2.mubu.com/v3/document_image/0a09565e-b505-4595-84bd-1cceb2d104d9-1995134.jpg"></p><h2 id="研究过程与总体设计"><a href="#研究过程与总体设计" class="headerlink" title="研究过程与总体设计:"></a>研究过程与总体设计:</h2><p> <img src="https://api2.mubu.com/v3/document_image/a733aad3-2a1c-45ad-aa31-7dde7ec98980-1995134.jpg"></p><h2 id="关键技术：NB-IOT模块与STM32-MQTT通信协议"><a href="#关键技术：NB-IOT模块与STM32-MQTT通信协议" class="headerlink" title="关键技术：NB-IOT模块与STM32 MQTT通信协议"></a>关键技术：NB-IOT模块与STM32 MQTT通信协议</h2><p> <img src="https://api2.mubu.com/v3/document_image/c9b8d62a-83ce-42d1-bd96-19ce76402fb8-1995134.jpg" alt="nb-iot通信模块：BC20"></p><p> <img src="https://api2.mubu.com/v3/document_image/cf959d6b-a583-4df6-a251-93fa48504d4d-1995134.jpg" alt="MQTT协议示意图"></p><p> <img src="https://api2.mubu.com/v3/document_image/3f3ebd28-1001-4db3-99b4-c97184e3b396-1995134.jpg" alt="Stm32程序设计"></p><h2 id="效果示意："><a href="#效果示意：" class="headerlink" title="效果示意："></a>效果示意：</h2><p> <img src="https://api2.mubu.com/v3/document_image/16421aa2-0a04-4927-b9f5-a02c91183af9-1995134.jpg" alt="路灯列表"> </p></li></ul><p>   <img src="https://api2.mubu.com/v3/document_image/73feb84d-cea4-4bd2-b2a2-d8bf9e22f121-1995134.jpg" alt="路灯异常检测"></p><p>详细参考我在CSDN写的<a href="https://blog.csdn.net/weixin_38633903/article/details/106801020?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522163815465616780366536518%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=163815465616780366536518&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-106801020.pc_search_result_control_group&utm_term=%E6%99%BA%E8%83%BD%E8%B7%AF%E7%81%AF%E5%B9%B3%E5%8F%B0%E7%81%AF%E5%85%B7%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0&spm=1018.2226.3001.4187">博客</a></p>]]></content>
    
    
    <categories>
      
      <category>单片机</category>
      
    </categories>
    
    
    <tags>
      
      <tag>STM32</tag>
      
      <tag>NB-iot</tag>
      
      <tag>智能路灯</tag>
      
      <tag>硬件看门狗</tag>
      
      <tag>MOTT协议</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo本地预览打开失败：4000端口占用</title>
    <link href="/2021/11/17/hexo-4000%E7%AB%AF%E5%8F%A3%E5%8D%A0%E7%94%A8/"/>
    <url>/2021/11/17/hexo-4000%E7%AB%AF%E5%8F%A3%E5%8D%A0%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="hexo本地预览打开失败：4000端口占用"><a href="#hexo本地预览打开失败：4000端口占用" class="headerlink" title="hexo本地预览打开失败：4000端口占用"></a>hexo本地预览打开失败：4000端口占用</h1><h2 id="起因："><a href="#起因：" class="headerlink" title="起因："></a>起因：</h2><p>昨天在发布博客的时候，想着先在本地部署预览一下子。</p><figure class="highlight 1c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs 1c">hexo g <span class="hljs-meta">&amp;&amp; hexo s</span><br></code></pre></div></td></tr></table></figure><p><img src="https://api2.mubu.com/v3/document_image/7f2acaf9-dc3c-4b38-bbcc-2d8a7dba7efa-1995134.jpg"></p><p><img src="https://api2.mubu.com/v3/document_image/009e0b60-53df-4068-a2f4-2cea67d6d617-1995134.jpg"></p><p>好家伙直接打不开，着急下班就直接线上部署，这样改一次部署一次，贼麻烦。</p><h2 id="经过："><a href="#经过：" class="headerlink" title="经过："></a>经过：</h2><p>今天有空了解决一下，老规矩打开浏览器搜索。</p><h3 id="原因：端口占用，查看下占用端口的进程号"><a href="#原因：端口占用，查看下占用端口的进程号" class="headerlink" title="原因：端口占用，查看下占用端口的进程号"></a>原因：端口占用，查看下占用端口的进程号</h3><figure class="highlight 1c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs 1c">netstat -aon<span class="hljs-string">|findstr 4000</span><br></code></pre></div></td></tr></table></figure><p>根据pid查找，对应的应用程序</p><p><img src="https://api2.mubu.com/v3/document_image/0688faee-8ddc-4e9b-ad91-07b841908195-1995134.jpg"></p><p>果然是nxd.exe占用了4000端口</p><p><img src="https://api2.mubu.com/v3/document_image/6361df6c-1550-46e8-9610-c12277689bf7-1995134.jpg"></p><h3 id="方法："><a href="#方法：" class="headerlink" title="方法："></a>方法：</h3><p>①：修改本地部署的端口：改4000为4001<br>   <figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">hexo</span> server -p <span class="hljs-number">4001</span><br></code></pre></div></td></tr></table></figure></p><p><img src="https://api2.mubu.com/v3/document_image/742e624e-38cd-4f4d-852d-170ee2954148-1995134.jpg"></p><p>   修改后打开本地预览，成了。</p><p>②：杀掉占用的程序：<br>   网上说的cmd 命令貌似对这个nomachine不管用，死了又复活重启也不行。垃圾软件直接卸载，查看4000端口占用，没人占用，再部署。成了！<br>   杀死进程的命令：</p>   <figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>根据进程kill掉对应端口<br>taskkill <span class="hljs-regexp">/f /</span>t /pid 进程号<br><span class="hljs-regexp">//</span>关闭对应程序<br>taskkill <span class="hljs-regexp">/f /</span>t /im 程序名称(java.exe)<br></code></pre></div></td></tr></table></figure><h2 id="结果："><a href="#结果：" class="headerlink" title="结果："></a>结果：</h2><h4 id="遇到问题，找到原因，解决问题，多尝试！"><a href="#遇到问题，找到原因，解决问题，多尝试！" class="headerlink" title="遇到问题，找到原因，解决问题，多尝试！"></a>遇到问题，找到原因，解决问题，多尝试！</h4><p><img src="https://api2.mubu.com/v3/document_image/1539e758-d344-4062-b687-6ecfb4ab20bb-1995134.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>搭建个人博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>端口占用</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>YOLOv4-tiny在jetson NANO\TX2\NX下的实时目标检测（从装系统到功能实现）</title>
    <link href="/2021/11/10/YOLOv4-tiny%E5%9C%A8jetson%20nano(TX2)%E4%B8%8B%E7%9A%84%E5%AE%9E%E6%97%B6%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/"/>
    <url>/2021/11/10/YOLOv4-tiny%E5%9C%A8jetson%20nano(TX2)%E4%B8%8B%E7%9A%84%E5%AE%9E%E6%97%B6%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="YOLOv4-tiny在jetson-NANO-TX2-NX下的实时目标检测（从装系统到功能实现）"><a href="#YOLOv4-tiny在jetson-NANO-TX2-NX下的实时目标检测（从装系统到功能实现）" class="headerlink" title="YOLOv4-tiny在jetson NANO\TX2\NX下的实时目标检测（从装系统到功能实现）"></a>YOLOv4-tiny在jetson NANO\TX2\NX下的实时目标检测（从装系统到功能实现）</h1><h2 id="目的"><a href="#目的" class="headerlink" title="*   目的"></a>*   目的</h2><ul><li>  在nvidia jetson系列的嵌入式平台上,运用YOLOv4-tiny算法以及TensorRT加速框架,实现实时的目标检测.    </li><li>环境<ul><li>Jetpack 4.4</li><li>CUDA 10.2</li><li>  ONNX 1.4.1     </li></ul></li></ul><h2 id="实践"><a href="#实践" class="headerlink" title="*   实践"></a>*   实践</h2><h3 id="烧系统"><a href="#烧系统" class="headerlink" title="*   烧系统"></a>*   烧系统</h3><ul><li>准备系统镜像.img（jetpack4.4:实测nx和nano不通用，用nano的img烧进去nx不识别）<ul><li>官网下载<a href="https://developer.nvidia.cn/zh-cn/embedded/jetpack">jetpack4.4</a>. tips:英伟达官网下载有时会很慢：改.com为.cn</li></ul></li></ul><p><img src="https://api2.mubu.com/v3/document_image/b169b5cf-7122-4618-950e-6f418a692dfe-1995134.jpg"><br><img src="https://api2.mubu.com/v3/document_image/f280cfca-6800-4659-b2dc-aa34ad06bd55-1995134.jpg"></p><ul><li>准备<a href="https://pan.baidu.com/s/1tPrTDxWEykima70BHBe9nQ">三大件</a>（提取码：8848）：1、格式化内存卡：SD Card Formatter 2.烧写工具：balenaEtcher 3.备用烧写工具Win32DiskImager。烧写失败时，这两个工具换着用。<ul><li>格式化卡</li></ul></li></ul><p><img src="https://api2.mubu.com/v3/document_image/ea551e35-654e-4fdb-8ddb-f18064523540-1995134.jpg"><br>    *   烧写系统</p><p><img src="https://api2.mubu.com/v3/document_image/72e61130-8ed8-4c1c-b32d-8d84fb9d000f-1995134.jpg"><br><img src="https://api2.mubu.com/v3/document_image/af6a353f-826d-4628-af88-efe6e5d7b210-1995134.jpg"><br>    *   把SD卡插到板子上，开机后初始化下系统就可以“愉快的”配置环境了</p><h3 id="配环境"><a href="#配环境" class="headerlink" title="*   配环境"></a>*   配环境</h3><h4 id="CUDA-10-2"><a href="#CUDA-10-2" class="headerlink" title="*   CUDA 10.2"></a>*   CUDA 10.2</h4><figure class="highlight jboss-cli"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jboss-cli">打开配置文件<br><br>sudo gedit ~<span class="hljs-string">/.bashrc</span><br><br></code></pre></div></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">添加环境变量<br><br>export PATH=<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/cuda-10.2/</span>bin:<span class="hljs-variable">$PATH</span><br>export LD_LIBRARY_PATH=<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/cuda-10.2/</span>lib64:<span class="hljs-variable">$LD_LIBRARY_PATH</span><br><br></code></pre></div></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">刷新环境变量<br><br><span class="hljs-built_in">source</span> ~/.bashrc<br><br></code></pre></div></td></tr></table></figure><p>   <img src="https://api2.mubu.com/v3/document_image/a485827f-e4e1-4cef-80ec-b6acee344696-1995134.jpg"><br><a href="https://blog.csdn.net/jialibang/article/details/108248031?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522163688667916780261990665%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=163688667916780261990665&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-108248031.first_rank_v2_pc_rank_v29&utm_term=nvcc+-v+%E6%8F%90%E7%A4%BA%E6%9C%AA%E6%89%BE%E5%88%B0%E5%91%BD%E4%BB%A4&spm=1018.2226.3001.4187">查看CUDA版本</a></p><h4 id="换源"><a href="#换源" class="headerlink" title="*   换源"></a>*   换源</h4><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">换源<br><br>sudo vim <span class="hljs-regexp">/etc/</span>apt/sources.list<br></code></pre></div></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk"><br>替换软件源（清华源）<br><br>deb http:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/ubuntu-ports/</span> xenial-updates main restricted universe multiverse<br>deb-src http:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/ubuntu-ports/</span> xenial-updates main restricted universe multiverse<br>deb http:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/ubuntu-ports/</span> xenial-security main restricted universe multiverse<br>deb-src http:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/ubuntu-ports/</span> xenial-security main restricted universe multiverse<br>deb http:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/ubuntu-ports/</span> xenial-backports main restricted universe multiverse<br>deb-src http:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/ubuntu-ports/</span> xenial-backports main restricted universe multiverse<br>deb http:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/ubuntu-ports/</span> xenial main universe restricted<br>deb-src http:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/ubuntu-ports/</span> xenial main universe restricted<br><br></code></pre></div></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs routeros"><br>更新软件库<br>sudo apt-<span class="hljs-builtin-name">get</span> update<br><br>更新依赖<br>sudo apt-<span class="hljs-builtin-name">get</span><span class="hljs-built_in"> upgrade</span><br><span class="hljs-built_in"></span><br></code></pre></div></td></tr></table></figure><ul><li>  <img src="https://api2.mubu.com/v3/document_image/1002a015-926c-416e-8b81-038ef0e70978-1995134.jpg"></li></ul><p><a href="https://blog.csdn.net/u013171226/article/details/107680339?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522163688734016780274120533%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=163688734016780274120533&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-107680339.first_rank_v2_pc_rank_v29&utm_term=jetson+xavier+nx%E6%8D%A2%E6%BA%90&spm=1018.2226.3001.4187">换源</a><br><a href="https://blog.csdn.net/DBlueink/article/details/112801634?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522163688718516780357219674%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=163688718516780357219674&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~baidu_landing_v2~default-1-112801634.first_rank_v2_pc_rank_v29&utm_term=Jetson+NX+%E5%AE%89%E8%A3%85onnx&spm=1018.2226.3001.4187">cantt find yilai</a> ​</p><h4 id="pip安装及更新"><a href="#pip安装及更新" class="headerlink" title="*   pip安装及更新"></a>*   pip安装及更新</h4><p>   <img src="https://api2.mubu.com/v3/document_image/d2ac2980-2370-4138-a304-1fecaa77bc9d-1995134.jpg"><br>   <img src="https://api2.mubu.com/v3/document_image/dd701990-ac78-4e9a-bae3-f31b238ae189-1995134.jpg"></p><p><a href="https://blog.csdn.net/qq_39900031/article/details/115500295">pip安装及更新</a></p><figure class="highlight dsconfig"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dsconfig"><span class="hljs-string">sudo</span> <span class="hljs-string">apt-get</span> <span class="hljs-string">install</span> <span class="hljs-string">python-pip</span> <span class="hljs-comment">#python2</span><br><span class="hljs-string">sudo</span> <span class="hljs-string">apt-get</span> <span class="hljs-string">install</span> <span class="hljs-string">python3-pip</span> <span class="hljs-comment">#python3</span><br><span class="hljs-string">sudo</span> <span class="hljs-string">apt-get</span> <span class="hljs-string">remove</span> <span class="hljs-string">python-pip</span><br><span class="hljs-string">wget</span> <span class="hljs-string">https</span>://<span class="hljs-string">bootstrap</span>.<span class="hljs-string">pypa</span>.<span class="hljs-string">io</span>/<span class="hljs-built_in">get-pip.py</span><br><span class="hljs-string">python</span> <span class="hljs-built_in">get-pip.py</span><br><span class="hljs-string">hash</span> -<span class="hljs-string">r</span><br></code></pre></div></td></tr></table></figure><ul><li><p>pip已经安装，但是/usr/bin/pip: No such file or directory</p><p>  <a href="https://blog.csdn.net/qq_15505637/article/details/81094162?ops_request_misc=&request_id=&biz_id=102&utm_term=bash:%20/usr/bin/pip:%20No%20such%20fi&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-1-81094162.first_rank_v2_pc_rank_v29&spm=1018.2226.3001.4187">pip: No such file or directory</a></p><ul><li>  setpool报错</li></ul><p>  <img src="https://api2.mubu.com/v3/document_image/6915acd8-1113-4c5f-b35c-8a5ce8f7051e-1995134.jpg"></p><p>  <a href="https://blog.csdn.net/LowellFrost/article/details/116643127?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522163689283916780269814783%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=163689283916780269814783&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v2~times_rank-1-116643127.pc_v2_rank_blog_default&utm_term=No+module+named+setuptools&spm=1018.2226.3001.4450">setpool</a></p><ul><li><p>python 版本切换</p><p>  <a href="https://blog.csdn.net/m0_49448331/article/details/107655531?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522163689075216780264084914%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=163689075216780264084914&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v2~rank_v29-2-107655531.pc_v2_rank_blog_default&utm_term=ubuntu%E5%B0%86python2.7++3.6&spm=1018.2226.3001.4450">3.6/2.7</a></p><ul><li>  1 删除原有链接</li></ul>  <figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">sudo rm <span class="hljs-regexp">/usr/</span>bin/python<br></code></pre></div></td></tr></table></figure><ul><li>  2 建立软连接</li></ul>  <figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">sudo</span> ln -s /usr/bin/python<span class="hljs-number">3</span>.<span class="hljs-number">6</span> /usr/bin/python //<span class="hljs-number">3</span>.<span class="hljs-number">6</span> <span class="hljs-number">3</span>.<span class="hljs-number">5</span> <span class="hljs-number">2</span>.<span class="hljs-number">7</span> 可以根据需求更改<br></code></pre></div></td></tr></table></figure></li><li><p>  curl:</p></li></ul><p>  <a href="https://blog.csdn.net/wanttifa/article/details/88965082?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522163689361416780271516518%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=163689361416780271516518&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-1-88965082.first_rank_v2_pc_rank_v29&utm_term=%E4%B8%8B%E5%88%97%E8%BD%AF%E4%BB%B6%E5%8C%85%E6%9C%89%E6%9C%AA%E6%BB%A1%E8%B6%B3%E7%9A%84%E4%BE%9D%E8%B5%96%E5%85%B3%E7%B3%BB%EF%BC%9A++curl+:+%E4%BE%9D%E8%B5%96:+libcurl3-gnutls+(=+7.47.0-1ubuntu2.19)+%E4%BD%86%E6%98%AF+7.58.0-2ubuntu3.13+%E6%AD%A3%E8%A6%81%E8%A2%AB%E5%AE%89%E8%A3%85&spm=1018.2226.3001.4187">curl</a></p><ul><li>安装curl时报错 curl : Depends: libcurl3-gnutls (= 7.47.0-1ubuntu2.12) but 7.58.0-2ubuntu3.6 is to be installed</li><li>提示安装curl依赖的libcurl版本不一致，这个时候用purge命令重新安装就好了</li></ul></li><li><p>部署YOLO+TRT</p><ul><li>  下载源码：</li></ul></li></ul><div class="hljs code-wrapper"><pre><code><figure class="highlight awk"><table><tr><td class="gutter hljs"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">git clone [https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/jkjung-avt/</span>tensorrt_demos.git](https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/jkjung-avt/</span>tensorrt_demos.git)<br></code></pre></div></td></tr></table></figure>    *   安装onnx模型：    <figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">sudo</span> apt-get install protobuf-compiler libprotoc-dev<br><span class="hljs-attribute">sudo</span> pip<span class="hljs-number">3</span> install onnx==<span class="hljs-number">1</span>.<span class="hljs-number">4</span>.<span class="hljs-number">1</span><br></code></pre></div></td></tr></table></figure></code></pre><p>​<br>​    *   编译下plugins文件夹里的相关文件</p><div class="hljs code-wrapper"><pre><code><figure class="highlight ebnf"><table><tr><td class="gutter hljs"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ebnf"><span class="hljs-attribute">make</span><br></code></pre></div></td></tr></table></figure>*   转换yolo文件    *   1.将.weight模型文件转换成 .onnx 格式   <figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">python3</span> yolo_to_onnx.py -m yolov<span class="hljs-number">4</span>-tiny-<span class="hljs-number">416</span><br></code></pre></div></td></tr></table></figure>    *   2.再将 .onnx文件转换成 .trt 格式<figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">python3</span> onnx_to_tensorrt.py -m yolov<span class="hljs-number">4</span>-tiny-<span class="hljs-number">416</span><br></code></pre></div></td></tr></table></figure>    *   3.启用摄像头实时检测    <figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">python3</span> trt_yolo.py --usb <span class="hljs-number">0</span> -m yolov<span class="hljs-number">4</span>-tiny-<span class="hljs-number">416</span>     <br></code></pre></div></td></tr></table></figure></code></pre><p>​    </p><ul><li>结果<ul><li>实时检测帧数在40左右，下一篇接着总结NMS、精准度等调参问题</li></ul></li></ul><p><img src="https://api2.mubu.com/v3/document_image/03b7a062-0fe4-4c5f-8d76-3372a8420392-1995134.jpg"><br><img src="https://api2.mubu.com/v3/document_image/0c1d559c-50be-48d8-9901-44a63e1d938b-1995134.jpg"></p><ul><li>结论<ul><li>  网上的教程鱼龙混杂，推荐一篇<a href="https://blog.csdn.net/ZeyiRTangent/article/details/114983804">不错的</a>博文。起初在nano上部署成功，后来尝试按照自己总结的这套方法在NX上复现。没有啥大问题的话，不到一个小时环境部署就可以完成，祝你好运！</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>深度学习</category>
      
      <category>YOLO</category>
      
      <category>Nvidia</category>
      
    </categories>
    
    
    <tags>
      
      <tag>YOLO</tag>
      
      <tag>实时目标识别检测</tag>
      
      <tag>jetson nano</tag>
      
      <tag>onnx</tag>
      
      <tag>tensorRT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>添加gitalk博客评价插件</title>
    <link href="/2021/11/05/%E6%B7%BB%E5%8A%A0gitalk%E6%8F%92%E4%BB%B6/"/>
    <url>/2021/11/05/%E6%B7%BB%E5%8A%A0gitalk%E6%8F%92%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="添加gitalk博客评价插件"><a href="#添加gitalk博客评价插件" class="headerlink" title="添加gitalk博客评价插件"></a>添加gitalk博客评价插件</h1><h2 id="前提："><a href="#前提：" class="headerlink" title="前提："></a>前提：</h2><h3 id="1-使用hexo-github搭建的个人博客"><a href="#1-使用hexo-github搭建的个人博客" class="headerlink" title="1.使用hexo+github搭建的个人博客"></a>1.使用hexo+github搭建的个人博客</h3><h3 id="2-没有绑定域名"><a href="#2-没有绑定域名" class="headerlink" title="2.没有绑定域名"></a>2.没有绑定域名</h3><h2 id="直接上方法："><a href="#直接上方法：" class="headerlink" title="直接上方法："></a>直接上方法：</h2><h3 id="1-创建存储评论的GitHub仓库"><a href="#1-创建存储评论的GitHub仓库" class="headerlink" title="1.创建存储评论的GitHub仓库"></a>1.创建存储评论的GitHub仓库</h3><p><img src="https://api2.mubu.com/v3/document_image/b6636d07-ef40-4a1e-ad52-0655c494eafb-1995134.jpg"></p><h3 id="2-初始化这个仓库"><a href="#2-初始化这个仓库" class="headerlink" title="2.初始化这个仓库"></a>2.初始化这个仓库</h3><h4 id="在setting里勾选issues选项"><a href="#在setting里勾选issues选项" class="headerlink" title="在setting里勾选issues选项"></a>在setting里勾选issues选项</h4><p><img src="https://api2.mubu.com/v3/document_image/a51fbf64-77fb-47ab-a762-9fc55a0adec8-1995134.jpg"></p><h4 id="创建一条issue"><a href="#创建一条issue" class="headerlink" title="创建一条issue"></a>创建一条issue</h4><p><img src="https://api2.mubu.com/v3/document_image/d5d11480-67dd-463a-aebe-4af25909854d-1995134.jpg"></p><h3 id="3-github注册应用"><a href="#3-github注册应用" class="headerlink" title="3.github注册应用"></a>3.<a href="https://github.com/settings/developers">github注册应用</a></h3><h4 id="注册applicantion"><a href="#注册applicantion" class="headerlink" title="注册applicantion"></a>注册applicantion</h4><p><img src="https://api2.mubu.com/v3/document_image/11335b94-2202-48f6-952c-6e7726b1cfeb-1995134.jpg"></p><h4 id="注册后生成的id、密码填到配置文件里"><a href="#注册后生成的id、密码填到配置文件里" class="headerlink" title="注册后生成的id、密码填到配置文件里"></a>注册后生成的id、密码填到配置文件里</h4><p><img src="https://api2.mubu.com/v3/document_image/1dbe45cf-54a8-4b08-a614-25e6074ea85e-1995134.jpg"></p><h3 id="4-修改主题的-config-yml文件，部署并预览"><a href="#4-修改主题的-config-yml文件，部署并预览" class="headerlink" title="4.修改主题的_config.yml文件，部署并预览"></a>4.修改主题的_config.yml文件，部署并预览</h3><h4 id="修改主题的配置文件"><a href="#修改主题的配置文件" class="headerlink" title="修改主题的配置文件"></a>修改主题的配置文件</h4><p><img src="https://api2.mubu.com/v3/document_image/1051b4bd-11ed-447b-b58b-fbbcd3ec8246-1995134.jpg"></p><h4 id="部署一下"><a href="#部署一下" class="headerlink" title="部署一下"></a>部署一下</h4><p><img src="https://api2.mubu.com/v3/document_image/ba454b47-00e4-44e2-ae83-7aa7447ee113-1995134.jpg"></p><h4 id="随便打开一个博客看下"><a href="#随便打开一个博客看下" class="headerlink" title="随便打开一个博客看下"></a>随便打开一个博客看下</h4><p><img src="https://api2.mubu.com/v3/document_image/7d4606d2-294c-42a8-aa56-864a349af76c-1995134.jpg"></p><h4 id="点一下初始化issue-成了！"><a href="#点一下初始化issue-成了！" class="headerlink" title="点一下初始化issue,成了！"></a>点一下初始化issue,成了！</h4><p><img src="https://api2.mubu.com/v3/document_image/917094cf-6199-4ad8-922b-210496f81b7c-1995134.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>搭建个人博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>Fluid</tag>
      
      <tag>gitalk</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>极本穷源：ROS篇</title>
    <link href="/2021/11/03/ROS%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/"/>
    <url>/2021/11/03/ROS%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="ROS入门"><a href="#ROS入门" class="headerlink" title="ROS入门"></a>ROS入门</h1><h2 id="ROS（Robot-Operating-System）机器人操作系统"><a href="#ROS（Robot-Operating-System）机器人操作系统" class="headerlink" title="ROS（Robot Operating System）机器人操作系统"></a>ROS（Robot Operating System）机器人操作系统</h2><p>本文素材来自古月ROS入门21讲，正在总结归纳，择日上传！</p><h3 id="概念"><a href="#概念" class="headerlink" title="*   概念"></a>*   概念</h3><p><img src="https://api2.mubu.com/v3/document_image/c87a74b2-8988-4d4b-98ca-ed5cdd7fc166-1995134.jpg"></p><h3 id="发展"><a href="#发展" class="headerlink" title="*   发展"></a>*   发展</h3><p><img src="https://api2.mubu.com/v3/document_image/25835449-1fbe-49b2-aabb-ff6acc6ba3f3-1995134.jpg"></p><h3 id="应用"><a href="#应用" class="headerlink" title="*   应用"></a>*   应用</h3><p><img src="https://api2.mubu.com/v3/document_image/e24956d2-c6eb-4b91-8790-2ccdc8b5b4ee-1995134.jpg"></p><h3 id="通信机制"><a href="#通信机制" class="headerlink" title="*   通信机制"></a>*   通信机制</h3><p><img src="https://api2.mubu.com/v3/document_image/d53494c7-f6f7-45db-a197-970297df1a0c-1995134.jpg"></p><h3 id="开发工具"><a href="#开发工具" class="headerlink" title="*   开发工具"></a>*   开发工具</h3><p><img src="https://api2.mubu.com/v3/document_image/6635e90b-5fba-4ab4-8293-8271b27ed50e-1995134.jpg"></p><h3 id="功能开发"><a href="#功能开发" class="headerlink" title="*   功能开发"></a>*   功能开发</h3><p><img src="https://api2.mubu.com/v3/document_image/d197d5d4-2936-4189-a7b5-336fd9ffc0de-1995134.jpg"></p><h3 id="ROS生态系统"><a href="#ROS生态系统" class="headerlink" title="*   ROS生态系统"></a>*   ROS生态系统</h3><p><img src="https://api2.mubu.com/v3/document_image/551bc7c6-39ac-4f75-a418-2ab45d03b15d-1995134.jpg"></p><h2 id="ROS节点实现：SLAM（同步定位与地图构建）（C-）、A-Dijkstra（最短路径规划）、YOLO（目标识别检测）（python）"><a href="#ROS节点实现：SLAM（同步定位与地图构建）（C-）、A-Dijkstra（最短路径规划）、YOLO（目标识别检测）（python）" class="headerlink" title="*   ROS节点实现：SLAM（同步定位与地图构建）（C++）、A* Dijkstra（最短路径规划）、YOLO（目标识别检测）（python）"></a>*   ROS节点实现：SLAM（同步定位与地图构建）（C++）、A* Dijkstra（最短路径规划）、YOLO（目标识别检测）（python）</h2><p><img src="https://api2.mubu.com/v3/document_image/0b6f1922-049d-4c96-a655-168ea5e181e4-1995134.jpg"></p><p>单片机 Arduino MCU 主频 Mb，PC、 树莓派、jetson系列 主频 Gb</p><h2 id="一个典型的ROS机器人"><a href="#一个典型的ROS机器人" class="headerlink" title="*   一个典型的ROS机器人"></a>*   一个典型的ROS机器人</h2><p>Turtlebot：激光雷达（360°深度信息，SLAM导航）、树莓派（应用层：ROS功能包功能实现SLAM等）、OpenCR（底层运动处理，电机PID闭环控制，传感器采集..）</p><p><img src="https://api2.mubu.com/v3/document_image/7322f84d-dace-4ea3-bc99-84ecf248c6d6-1995134.jpg"><br><img src="https://api2.mubu.com/v3/document_image/3ddad4db-8f71-4cfb-a457-ea28922cd9c8-1995134.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>极本穷源</category>
      
    </categories>
    
    
    <tags>
      
      <tag>古月居</tag>
      
      <tag>机器人</tag>
      
      <tag>ROS基础</tag>
      
      <tag>ROS节点</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>简述通信协议栈和计算机网络的OSI模型</title>
    <link href="/2021/10/28/%E7%AE%80%E8%BF%B0%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE%E6%A0%88%E5%92%8C%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9A%84OSI%E6%A8%A1%E5%9E%8B/"/>
    <url>/2021/10/28/%E7%AE%80%E8%BF%B0%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE%E6%A0%88%E5%92%8C%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9A%84OSI%E6%A8%A1%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="简述通信协议栈和计算机网络的OSI模型"><a href="#简述通信协议栈和计算机网络的OSI模型" class="headerlink" title="简述通信协议栈和计算机网络的OSI模型"></a>简述通信协议栈和计算机网络的OSI模型</h1><ul><li>前段时间买了套无人机的通信控制模块，某宝上写的是开源，结果到手来了个只开源应用层（配套的应用软件）。我们需要的是网络层开源支持（与无人机直接通信的模块固件源码），只有拿到这部分代码才能把无人机载荷采集到的有用信息有效发挥，比如直接根据传感器信息控制无人机的自主飞行亦或是将载荷信息通过该通信链路传输到地面站，甚至可以是无人机结点间的信息交互，总之这份“价值超过500W源码”是不肯开源的。</li><li>被人怼就要吸取教训，今天就来学习总结下什么是通信协议栈，什么是计算机网络的OSI模型</li><li><h2 id="通信协议栈："><a href="#通信协议栈：" class="headerlink" title="通信协议栈："></a>通信协议栈：</h2><ul><li>简单来说就是一种网络通信协议的堆叠，网络协议就是通信双方约定好的通信规则。</li><li>协议栈的应运而生：数据在网络中的传输（寻址、抗干扰、加密、数据分割、压缩等）是极其复杂的。使用单一协议无法保障数据高速准确的传输，单一协议会导致协议冗余、复杂、难以优化，因此通过各层协议各司其职，互相配合使得通信效率更加高效。</li><li>通俗的打个比方：老板要下发一个工作通知到张三，（假设该协议栈只有两层：聊天层和纠错层）聊天层采用“通知内容转换协议” 把 “明天不上班” 这条消息转换为二进制的计算机信息：“01”，“01” 这条消息被传输到纠错层后采用 “信息无误就是1协议” 为 “01” 增加标志 “1或0”表示这条信息是否因受到网络传输干扰产生误差。那么张三有效收到“明天不上班”这条通知的二进制计算机信息就是“101”，这就是一个简单协议栈的基本原理。</li><li>比较常见的 TCP/IP 协议栈：<ul><li>TCP/IP 协议栈有四层结构：应用层、传输层、网络层、链路层。<ul><li>  <img src="https://api2.mubu.com/v3/document_image/c052fdaa-67cd-42dd-8510-ef4723604776-1995134.jpg"></li><li>  <img src="https://api2.mubu.com/v3/document_image/b8db84aa-90c9-4865-af9b-d820d1e7df01-1995134.jpg"></li></ul>  <a href="https://www.cnblogs.com/onepixel/p/7092302.html#:~:text=TCP%2FIP%20%E5%8D%8F%E8%AE%AE%E6%A0%88%E6%98%AF%E4%B8%80%E7%B3%BB%E5%88%97%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E7%9A%84%E6%80%BB%E5%92%8C%EF%BC%8C%E6%98%AF%E6%9E%84%E6%88%90%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E7%9A%84%E6%A0%B8%E5%BF%83%E9%AA%A8%E6%9E%B6%EF%BC%8C%E5%AE%83%E5%AE%9A%E4%B9%89%E4%BA%86%E7%94%B5%E5%AD%90%E8%AE%BE%E5%A4%87%E5%A6%82%E4%BD%95%E8%BF%9E%E5%85%A5%E5%9B%A0%E7%89%B9%E7%BD%91%EF%BC%8C%E4%BB%A5%E5%8F%8A%E6%95%B0%E6%8D%AE%E5%A6%82%E4%BD%95%E5%9C%A8%E5%AE%83%E4%BB%AC%E4%B9%8B%E9%97%B4%E8%BF%9B%E8%A1%8C%E4%BC%A0%E8%BE%93%E3%80%82%20TCP%2FIP,%E5%8D%8F%E8%AE%AE%E9%87%87%E7%94%A84%E5%B1%82%E7%BB%93%E6%9E%84%EF%BC%8C%E5%88%86%E5%88%AB%E6%98%AF%20%E5%BA%94%E7%94%A8%E5%B1%82%E3%80%81%E4%BC%A0%E8%BE%93%E5%B1%82%E3%80%81%E7%BD%91%E7%BB%9C%E5%B1%82%E5%92%8C%E9%93%BE%E8%B7%AF%E5%B1%82%20%EF%BC%8C%E6%AF%8F%E4%B8%80%E5%B1%82%E9%83%BD%E5%91%BC%E5%8F%AB%E5%AE%83%E7%9A%84%E4%B8%8B%E4%B8%80%E5%B1%82%E6%89%80%E6%8F%90%E4%BE%9B%E7%9A%84%E5%8D%8F%E8%AE%AE%E6%9D%A5%E5%AE%8C%E6%88%90%E8%87%AA%E5%B7%B1%E7%9A%84%E9%9C%80%E6%B1%82%E3%80%82">深入浅出 TCP/IP 协议栈 - 一像素 - 博客园 (cnblogs.com)</a></li><li><strong>链路层：</strong>将特定意义的数据（“明天上班”）加帧头、加帧尾构成一个数据包（数据帧），以广播的形式通过物理介质发送给接收方。以太网协议规定一组电信号就是一个数据包，一个数据包叫做一帧。帧头包含了目标MAC地址、源MAC地址和类型（大小为46-1500字节），以太网规协议又规定通信双方的网络设备必须安装有独一无二标识的网络适配器（这个标识就是网卡地址、数据包的发送地址和接收地址、也是帧头的MAC地址），帧尾提供校验数据是否损坏的校验序列；  协议数据单元在应用层、表示层和会话层被称做数据(Data)，在传输层被称做分段(Segment)，在网络层被称做包(Packet)，在数据链路层被称做帧(Frame)，在物理层被称做比特(Bit)。</li><li><strong>网络层：</strong>定义IP地址，确认主机所在的网络位置，并通过IP进行MAC寻址，对外网数据包进行路由转发；</li><li><strong>传输层：</strong>定义端口，确认主机上应用程序的身份，并将数据包交给对应的应用程序；</li><li><strong>应用层：</strong>定义数据格式，并按照对应的格式解读数据。</li></ul></li></ul></li><li><h2 id="计算机网络的OSI模型"><a href="#计算机网络的OSI模型" class="headerlink" title="计算机网络的OSI模型"></a>计算机网络的OSI模型</h2><ul><li>怎么来的OSI模型：说是有一群叫做国际标准化组织的人（ISO），试图为全世界互联的各种计算机制定一套网络标准框架。框架和模型：框架是处理流程，模型是描述问题的工具。OSI（开放式系统互联通信参考模型）就是这个框架下的一种模型。  <a href="https://zhuanlan.zhihu.com/p/144358305">计算机网络 OSI网络模型 - 知乎 (zhihu.com)</a></li><li>简述七层OSI模型：<strong>物理层</strong>—&gt;二进制比特流与光电信号的互相转换；<strong>数据链路层</strong>—&gt;互连的网络设备之间的帧识别与帧传输；<strong>网络层</strong>—&gt;同一子网的寻址，不同子网的路由转发；<strong>传输层</strong>—&gt;建立端对端的通信，确保通信的稳定；<strong>会话层</strong>—&gt;建立和断开通信连接，同步会话等；<strong>表示层</strong>—&gt;数据的转换（格式，加密和压缩），数据传输的承上启下；<strong>应用层</strong>—&gt;为用户使用的应用程序提供网络服务，建立数据传输连接。<ul><li>  <img src="https://api2.mubu.com/v3/document_image/d401e5a9-efd3-4e6a-a40b-d16c1ebb2d23-1995134.jpg"></li><li>  <img src="https://api2.mubu.com/v3/document_image/5f3592b0-1fc4-47df-97b7-10697525a070-1995134.jpg"></li></ul>  <a href="https://blog.csdn.net/mxxrgxg/article/details/89667016">(3条消息) 网络通讯基础（一）OSI七层模型和TCP/IP四层（五层）模型_mxxrgxg的博客-CSDN博客</a></li></ul></li><li><h2 id="七层OSI-与-四层TCP-IP-模型的对比"><a href="#七层OSI-与-四层TCP-IP-模型的对比" class="headerlink" title="七层OSI 与 四层TCP/IP 模型的对比"></a>七层OSI 与 四层TCP/IP 模型的对比</h2><ul><li>  <img src="https://api2.mubu.com/v3/document_image/71302899-dc99-4fea-93d0-738ba5bdee20-1995134.jpg"></li><li>  <img src="https://api2.mubu.com/v3/document_image/ddc5d814-ecec-4ae9-bf93-e4b665a44be9-1995134.jpg"></li></ul>  <a href="http://www.cppblog.com/andxie99/archive/2006/10/11/13559.html">TCP/IP的四层模型与OSI七层模型的有什么不同？</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>计算机网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>协议栈</tag>
      
      <tag>TCP/IP协议栈</tag>
      
      <tag>OSI模型</tag>
      
      <tag>TCP/IP模型</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>YOLOv3在ubuntu20.04下训练自己的数据集(从“零”开始)</title>
    <link href="/2021/10/24/YOLOv3%E5%9C%A8ubuntu20.04%E4%B8%8B%E8%AE%AD%E7%BB%83%E8%87%AA%E5%B7%B1%E7%9A%84%E6%95%B0%E6%8D%AE%E9%9B%86/"/>
    <url>/2021/10/24/YOLOv3%E5%9C%A8ubuntu20.04%E4%B8%8B%E8%AE%AD%E7%BB%83%E8%87%AA%E5%B7%B1%E7%9A%84%E6%95%B0%E6%8D%AE%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<h1 id="YOLOv3在ubuntu20-04下训练自己的数据集"><a href="#YOLOv3在ubuntu20-04下训练自己的数据集" class="headerlink" title="YOLOv3在ubuntu20.04下训练自己的数据集"></a>YOLOv3在ubuntu20.04下训练自己的数据集</h1><ul><li><h2 id="背景基础"><a href="#背景基础" class="headerlink" title="背景基础"></a>背景基础</h2><ul><li>实现了在win10及树莓派4B下yolov3的配置及使用</li></ul></li><li><h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><ul><li>使用Ubuntu20.04下的yolov3 v4 对自己的数据集进行训练</li><li>将训练好的权重文件移植到机载树莓派上实现嵌入式系统实时的目标检测</li><li>利用机载树莓派实时的目标检测信息，将该点位置信息发送至感知无人机进行协作，同时将检测结果发送至地面站进行反馈</li></ul></li><li><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2>  <a href="https://www.cnblogs.com/answerThe/p/11481564.html">darknet-yolov3训练自己的数据集（超详细） - AnswerThe - 博客园 (cnblogs.com)</a><ul><li><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><ul><li>Ubuntu20.04的安装（这里选择双系统安装）  <a href="https://blog.csdn.net/qq_31192383/article/details/78876905">(1条消息) win10+ubuntu双系统配置_CUG_UESTC的博客-CSDN博客</a><ul><li>下载镜像：<a href="https://mirrors.tuna.tsinghua.edu.cn/#">清华大学开源软件镜像站 | Tsinghua Open Source Mirror</a><ul><li>  <img src="https://api2.mubu.com/v3/document_image/80719875-f198-4590-b59f-353f63726145-1995134.jpg"></li></ul></li><li>制作启动盘  <a href="https://blog.csdn.net/YaoyuT/article/details/78003061?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522163115577116780269851676%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=163115577116780269851676&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v2~hot_rank-3-78003061.pc_v2_rank_blog_default&utm_term=ultraiso%E5%88%B6%E4%BD%9Cu%E7%9B%98%E5%90%AF%E5%8A%A8&spm=1018.2226.3001.4450">(1条消息) 用UltraISO制作Ubuntu16.04 U盘启动盘_YaoyuT的博客-CSDN博客</a><ul><li><a href="https://pan.baidu.com/s/1vLn589PheqaIgxiaiR9j-g">ubuntu20.04镜像百度网盘链接</a>提取码：dslz</li></ul></li><li>磁盘分配100G（102400MB）空间给ubuntu</li><li>遇到的坑<ul><li>刚买的新机器装不上旧版本的（18.04和16.04）Ubuntu（电脑配置11代8核i7-1180H 16G 512GSSD RTX3050），旧的台式机试过没问题</li><li>128G的大U盘在制作启动盘时需要将U盘格式为FAT32，写入镜像后不能正常安装，换个小容量U盘解决</li><li>设置电脑BIOS,很多新机器·默认uefi启动模式，在boot里并没有这个模式切换选项，但是有一个关闭UEFI的选项，关闭后就可切换到Legacy启动，一般来说开机按F12进入到图三的界面时有UEFI：的U盘时就是正确的引导模式<ul><li>  <img src="https://api2.mubu.com/v3/document_image/bcf0b29f-6600-49f0-8c8d-13237eed7a93-1995134.jpg"></li><li>  <img src="https://api2.mubu.com/v3/document_image/ef0f9d8d-4541-4bff-b9f3-25c464e0cb24-1995134.jpg"></li><li>  <img src="https://api2.mubu.com/v3/document_image/9bd9021e-77a9-4c82-8670-62318ddb9328-1995134.jpg"></li></ul></li></ul></li></ul></li></ul></li><li><h3 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h3><ul><li>cuda11.4+cudnn11.4  <a href="https://blog.csdn.net/weixin_43878078/article/details/88769931">(1条消息) ubuntu16.04+cuda8.0+cudnn5.1详细安装过程_weixin_43878078的博客-CSDN博客</a>  <a href="https://blog.csdn.net/hesongzefairy/article/details/105816736">(1条消息) Ubuntu18.04下复现YOLOv4（YOLOv3亦可）_hesongzefairy的博客-CSDN博客</a>​<ul><li>  下载cuda,终端输入：</li></ul>  <figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">wget</span> https://developer.download.nvidia.com/compute/cuda/<span class="hljs-number">11</span>.<span class="hljs-number">4</span>.<span class="hljs-number">1</span>/local_installers/cuda_<span class="hljs-number">11</span>.<span class="hljs-number">4</span>.<span class="hljs-number">1</span>_<span class="hljs-number">470</span>.<span class="hljs-number">57</span>.<span class="hljs-number">02</span>_linux.run <br></code></pre></div></td></tr></table></figure><ul><li>安装：  <figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">sudo</span> sh cuda\_<span class="hljs-number">11</span>.<span class="hljs-number">4</span>.<span class="hljs-number">1</span>\_<span class="hljs-number">470</span>.<span class="hljs-number">57</span>.<span class="hljs-number">02</span>_linux.run<br></code></pre></div></td></tr></table></figure></li><li>设置环境变量：  <figure class="highlight jboss-cli"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jboss-cli">sudo gedit ~<span class="hljs-string">/.bashrc</span> <br></code></pre></div></td></tr></table></figure><ul><li>打开配置文件并在末尾加上：<div class="hljs code-wrapper"><pre><code> <figure class="highlight awk"><table><tr><td class="gutter hljs"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">export PATH=<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/cuda-8.0/</span>bin<span class="hljs-variable">$&#123;PATH:+:$&#123;PATH&#125;</span>&#125;<br>export LD\_LIBRARY\_PATH=<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/cuda-8.0/</span>lib64<span class="hljs-variable">$&#123;LD\_LIBRARY\_PATH:+:$&#123;LD\_LIBRARY\_PATH&#125;</span>&#125;<br></code></pre></div></td></tr></table></figure></code></pre></li><li>按如下步骤进行：<ul><li>  <img src="https://api2.mubu.com/v3/document_image/a1e874b8-da96-4236-aa27-03f1a8bb05db-1995134.jpg"></li></ul></li><li>测试CUDA安装成了没：  <figure class="highlight ebnf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ebnf"><span class="hljs-attribute">nvcc -V</span><br></code></pre></div></td></tr></table></figure></li><li>下载cudnn <a href="https://developer.nvidia.com/cuda-toolkit-archive">下载官网匹配版本</a></li></ul></li></ul></li><li>opencv4.5.0:教程中的图文对应OPENCV版本号有问题，方法都一样  <a href="https://blog.csdn.net/weixin_40557160/article/details/111634569">(1条消息) Ubuntu20.04 配置Yolov4(gpu版，安装OpenCV，配置环境)_小菜彭-没拿过奖学金的废物的博客的博客-CSDN博客</a></li></ul></li><li><h3 id="训练数据"><a href="#训练数据" class="headerlink" title="训练数据"></a>训练数据</h3><ul><li><p><a href="https://www.cnblogs.com/answerThe/p/11481564.html">darknet-yolov3训练自己的数据集（超详细） - AnswerThe - 博客园 (cnblogs.com)</a></p></li><li><p>数据集可以用之前在Windows下标注的数据集，将之前标注好的图片和xml文件放到对应目录下。</p><ul><li>  <img src="https://api2.mubu.com/v3/document_image/5884d632-7dda-47c2-ad7a-4ff2d20b959c-1995134.jpg"></li><li>  <img src="https://api2.mubu.com/v3/document_image/593be5d3-522f-4b77-84e0-e30982a5b746-1995134.jpg"></li></ul></li><li><p>在myData目录下创建test.py</p>  <figure class="highlight vim"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vim">import os<br>import random<br>trainval_percent = <span class="hljs-number">0.1</span><br>train_percent = <span class="hljs-number">0.9</span><br>xmlfilepath = <span class="hljs-string">&#x27;Annotations&#x27;</span><br>txtsavepath = <span class="hljs-string">&#x27;ImageSets\Main&#x27;</span><br>total_xml = os.listdir(xmlfilepath)<br>num = <span class="hljs-built_in">len</span>(total_xml)<br><span class="hljs-keyword">list</span> = <span class="hljs-built_in">range</span>(num)<br>tv = <span class="hljs-keyword">int</span>(num * trainval_percent)<br><span class="hljs-keyword">tr</span> = <span class="hljs-keyword">int</span>(tv * train_percent)<br>trainval = random.sample(<span class="hljs-keyword">list</span>, tv)<br>train = random.sample(trainval, <span class="hljs-keyword">tr</span>)<br>ftrainval = <span class="hljs-keyword">open</span>(<span class="hljs-string">&#x27;ImageSets/Main/trainval.txt&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>)<br>ftest = <span class="hljs-keyword">open</span>(<span class="hljs-string">&#x27;ImageSets/Main/test.txt&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>)<br>ftrain = <span class="hljs-keyword">open</span>(<span class="hljs-string">&#x27;ImageSets/Main/train.txt&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>)<br>fval = <span class="hljs-keyword">open</span>(<span class="hljs-string">&#x27;ImageSets/Main/val.txt&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>)<br><span class="hljs-keyword">for</span> i in lis<span class="hljs-variable">t:</span><br>    name = total_xml[i][:-<span class="hljs-number">4</span>] + <span class="hljs-string">&#x27;\n&#x27;</span><br>    <span class="hljs-keyword">if</span> i in trainva<span class="hljs-variable">l:</span><br>        ftrainval.<span class="hljs-keyword">write</span>(name)<br>        <span class="hljs-keyword">if</span> i in train:<br>            ftest.<span class="hljs-keyword">write</span>(name)<br>        <span class="hljs-keyword">else</span>:<br>            fval.<span class="hljs-keyword">write</span>(name)<br>    <span class="hljs-keyword">else</span>:<br>        ftrain.<span class="hljs-keyword">write</span>(name)<br>ftrainval.<span class="hljs-keyword">close</span>()<br>ftrain.<span class="hljs-keyword">close</span>()<br>fval.<span class="hljs-keyword">close</span>()<br>ftest.<span class="hljs-keyword">close</span>()<br></code></pre></div></td></tr></table></figure><ul><li>运行test.py生成对应的四个txt文件运行<ul><li>  <img src="https://api2.mubu.com/v3/document_image/f6e20257-96ae-413c-8b86-efd0d271d0be-1995134.jpg"></li></ul></li><li>  用python脚本将数据集进行格式转换（YOLO 训练需要的格式），在darknet文件夹下新建一个my_lables.py文件(代码如下),运行后生成代表类别和相对位置的myData_train.txt，以及lables文件夹下的txt文件</li></ul>  <figure class="highlight processing"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs processing"><span class="hljs-keyword">import</span> xml.etree.ElementTree as ET<br><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">import</span> os<br>from os <span class="hljs-keyword">import</span> listdir, getcwd<br>from os.path <span class="hljs-keyword">import</span> <span class="hljs-built_in">join</span> #源代码sets=[(<span class="hljs-string">&#x27;2012&#x27;</span>, <span class="hljs-string">&#x27;train&#x27;</span>), (<span class="hljs-string">&#x27;2012&#x27;</span>, <span class="hljs-string">&#x27;val&#x27;</span>), (<span class="hljs-string">&#x27;2007&#x27;</span>, <span class="hljs-string">&#x27;train&#x27;</span>), (<span class="hljs-string">&#x27;2007&#x27;</span>, <span class="hljs-string">&#x27;val&#x27;</span>), (<span class="hljs-string">&#x27;2007&#x27;</span>, <span class="hljs-string">&#x27;test&#x27;</span>)]<br>sets=[(<span class="hljs-string">&#x27;myData&#x27;</span>, <span class="hljs-string">&#x27;train&#x27;</span>)]  # 改成自己建立的myData<br>classes = [<span class="hljs-string">&quot;people&quot;</span>] # 改成自己的类别<br>def convert(<span class="hljs-built_in">size</span>, <span class="hljs-built_in">box</span>):<br>    dw = <span class="hljs-number">1.</span>/(<span class="hljs-built_in">size</span>[<span class="hljs-number">0</span>])<br>    dh = <span class="hljs-number">1.</span>/(<span class="hljs-built_in">size</span>[<span class="hljs-number">1</span>])<br>    x = (<span class="hljs-built_in">box</span>[<span class="hljs-number">0</span>] + <span class="hljs-built_in">box</span>[<span class="hljs-number">1</span>])/<span class="hljs-number">2.0</span> - <span class="hljs-number">1</span><br>    y = (<span class="hljs-built_in">box</span>[<span class="hljs-number">2</span>] + <span class="hljs-built_in">box</span>[<span class="hljs-number">3</span>])/<span class="hljs-number">2.0</span> - <span class="hljs-number">1</span><br>    w = <span class="hljs-built_in">box</span>[<span class="hljs-number">1</span>] - <span class="hljs-built_in">box</span>[<span class="hljs-number">0</span>]<br>    h = <span class="hljs-built_in">box</span>[<span class="hljs-number">3</span>] - <span class="hljs-built_in">box</span>[<span class="hljs-number">2</span>]<br>    x = x*dw<br>    w = w*dw<br>    y = y*dh<br>    h = h*dh<br>    <span class="hljs-keyword">return</span> (x,y,w,h)<br>def convert_annotation(<span class="hljs-built_in">year</span>, image_id):<br>    in_file = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;myData/Annotations/%s.xml&#x27;</span>%(image_id))  # 源代码VOCdevkit/VOC%s/Annotations/%s.xml<br>    out_file = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;myData/labels/%s.txt&#x27;</span>%(image_id), <span class="hljs-string">&#x27;w&#x27;</span>)  # 源代码VOCdevkit/VOC%s/labels/%s.txt<br>    tree=ET.parse(in_file)<br>    root = tree.getroot()<br>    <span class="hljs-built_in">size</span> = root.find(<span class="hljs-string">&#x27;size&#x27;</span>)<br>    w = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">size</span>.find(<span class="hljs-string">&#x27;width&#x27;</span>).<span class="hljs-built_in">text</span>)<br>    h = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">size</span>.find(<span class="hljs-string">&#x27;height&#x27;</span>).<span class="hljs-built_in">text</span>)<br>    <span class="hljs-keyword">for</span> obj in root.iter(<span class="hljs-string">&#x27;object&#x27;</span>):<br>        difficult = obj.find(<span class="hljs-string">&#x27;difficult&#x27;</span>).<span class="hljs-built_in">text</span><br>        cls = obj.find(<span class="hljs-string">&#x27;name&#x27;</span>).<span class="hljs-built_in">text</span><br>        <span class="hljs-keyword">if</span> cls not in classes or <span class="hljs-built_in">int</span>(difficult)==<span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">continue</span><br>        cls_id = classes.index(cls)<br>        xmlbox = obj.find(<span class="hljs-string">&#x27;bndbox&#x27;</span>)<br>        b = (<span class="hljs-built_in">float</span>(xmlbox.find(<span class="hljs-string">&#x27;xmin&#x27;</span>).<span class="hljs-built_in">text</span>), <span class="hljs-built_in">float</span>(xmlbox.find(<span class="hljs-string">&#x27;xmax&#x27;</span>).<span class="hljs-built_in">text</span>), <span class="hljs-built_in">float</span>(xmlbox.find(<span class="hljs-string">&#x27;ymin&#x27;</span>).<span class="hljs-built_in">text</span>), <span class="hljs-built_in">float</span>(xmlbox.find(<span class="hljs-string">&#x27;ymax&#x27;</span>).<span class="hljs-built_in">text</span>))<br>        bb = convert((w,h), b)<br>        out_file.write(<span class="hljs-built_in">str</span>(cls_id) + <span class="hljs-string">&quot; &quot;</span> + <span class="hljs-string">&quot; &quot;</span>.<span class="hljs-built_in">join</span>([<span class="hljs-built_in">str</span>(a) <span class="hljs-keyword">for</span> a in bb]) + <span class="hljs-string">&#x27;\n&#x27;</span>)<br>wd = getcwd()<br><span class="hljs-keyword">for</span> <span class="hljs-built_in">year</span>, image_set in sets:<br>    <span class="hljs-keyword">if</span> not os.path.exists(<span class="hljs-string">&#x27;myData/labels/&#x27;</span>):  # 改成自己建立的myData<br>        os.makedirs(<span class="hljs-string">&#x27;myData/labels/&#x27;</span>)<br>    image_ids = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;myData/ImageSets/Main/%s.txt&#x27;</span>%(image_set)).read().strip().<span class="hljs-built_in">split</span>()<br>    list_file = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;myData/%s_%s.txt&#x27;</span>%(<span class="hljs-built_in">year</span>, image_set), <span class="hljs-string">&#x27;w&#x27;</span>)<br>    <span class="hljs-keyword">for</span> image_id in image_ids:<br>        list_file.write(<span class="hljs-string">&#x27;%s/myData/JPEGImages/%s.jpg\n&#x27;</span>%(wd, image_id))<br>        convert_annotation(<span class="hljs-built_in">year</span>, image_id)<br>    list_file.close()<br></code></pre></div></td></tr></table></figure><ul><li>  <img src="https://api2.mubu.com/v3/document_image/7750cee5-ad12-4224-aec5-b7bcbea3e55a-1995134.jpg"></li><li><img src="https://api2.mubu.com/v3/document_image/212f9f67-c4c6-4605-9222-773c47dbea7f-1995134.jpg"></li></ul></li><li><p>打开自己的cfg文件如图按照自己电脑配置修改训练批次和训练迭代次数。</p><ul><li>  <img src="https://api2.mubu.com/v3/document_image/e044ad96-7a31-409c-9624-eb9ec9617aa1-1995134.jpg"></li></ul></li><li><p>据实际情况分别修改三处classes（每个[yolo]下）,filters=(classes + 5)x3(每个[yolo]上的第一个[convolutional])。</p><ul><li>  <img src="https://api2.mubu.com/v3/document_image/c09e6352-12ba-472b-ac53-0f3acdb4fe9c-1995134.jpg"></li></ul></li><li><p>修改cfg/my_data.data</p><ul><li>  <img src="https://api2.mubu.com/v3/document_image/b60372b3-965c-4bd9-acd5-032502134267-1995134.jpg"></li></ul></li><li><p>新建myData.names</p><ul><li>  <img src="https://api2.mubu.com/v3/document_image/7e0a9e1e-25bf-483b-877f-80011ed272bb-1995134.jpg"></li></ul></li><li><p>下载预训练权重，网上找个拷贝进去</p><ul><li>  <img src="https://api2.mubu.com/v3/document_image/aebec69d-29cf-497a-9cf6-72fcf96bbb24-1995134.jpg"></li></ul><p>  预训练权重链接: <a href="https://pan.baidu.com/s/10HPZsmBP8mpU0HcHLgSk-Q">https://pan.baidu.com/s/10HPZsmBP8mpU0HcHLgSk-Q</a> 提取码: 76fq</p></li><li><p>开始训练：</p>  <figure class="highlight reasonml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs reasonml">./darknet detector train cfg/my\<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">_data</span>.</span></span>data cfg/my\<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">_yolov3</span>.</span></span>cfg darknet53.conv.<span class="hljs-number">74</span><br></code></pre></div></td></tr></table></figure></li><li><p>从停止处重新训练：</p>  <figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">.<span class="hljs-regexp">/darknet detector train cfg/my</span>\_data.data cfg<span class="hljs-regexp">/my\_yolov3.cfg darknet53.conv.74 -gups 0,1,2,3 myData/</span>weights/my_yolov3.backup -gpus <span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span><br></code></pre></div></td></tr></table></figure></li></ul></li></ul></li><li><h2 id="结果分析"><a href="#结果分析" class="headerlink" title="结果分析"></a>结果分析</h2><ul><li>纵坐标平均loss（误差）接近0.0359，即变化不大时可停止训练。横坐标batch（每batch（64）个样本更新一次参数）<ul><li>  <img src="https://api2.mubu.com/v3/document_image/b18024d9-3213-4aa9-91d2-bc348b9c1dde-1995134.jpg"></li></ul></li><li>当前训练的迭代次数: 6478,总体的 Loss(损失）:0.0279,平均 Loss:0.0359<ul><li>  <img src="https://api2.mubu.com/v3/document_image/c0b64427-911b-49ec-b27b-bc8ca0cb1b70-1995134.jpg"></li></ul></li><li>测试效果：<div class="hljs code-wrapper"><pre><code> <figure class="highlight reasonml"><table><tr><td class="gutter hljs"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs reasonml">./darknet detect cfg/my\<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">_yolov3</span>.</span></span>cfg weights/my\<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">_yolov3</span>.</span></span>weights <span class="hljs-number">72.</span>jpg<br></code></pre></div></td></tr></table></figure></code></pre><ul><li>  <img src="https://api2.mubu.com/v3/document_image/06fc433f-79c6-4fba-987c-674fc0b21ac0-1995134.jpg"></li></ul></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>深度学习</category>
      
      <category>YOLO</category>
      
      <category>Ubuntu</category>
      
    </categories>
    
    
    <tags>
      
      <tag>YOLO</tag>
      
      <tag>目标识别检测</tag>
      
      <tag>训练数据集</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>极本穷源：YOLO篇（篇幅过长，整理后择日上传）</title>
    <link href="/2021/10/23/YOLO%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/"/>
    <url>/2021/10/23/YOLO%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="YOLO-基础学习"><a href="#YOLO-基础学习" class="headerlink" title="YOLO 基础学习"></a>YOLO 基础学习</h1><h2 id="YOLOV3的网络架构"><a href="#YOLOV3的网络架构" class="headerlink" title="YOLOV3的网络架构"></a>YOLOV3的网络架构</h2><h3 id="卷积-池化-连接-上下采样"><a href="#卷积-池化-连接-上下采样" class="headerlink" title="卷积 池化 连接 上下采样"></a>卷积 池化 连接 上下采样</h3><ul><li><p><a href="https://www.matongxue.com/madocs/32/">什么是卷积？学过高等数学的对这个词都不陌生，具体参考马同学讲的。</a></p><p>  从数学上来讲“卷积”就是一种数学运算，  </p></li><li><p><a href="https://blog.csdn.net/stf1065716904/article/details/78450997?utm_source=app&app_version=4.17.2&code=app_1562916241&uLinkId=usr1mkqgl919blen">什么是图像的上下采样？</a></p><ul><li>缩小图像（或称为下采样（subsampled）或降采样（downsampled））的主要目的有两个：1、使得图像符合显示区域的大小；2、生成对应图像的缩略图。</li><li>放大图像（或称为上采样（upsampling）或图像插值（interpolating））的主要目的是放大原图像,从而可以显示在更高分辨率的显示设备上。</li><li>  对图像的缩放操作并不能带来更多关于该图像的信息, 因此图像的质量将不可避免地受到影响。然而，确实有一些缩放方法能够增加图像的信息，从而使得缩放后的图像质量超过原图质量的。</li></ul></li></ul><h2 id="YOLO-和-Tiny-YOLO-的关系"><a href="#YOLO-和-Tiny-YOLO-的关系" class="headerlink" title="YOLO 和 Tiny YOLO 的关系"></a>YOLO 和 Tiny YOLO 的关系</h2><h2 id="AI”炼丹”是啥"><a href="#AI”炼丹”是啥" class="headerlink" title="*   AI”炼丹”是啥"></a>*   AI”炼丹”是啥</h2><div class="hljs code-wrapper"><pre><code> 深度学习训练模型就像炼丹，没啥理论，纯靠实验，要有很多设备，动不动的训练好几天的数据</code></pre></div><h2 id="机器学习算法工程师都要干些啥"><a href="#机器学习算法工程师都要干些啥" class="headerlink" title="*   机器学习算法工程师都要干些啥"></a>*   机器学习算法工程师都要干些啥</h2><div class="hljs code-wrapper"><pre><code> 1.基于提出需求设计组合算法即策略解决问题，不限于深度学习，传统视觉，算法策略，大部分需求都是组合算法解决的，例如检测分类姿态等多模态模型组合并配合一些传统算法解决问题(pytorch/caffe opencv) 2.训练数据采集方案的设计，标注规则的指定以及数据审核 3.快速实现算法demo并验证算法逻辑策略部分以及评估自测(Python) 4.模型实际部署平台的性能资源占用和效率评估，评估ok走下一步，否则返回3步骤针对优化验证， 5.基于c/c++完成算法sdk库开发，其中涉及到模型多平台移植部署(涉及到后端nn推理框架的选用，前后处理部分代码的编写)，代码高性能优化(simd cuda openc,openmpl...) 6.算法库文档编写，外发sdk库</code></pre></div><h2 id="yolov3基础知识"><a href="#yolov3基础知识" class="headerlink" title="*   yolov3基础知识"></a>*   yolov3基础知识</h2><h3 id="上采样，下采样"><a href="#上采样，下采样" class="headerlink" title="*   上采样，下采样"></a>*   上采样，下采样</h3><p>##NMS是啥，如何进行NMS调参##</p><p>NMS（）：非极大化抑制算法。</p><h3 id="288-cfg"><a href="#288-cfg" class="headerlink" title="*   288.cfg"></a>*   288.cfg</h3><ul><li><p>  ignore_thresh = .7</p></li><li><p>  beta_nms=0.7</p></li><li><p>  result</p></li></ul><p>   <img src="https://api2.mubu.com/v3/document_image/6408bce3-2e06-4b00-b947-feb5692c6510-1995134.jpg"></p><h3 id="288-cfg-1"><a href="#288-cfg-1" class="headerlink" title="*   288.cfg"></a>*   288.cfg</h3><ul><li><p>  ignore_thresh = .7</p></li><li><p>  beta_nms=0.8</p></li><li><p>  result</p></li></ul><p>   <img src="https://api2.mubu.com/v3/document_image/b052fcbe-09b7-4670-8086-da3d412d0e24-1995134.jpg"></p><p>   <img src="https://api2.mubu.com/v3/document_image/fd585dd4-60de-43a3-9d2d-65b9c91dca3e-1995134.jpg"></p><h3 id="416-cfg"><a href="#416-cfg" class="headerlink" title="*   416.cfg"></a>*   416.cfg</h3><ul><li><p>  ignore_thresh = .7</p></li><li><p>  beta_nms=0.7</p></li><li><p>  result</p></li></ul><p>   <img src="https://api2.mubu.com/v3/document_image/f6a1caf4-cdaf-4eb2-a5b5-3686bc80812a-1995134.jpg"></p><h3 id="416-cfg-1"><a href="#416-cfg-1" class="headerlink" title="*   416.cfg"></a>*   416.cfg</h3><ul><li><p>  ignore_thresh = .7</p></li><li><p>  beta_nms=0.5</p></li><li><p>  result</p></li></ul><p>   <img src="https://api2.mubu.com/v3/document_image/d78d9cdb-b2f2-48d4-a7bf-0d9e75307ac6-1995134.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>极本穷源</category>
      
    </categories>
    
    
    <tags>
      
      <tag>YOLO</tag>
      
      <tag>卷积</tag>
      
      <tag>池化</tag>
      
      <tag>连接</tag>
      
      <tag>上下采样</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>不花一分钱搭建个人博客</title>
    <link href="/2021/10/22/%E4%B8%8D%E8%8A%B1%E4%B8%80%E5%88%86%E9%92%B1%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <url>/2021/10/22/%E4%B8%8D%E8%8A%B1%E4%B8%80%E5%88%86%E9%92%B1%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="不花一分钱搭建个人博客，有手就行"><a href="#不花一分钱搭建个人博客，有手就行" class="headerlink" title="不花一分钱搭建个人博客，有手就行"></a>不花一分钱搭建个人博客，有手就行</h1><h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><ul><li><ul><li>前段时间在网上找代码，看到一位大佬的个人博客。<ul><li>  <img src="https://api2.mubu.com/v3/document_image/c552f8b5-68ee-4ea4-9576-f5302ab8f8c2-1995134.jpg"></li></ul></li><li>  看到网址后缀有github，对新鲜事物充满好奇又有动手能力的我。遇到这种情况怎么说，当然是打开CSDN 搜索关键字github.io。果然一大堆教程，又了解到一个用 Node.js 构建的快速、简洁且强大的博客框架:Hexo 。最初由Tommy Chen于2012年创建和维护。从那时起，它帮助成千上万的人建立了他们的梦想网站/博客。</li></ul></li></ul><h2 id="上手"><a href="#上手" class="headerlink" title="上手"></a>上手</h2><ul><li><h3 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h3><ul><li><ul><li>那么如何基于github和Hexo搭建个人博客呢<ul><li>  <img src="https://api2.mubu.com/v3/document_image/6f96f714-13aa-42b9-9de6-4c631644d4d8-1995134.jpg"></li></ul>  <a href="https://blog.csdn.net/qq_43270074/article/details/95392429">(3条消息) 搭建GitHub免费个人网站（详细教程）_苍何的博客-CSDN博客_用github搭建个人网站</a></li></ul></li></ul><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><ul><li><ul><li><p>注册gtihub</p></li><li><p><a href="https://blog.csdn.net/qq_41465646/article/details/107656044?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522163487906816780357299722%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=163487906816780357299722&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-107656044.pc_search_all_es&utm_term=%E5%AE%89%E8%A3%85node.js&spm=1018.2226.3001.4187">安装node.js</a></p></li><li><p><a href="https://blog.csdn.net/qq_19681347/article/details/90768640?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522163487998716780255286032%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=163487998716780255286032&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-90768640.pc_search_all_es&utm_term=git%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AEwin10&spm=1018.2226.3001.4187">安装</a>并<a href="https://blog.csdn.net/qq_43112598/article/details/106532649?ops_request_misc=&request_id=&biz_id=&utm_medium=distribute.pc_search_result.none-task-blog-2~all~es_rank~default-3-106532649.pc_search_all_es&utm_term=git%E9%85%8D%E7%BD%AE&spm=1018.2226.3001.4187">配置</a>git</p></li><li><p><a href="https://blog.csdn.net/qq_43270074/article/details/95392429">安装hexo并新建GitHub仓库</a></p></li><li><p><a href="https://blog.csdn.net/zgd826237710/article/details/99671027?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522163488033316780265429237%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=163488033316780265429237&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-99671027.pc_search_all_es&utm_term=hexo%E4%B8%BB%E9%A2%98&spm=1018.2226.3001.4187">修改主题</a>，网上搜hexo主题选择自己喜欢的风格</p><ul><li>感受下大家的魔改版<ul><li><a href="https://www.yunyoujun.cn/">云游君的小站 (yunyoujun.cn)</a><ul><li>  <img src="https://api2.mubu.com/v3/document_image/546214d8-9289-46dc-af37-2f6942a882bb-1995134.jpg"></li></ul></li><li><a href="https://hiitea.io/tech/">小白妹妹写代码</a><ul><li>  <img src="https://api2.mubu.com/v3/document_image/e63982f8-c667-4ffa-bed3-1aca3d486b47-1995134.jpg"></li></ul></li></ul></li></ul></li><li><p>部署好模板后，问题又来了：怎么写博客</p><ul><li>这里介绍下我自己的方法，在\hexo\source_posts目录下，新建.md的博客</li><li>内容格式如图，其中tag为标签，categories为分类<ul><li>  <img src="https://api2.mubu.com/v3/document_image/504629b0-35f5-4ef9-a435-bd1889b788a3-1995134.jpg"></li></ul></li></ul></li><li><p>  OK，现在模板有了，博客内容也有了。问题又来了：网站加载速度有时候特别慢，那咋办嘛                  *   用自己的服务器搭建的，可以试下CDN加速        *   换下图片存储的位置，网上有很多免费的<a href="https://imgtu.com/">图片托管</a>网站，但是一张一张的存太麻烦了        *   <img src="https://api2.mubu.com/v3/document_image/8eca4e2a-9f71-446a-8982-d5bc43bbd7ca-1995134.jpg">      *   直接存到<a href="https://mubu.com/">幕布</a>上，导出HTML文件，<a href="https://zhuanlan.zhihu.com/p/405404977">转为.md文件</a>，复制想要的内容到自己的博客中，适当修改下格式，大功告成。                </p></li></ul></li></ul><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><ul><li><ul><li>我选一款比较简洁的<a href="https://github.com/fluid-dev/hexo-theme-fluid">模板</a>，<a href="https://ethan1024.github.io/">欢迎来访</a>。，增加了页脚网站运行时间、不蒜子网页访问统计等功能</li><li>  <img src="https://api2.mubu.com/v3/document_image/b280872b-4d6d-4a0f-98de-b9909b09275f-1995134.jpg">   </li><li>  <img src="https://api2.mubu.com/v3/document_image/9e4cf9c8-166d-4c78-8ef2-31e3ffc19499-1995134.jpg"></li></ul></li></ul></li></ul><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><ul><li><ul><li>前后尝试试过几种模板，配置起来都不算难。遇到问题先百度下，祝你好运。<ul><li>  <img src="https://api2.mubu.com/v3/document_image/48b00250-fe3d-4631-8dee-d7a41ab03d49-1995134.jpg"></li></ul></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>搭建个人博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>YOLO算法在windows下训练自己的数据集</title>
    <link href="/2021/10/21/YOLO%E7%AE%97%E6%B3%95%E5%9C%A8windows%E4%B8%8B%E8%AE%AD%E7%BB%83%E8%87%AA%E5%B7%B1%E7%9A%84%E6%95%B0%E6%8D%AE%E9%9B%86/"/>
    <url>/2021/10/21/YOLO%E7%AE%97%E6%B3%95%E5%9C%A8windows%E4%B8%8B%E8%AE%AD%E7%BB%83%E8%87%AA%E5%B7%B1%E7%9A%84%E6%95%B0%E6%8D%AE%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<h1 id="YOLO算法在windows下训练自己的数据集"><a href="#YOLO算法在windows下训练自己的数据集" class="headerlink" title="YOLO算法在windows下训练自己的数据集"></a>YOLO算法在windows下训练自己的数据集</h1><h2 id="背景基础"><a href="#背景基础" class="headerlink" title="背景基础"></a>背景基础</h2><ul><li><p>  已有在官方权重下，YOLOV3算法在识别物体上的测试效果</p></li><li><p>  特定数据集的制作与训练实现特有的目标检测</p></li></ul><h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><p>xx目标的识别检测</p><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p><a href="https://blog.csdn.net/congcong7267/article/details/82981084">(1条消息) win10下yolov3训练自己的数据集_congcong7267的博客-CSDN博客</a></p><h3 id="训练自己的数据集、"><a href="#训练自己的数据集、" class="headerlink" title="训练自己的数据集、"></a>训练自己的数据集、</h3><div class="hljs code-wrapper"><pre><code>*   每种物体采集大概两三百张照片（距离、背景、光线）*   标注图片中的目标，制作数据集*   打开win10终端，cd进入darknet-master\\build\\darknet\\x64，darknet.exe detector train data/obj.data yolo-obj.cfg darknet53.conv.74 开始训练</code></pre></div><h3 id="生成权重文件移植到树莓派上进行测试"><a href="#生成权重文件移植到树莓派上进行测试" class="headerlink" title="生成权重文件移植到树莓派上进行测试"></a>生成权重文件移植到树莓派上进行测试</h3><div class="hljs code-wrapper"><pre><code>*   backup文件下最后一个权重文件复制到build\\darknet\\x64\*   打开win10终端，cd进入然后运行darknet-master\\build\\darknet\\x64路径*   输入：darknet.exe detector test data/obj.data yolo-obj.cfg yolo-obj\_100.weights（olo-obj\_100.weights为训练好的权重名）*   终端会提醒你输入图片路径，然后你输入测试图片的绝对路径即可看到效果</code></pre></div><h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><p><a href="https://blog.csdn.net/congcong7267/article/details/82981084">(2条消息) win10下yolov3训练自己的数据集_congcong7267的博客-CSDN博客</a></p><h3 id="新建yolo-obj-cfg文件，将batch-改成64-：batch-64，subdivisions-64"><a href="#新建yolo-obj-cfg文件，将batch-改成64-：batch-64，subdivisions-64" class="headerlink" title="新建yolo-obj.cfg文件，将batch 改成64 ：batch=64，subdivisions=64"></a>新建yolo-obj.cfg文件，将batch 改成64 ：batch=64，subdivisions=64</h3><p>在Darknet中，batch和subdivisions是结合使用的，例如设置batch=64，subdivisions=16，表示训练的过程中将一次性加载64张图片进内存，然后分16次完成前向传播，意思是每次4张，前向传播的循环过程中累加loss求平均，待64张图片都完成前向传播后，再一次性后传更新参数。(<a href="https://zhuanlan.zhihu.com/p/91587361">yolov3.cfg参数说明及调参经验 - 知乎 (zhihu.com)</a>)</p><p>接着根据训练类别数（classes），修改每个[yolo]（三处）<strong>上面</strong>（即每个yolo的输出层）的第一个convolution里filters（滤波器）的大小 filters=(classes + 5)x3，每个[yolo]（三处）<strong>下面</strong> 的classes修改为自己的类别数。</p><h3 id="在build-darknet-x64-data-下新建obj-names文件，写入自己的类名"><a href="#在build-darknet-x64-data-下新建obj-names文件，写入自己的类名" class="headerlink" title="在build\darknet\x64\data\下新建obj.names文件，写入自己的类名"></a>在build\darknet\x64\data\下新建obj.names文件，写入自己的类名</h3><p><img src="https://api2.mubu.com/v3/document_image/70fa4c70-c6ff-4ce4-8466-b545569d3448-1995134.jpg"></p><h3 id="在build-darknet-x64-data-下新建obj-data文件"><a href="#在build-darknet-x64-data-下新建obj-data文件" class="headerlink" title="在build\darknet\x64\data\下新建obj.data文件"></a>在build\darknet\x64\data\下新建obj.data文件</h3><p>   <img src="https://api2.mubu.com/v3/document_image/8beaa8bd-abc0-4a83-ab1d-7566e368442f-1995134.jpg"></p><h3 id="制作数据集"><a href="#制作数据集" class="headerlink" title="制作数据集"></a>制作数据集</h3><ul><li>  图片批量顺序命名py脚本</li></ul><p>   <img src="https://api2.mubu.com/v3/document_image/17b4a336-e2d7-4566-83f2-f468af9acdb2-1995134.jpg"></p><ul><li>  使用<a href="https://blog.csdn.net/weixin_44345862/article/details/87039727?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522162996330516780255261821%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=162996330516780255261821&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-87039727.pc_search_result_control_group&utm_term=win10%E5%AE%89%E8%A3%85labelimg&spm=1018.2226.3001.4187">labelimg</a>标注图片中的目标，生成xml文件</li></ul><p>   <img src="https://api2.mubu.com/v3/document_image/94a3ebba-5085-4570-adf7-51a8602270d1-1995134.jpg"></p><div class="hljs code-wrapper"><pre><code>使用py脚本将xml文件转为txt文件<figure class="highlight python"><table><tr><td class="gutter hljs"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> xml.etree.ElementTree <span class="hljs-keyword">as</span> ET<br><br>dirpath = <span class="hljs-string">r&#x27;E:\gongzuo\伪代码\darknet\build\darknet\x64\data\txt&#x27;</span>  <span class="hljs-comment"># 原来存放xml文件的目录</span><br>newdir = <span class="hljs-string">r&#x27;E:\gongzuo\伪代码\darknet\build\darknet\x64\data\obj&#x27;</span>                <span class="hljs-comment"># 修改label后形成的txt目录</span><br><br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(newdir):<br>    os.makedirs(newdir)<br><br>dict_info = &#123;<span class="hljs-string">&#x27;person&#x27;</span>: <span class="hljs-number">0</span>&#125;              <span class="hljs-comment"># 有几个 属性 填写几个label names</span><br><br><span class="hljs-keyword">for</span> fp <span class="hljs-keyword">in</span> os.listdir(dirpath):<br>    <span class="hljs-keyword">if</span> fp.endswith(<span class="hljs-string">&#x27;.xml&#x27;</span>):<br>        root = ET.parse(os.path.join(dirpath, fp)).getroot()<br><br>        xmin, ymin, xmax, ymax = <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br>        sz = root.find(<span class="hljs-string">&#x27;size&#x27;</span>)<br>        width = <span class="hljs-built_in">float</span>(sz[<span class="hljs-number">0</span>].text)<br>        height = <span class="hljs-built_in">float</span>(sz[<span class="hljs-number">1</span>].text)<br>        filename = root.find(<span class="hljs-string">&#x27;filename&#x27;</span>).text<br>        <span class="hljs-keyword">for</span> child <span class="hljs-keyword">in</span> root.findall(<span class="hljs-string">&#x27;object&#x27;</span>):  <span class="hljs-comment"># 找到图片中的所有框</span><br><br>            sub = child.find(<span class="hljs-string">&#x27;bndbox&#x27;</span>)  <span class="hljs-comment"># 找到框的标注值并进行读取</span><br>            label = child.find(<span class="hljs-string">&#x27;name&#x27;</span>).text<br>            label_ = dict_info.get(label)<br>            <span class="hljs-keyword">if</span> label_:<br>                label_ = label_<br>            <span class="hljs-keyword">else</span>:<br>                label_ = <span class="hljs-number">0</span><br>            xmin = <span class="hljs-built_in">float</span>(sub[<span class="hljs-number">0</span>].text)<br>            ymin = <span class="hljs-built_in">float</span>(sub[<span class="hljs-number">1</span>].text)<br>            xmax = <span class="hljs-built_in">float</span>(sub[<span class="hljs-number">2</span>].text)<br>            ymax = <span class="hljs-built_in">float</span>(sub[<span class="hljs-number">3</span>].text)<br>            <span class="hljs-keyword">try</span>:  <span class="hljs-comment"># 转换成yolov3的标签格式，需要归一化到（0-1）的范围内</span><br>                x_center = (xmin + xmax) / (<span class="hljs-number">2</span> * width)<br>                x_center = <span class="hljs-string">&#x27;%.6f&#x27;</span> % x_center<br>                y_center = (ymin + ymax) / (<span class="hljs-number">2</span> * height)<br>                y_center = <span class="hljs-string">&#x27;%.6f&#x27;</span> % y_center<br>                w = (xmax - xmin) / width<br>                w = <span class="hljs-string">&#x27;%.6f&#x27;</span> % w<br>                h = (ymax - ymin) / height<br>                h = <span class="hljs-string">&#x27;%.6f&#x27;</span> % h<br>            <span class="hljs-keyword">except</span> ZeroDivisionError:<br>                <span class="hljs-built_in">print</span>(filename, <span class="hljs-string">&#x27;的 width有问题&#x27;</span>)<br>            <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(os.path.join(newdir, fp.split(<span class="hljs-string">&#x27;.xml&#x27;</span>)[<span class="hljs-number">0</span>] + <span class="hljs-string">&#x27;.txt&#x27;</span>), <span class="hljs-string">&#x27;a+&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>                f.write(<span class="hljs-string">&#x27; &#x27;</span>.join([<span class="hljs-built_in">str</span>(label_), <span class="hljs-built_in">str</span>(x_center), <span class="hljs-built_in">str</span>(y_center), <span class="hljs-built_in">str</span>(w), <span class="hljs-built_in">str</span>(h) + <span class="hljs-string">&#x27;\n&#x27;</span>]))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;ok&#x27;</span>)<br>   <br></code></pre></div></td></tr></table></figure></code></pre><ul><li><p>  将所有样本图片及对应的的txt文件)放到：build\darknet\x64\data\obj\</p></li><li><p>  在build\darknet\x64\data\下新建train.txt，训练图片的路径放入文件</p></li></ul><p>   <img src="https://api2.mubu.com/v3/document_image/75481850-e194-4fe2-8f7f-7e37ba9926a9-1995134.jpg"></p><p>   <img src="https://api2.mubu.com/v3/document_image/6dc36e99-f601-4ded-9332-ade4de302ae5-1995134.jpg"></p><ul><li>  将darknet的预训练权重放入build\darknet\x64</li></ul><p><a href="https://pan.baidu.com/s/1Gdo2gj1bggjUtW9CyYkIpQ">预训练权重文件</a> 密码：x5ht</p><ul><li><p>  在\darknet路径下修改网络配置文件Makefile</p></li><li><p>  对比官方makefile修改：（其中C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v11.4/ 为自己的CUDA安装路径）</p></li></ul><p>（<a href="https://pan.baidu.com/s/1PYKf-47WAgl9Jqs_d-Sx3w">下载链接</a> 提取码：jh1i））</p><div class="hljs code-wrapper"><pre><code>*   GPU=1 CUDNN=1*   NVCC=C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v11.4/bin/nvcc*   COMMON+= -DGPU -I/C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v11.4/include*   LDFLAGS+= -L/C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v11.4/lib -lcuda -lcudart -lcublas -lcurand</code></pre></div><p>​<br>​<br>    *   打开cmd，cd进入darknet-master\build\darknet\x64路径，输入：darknet.exe detector train data/obj.data yolo-obj.cfg darknet53.conv.74 开始训练</p><div class="hljs code-wrapper"><pre><code>*   avg loss接近0.XX且变化不大时可停止训练，将x64\\backup下的weight文件复制到\\x64下，cd进入darknet-master\\build\\darknet\\x64路径运行darknet.exe detector test data/obj.data yolo-obj.cfg yolo-obj_last.weights，程序会提示输入待检测图片的路径。</code></pre></div><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><ul><li>  纵坐标平均loss（误差）接近0.545，即变化不大时可停止训练。横坐标batch（每batch（64）个样本更新一次参数）</li></ul><p>   <img src="https://api2.mubu.com/v3/document_image/9d13e9f1-0210-46de-a2f9-049b44dced72-1995134.jpg"></p><ul><li><p>在YOLOv3中，Loss分为三个部分:</p><ul><li>1、一个是x、y、w、h部分带来的误差，也就是bbox带来的loss</li><li>2、一个是置信度带来的误差，也就是obj带来的loss</li><li>  3、最后一个是类别带来的误差，也就是class带来的loss</li></ul></li></ul><ul><li><p>对比使用官方权重与自己训练的数据集检测目标时，由于检测结果受到样本数量的影响两者检测结果均不为理想。</p><p> <img src="https://api2.mubu.com/v3/document_image/b8d92392-4611-4df4-ae95-5785dcd0a57d-1995134.jpg"></p><p> <img src="https://api2.mubu.com/v3/document_image/8a2b8445-e813-40a3-9eb0-634136c5b403-1995134.jpg"></p><p> <img src="https://api2.mubu.com/v3/document_image/32153f95-4c39-43d3-a7ac-4a265ffce2f2-1995134.jpg"></p></li><li><p>  avg loss（误差）接近0.219时，基本不再变化</p></li></ul><p>   <img src="https://api2.mubu.com/v3/document_image/32e3faf5-64ec-4f8f-ab4c-0b62f5789f21-1995134.jpg"></p><p>####检测结果 ####</p><p>   <img src="https://api2.mubu.com/v3/document_image/896b339c-e6c6-4da3-87bb-f068aa9f8071-1995134.jpg"></p><p>   <img src="https://api2.mubu.com/v3/document_image/9c031abe-524b-416e-ab72-c18a2cbeb9a6-1995134.jpg"></p><p>   <img src="https://api2.mubu.com/v3/document_image/49ee54bf-5529-4721-b86b-26c59cfef737-1995134.jpg"></p><h4 id="参数分析："><a href="#参数分析：" class="headerlink" title="参数分析："></a>参数分析：</h4><p>   <img src="https://api2.mubu.com/v3/document_image/bbe5e7cf-266c-4e84-ab45-21b6869aeba4-1995134.jpg"></p><div class="hljs code-wrapper"><pre><code>*   1623： 当前训练的迭代次数;*   0.215670： 总体的 Loss(损失）;*   0.232835 avg： 平均 Loss, 这个数值应该越低越好, 一般来说, 一旦这个数值低于 0.060730 avg 就可以终止训练了;*   0.001000 rate： 当前的学习率, 在.cfg文件中定义的;*   9.07000 seconds： 当前批次训练花费的总时间;*   103875 images： 这一行最后的这个数值是 9798*64 的大小, 表示到目前为止, 参与训练的图片的总量.</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>深度学习</category>
      
      <category>YOLO</category>
      
      <category>windos</category>
      
    </categories>
    
    
    <tags>
      
      <tag>YOLO</tag>
      
      <tag>目标识别检测</tag>
      
      <tag>训练数据集</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于YOLO的目标识别检测</title>
    <link href="/2021/10/21/%E5%9F%BA%E4%BA%8EYOLO%E7%9A%84%E7%9B%AE%E6%A0%87%E8%AF%86%E5%88%AB%E6%A3%80%E6%B5%8B/"/>
    <url>/2021/10/21/%E5%9F%BA%E4%BA%8EYOLO%E7%9A%84%E7%9B%AE%E6%A0%87%E8%AF%86%E5%88%AB%E6%A3%80%E6%B5%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="基于YOLO的目标识别检测"><a href="#基于YOLO的目标识别检测" class="headerlink" title="基于YOLO的目标识别检测"></a>基于YOLO的目标识别检测</h1><div class="hljs code-wrapper"><pre><code>性能目标：*   目标识别准确率大于90%*   机载相机的有效地空检测距离大于10米*   所选取相机能实现自主或结合机载电脑实时处理目标识别</code></pre></div><hr><h2 id="感受下基于树莓派的YOLO目标检测算法（可见光）："><a href="#感受下基于树莓派的YOLO目标检测算法（可见光）：" class="headerlink" title="感受下基于树莓派的YOLO目标检测算法（可见光）："></a>感受下基于树莓派的YOLO目标检测算法（可见光）：</h2><p><img src="https://api2.mubu.com/v3/document_image/94481330-678e-4519-aac9-d11a63f06636-1995134.jpg"></p><p><img src="https://api2.mubu.com/v3/document_image/6d81dcb5-5fbb-4147-9853-ae14145098d9-1995134.jpg"></p><p><a href="https://blog.csdn.net/tMb8Z9Vdm66wH68VX1/article/details/104831844?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522162971033316780269896247%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=162971033316780269896247&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v29_ecpm-2-104831844.first_rank_v2_pc_rank_v29&utm_term=%E6%A0%91%E8%8E%93%E6%B4%BEYOLO%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B%E7%AE%97%E6%B3%95&spm=1018.2226.3001.4187">独家 | 在树莓派+Movidius NCS上运用YOLO和Tiny-YOLO完成目标检测（附代码下载）_数据派THU-CSDN博客</a></p><p><img src="https://api2.mubu.com/v3/document_image/e589f8d8-e481-40a3-9d42-cf322728e0f2-1995134.jpg"><br><a href="https://blog.csdn.net/weixin_43878078/article/details/103893426">在树莓派4使用YOLO v3 Tiny进行实时对象检测_weixin_43878078的博客-CSDN博客_树莓派yolo目标检测</a></p><p><img src="https://api2.mubu.com/v3/document_image/5c234c70-8695-44b8-b07d-55033a6660d5-1995134.jpg"></p><hr><h2 id="方法论证与实践"><a href="#方法论证与实践" class="headerlink" title="方法论证与实践"></a>方法论证与实践</h2><p><a href="https://blog.csdn.net/weixin_43878078/article/details/103893426">(1条消息) 在树莓派4使用YOLO v3 Tiny进行实时对象检测_weixin_43878078的博客-CSDN博客_树莓派yolo目标检测</a></p><h3 id="YOLO算法在树莓派3B-、4B上实现"><a href="#YOLO算法在树莓派3B-、4B上实现" class="headerlink" title="YOLO算法在树莓派3B+、4B上实现"></a>YOLO算法在树莓派3B+、4B上实现</h3><ul><li><p>步骤</p><ul><li>准备Python和Pi相机</li><li>安装 Ninja Building tool（控制编译的工具，它相对于Makefile这套工具更注重于编译速度）</li><li>安装修改后的 NNPACK（加速神经网络计算的加速包，NNPACK可以在多核CPU平台上提高卷积层计算性能）</li><li>安装darknet-nnpack（目的是给树莓派配置yolo模型，Darknet是一个小众的深度学习框架）</li></ul></li><li><p>存在问题</p><ul><li>安装完成，使用树莓派摄像头进行测试。从摄像头获取图像，通过YOLO算法实时的识别物体类别，使用usb摄像头会比CSI（Camera Serial Interface）接口的摄像头慢很多。无法识别摄像头，原因可能是：<div class="hljs code-wrapper"><pre><code> ①摄像头硬件有问题 ②树莓派上的摄像头驱动等存在问题</code></pre></div></li></ul></li></ul><h3 id="YOLOV3在Windows10（OpenCV3-4-CUDA11-4（CUDNN）-VisualStudio2017）下的实现"><a href="#YOLOV3在Windows10（OpenCV3-4-CUDA11-4（CUDNN）-VisualStudio2017）下的实现" class="headerlink" title="YOLOV3在Windows10（OpenCV3.4+CUDA11.4（CUDNN）+VisualStudio2017）下的实现"></a>YOLOV3在Windows10（OpenCV3.4+CUDA11.4（CUDNN）+VisualStudio2017）下的实现</h3><p><a href="https://blog.csdn.net/KID_yuan/article/details/88380269">(1条消息) Windows10+YOLOV3+VisualStudio2017最新版本超详细过程_【秋名鱼酱的博客】-CSDN博客_win yolov3</a></p><ul><li><p>步骤</p><ul><li>安装最新版本的cuda和cudnn（CUDA是NVIDIA推出的用于自家GPU的并行计算框架，CUDNN是NVIDIA打造的针对深度神经网络的加速库，是一个用于深层神经网络的GPU加速库）</li><li>安装OpenCV3.4（通过OpenCV调用dll实时检测）</li><li>  安装vs2017（使用本身2017对YOLOV3中的darknet项目文件进行编译）</li></ul></li></ul><ul><li><p>测试</p><ul><li>在测试效果之前还需要添加以下官网上下载训练好的权重文件</li><li>权重文件保存的就是训练好的网络各层的权值，也就是通过训练集训练出来的。训练好之后，应用时只要加载权值就可以，不再需要训练集了</li><li>  输入检测程序命令，实现对JPG、avi文件以及调用摄像头的实时目标检测</li></ul></li></ul><h2 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h2><h3 id="使用官方提供的权重文件检测对一下目标进行检测"><a href="#使用官方提供的权重文件检测对一下目标进行检测" class="headerlink" title="使用官方提供的权重文件检测对一下目标进行检测"></a>使用官方提供的权重文件检测对一下目标进行检测</h3><p><img src="https://api2.mubu.com/v3/document_image/d6d875e2-c7da-40e7-a2c7-d7a04bf65ede-1995134.jpg"></p><p><img src="https://api2.mubu.com/v3/document_image/a2bdeb98-0720-4375-bc44-21affad3737a-1995134.jpg"></p><h3 id="视频检测"><a href="#视频检测" class="headerlink" title="视频检测"></a>视频检测</h3><p><a href="https://www.bilibili.com/video/BV1Xv411A7Lj">视频检测效果</a></p><h2 id="制作训练集"><a href="#制作训练集" class="headerlink" title="制作训练集"></a>制作训练集</h2><ul><li><p>  YOLO有自己训练好的数据集，在YOLO v2 中，数据集可检测的类别达9000种以上，但是9000毕竟不是全部，它能涵盖大部分的物体识别，但是可能对于某些用户来说是不够的，所以我们需要学习它的数据集制作方法。</p></li><li><p>数据集分为以下几个部分：</p><ul><li>1.数据集的搜集，这一部分主要是在网上搜集整理相关数据集的图片，比如我要做某种猫的数据集，我需要上网上查找这种猫的图片；我需要做自己做的手工艺品的数据集，那我需要自己拍摄等等。</li><li>2.数据集的标注，计算机去认识一个物体，需要人去告诉他，哪个物体，是什么。就像我们在小时候，我们的父母会一点一点耐心教我们，什么是桌子，什么是椅子，什么是筷子，什么是树，什么是花……数据集的标注就是一个“教授”的过程。</li><li>3.数据集的训练，不是别人一教，你就能学会的，你需要不断地练习，比如说话，小时候父母不厌其烦的教我们；比如写汉字，中国人最应该骄傲的就是我们学会了世界上最难的一门语言，并且能够熟练应用。这就是因为我们从上学开始，老师就教我们写字，一写就是好几十遍……计算机也是如此，想让计算机明白什么是花，什么是自行车，就要让他“训练”，让他学会。</li><li>  4.数据集的应用，我们学会说话，学会认识物体，目的就是为了应用，学会说话，我们可以交流，认识自行车，是我们能够方便交通……数据集也一样，训练好的数据集的目的就是为了应用，或者说，我们训练数据集是因为我们需要应用这个数据集，例如，我们需要检测人流量，首先我们需要识别人，当然现在就有很多人体识别的算法，如果我们要采用数据集来识别，我们需要先制作一个数据集，然后在应用数据集完成我们需要的功能</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>深度学习</category>
      
      <category>YOLO</category>
      
      <category>树莓派</category>
      
    </categories>
    
    
    <tags>
      
      <tag>YOLO</tag>
      
      <tag>目标识别检测</tag>
      
      <tag>训练数据集</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>戴面具的猫</title>
    <link href="/2021/10/20/test4/"/>
    <url>/2021/10/20/test4/</url>
    
    <content type="html"><![CDATA[<h2 id><a href="#" class="headerlink" title></a></h2><p>图片</p><p><img src="https://api2.mubu.com/v3/document_image/a94b0309-01be-4a66-929b-459ccecb1686-1995134.jpg" alt="收手吧阿祖，外面全是警察"></p><p><img src="https://api2.mubu.com/v3/document_image/99485699-a9fd-45bb-9f64-df3434d60c1c-1995134.jpg" alt="HYUKOH"></p>]]></content>
    
    
    <categories>
      
      <category>图片</category>
      
    </categories>
    
    
    <tags>
      
      <tag>蒙面猫猫</tag>
      
      <tag>吴彦祖</tag>
      
      <tag>胖橘</tag>
      
      <tag>HYUKOH</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
