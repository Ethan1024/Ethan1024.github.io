{"meta":{"title":"Ethan的个人博客","subtitle":"","description":"","author":"Ethan","url":"http://example.com","root":"/"},"pages":[{"title":"about","date":"2021-10-21T04:43:07.000Z","updated":"2021-10-23T06:48:58.024Z","comments":false,"path":"about/index.html","permalink":"http://example.com/about/index.html","excerpt":"","text":"name: ethan age: 22 gender: 男 address: shaanxi xi’an github: https://github.com/Ethan1024 blog: https://ethan1024.github.io/ email: &#104;&#105;&#103;&#x68;&#x65;&#x72;&#x31;&#x32;&#49;&#50;&#64;&#49;&#54;&#x33;&#x2e;&#99;&#111;&#x6d;"}],"posts":[{"title":"简述通信协议栈和计算机网络的OSI模型","slug":"简述通信协议栈和计算机网络的OSI模型","date":"2021-10-28T02:07:06.000Z","updated":"2021-10-28T06:48:22.147Z","comments":true,"path":"2021/10/28/简述通信协议栈和计算机网络的OSI模型/","link":"","permalink":"http://example.com/2021/10/28/%E7%AE%80%E8%BF%B0%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE%E6%A0%88%E5%92%8C%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9A%84OSI%E6%A8%A1%E5%9E%8B/","excerpt":"","text":"简述通信协议栈和计算机网络的OSI模型 前段时间买了套无人机的通信控制模块，某宝上写的是开源，结果到手来了个只开源应用层（配套的应用软件）。我们需要的是网络层开源支持（与无人机直接通信的模块固件源码），只有拿到这部分代码才能把无人机载荷采集到的有用信息有效发挥，比如直接根据传感器信息控制无人机的自主飞行亦或是将载荷信息通过该通信链路传输到地面站，甚至可以是无人机结点间的信息交互，总之这份“价值超过500W源码”是不肯开源的。 被人怼就要吸取教训，今天就来学习总结下什么是通信协议栈，什么是计算机网络的OSI模型 通信协议栈： 简单来说就是一种网络通信协议的堆叠，网络协议就是通信双方约定好的通信规则。 协议栈的应运而生：数据在网络中的传输（寻址、抗干扰、加密、数据分割、压缩等）是极其复杂的。使用单一协议无法保障数据高速准确的传输，单一协议会导致协议冗余、复杂、难以优化，因此通过各层协议各司其职，互相配合使得通信效率更加高效。 通俗的打个比方：老板要下发一个工作通知到张三，（假设该协议栈只有两层：聊天层和纠错层）聊天层采用“通知内容转换协议” 把 “明天不上班” 这条消息转换为二进制的计算机信息：“01”，“01” 这条消息被传输到纠错层后采用 “信息无误就是1协议” 为 “01” 增加标志 “1或0”表示这条信息是否因受到网络传输干扰产生误差。那么张三有效收到“明台不上班”这条通知的二进制计算机信息就是“101”，这就是一个简单协议栈的基本原理。 比较常见的 TCP/IP 协议栈： TCP/IP 协议栈有四层结构：应用层、传输层、网络层、链路层。 深入浅出 TCP/IP 协议栈 - 一像素 - 博客园 (cnblogs.com) 链路层：将特定意义的数据（“明天上班”）加帧头、加帧尾构成一个数据包（数据帧），以广播的形式通过物理介质发送给接收方。以太网协议规定一组电信号就是一个数据包，一个数据包叫做一帧。帧头包含了目标MAC地址、源MAC地址和类型（大小为46-1500字节），以太网规协议又规定通信双方的网络设备必须安装有独一无二标识的网络适配器（这个标识就是网卡地址、数据包的发送地址和接收地址、也是帧头的MAC地址），帧尾提供校验数据是否损坏的校验序列； 协议数据单元在应用层、表示层和会话层被称做数据(Data)，在传输层被称做分段(Segment)，在网络层被称做包(Packet)，在数据链路层被称做帧(Frame)，在物理层被称做比特(Bit)。 网络层：定义IP地址，确认主机所在的网络位置，并通过IP进行MAC寻址，对外网数据包进行路由转发； 传输层：定义端口，确认主机上应用程序的身份，并将数据包交给对应的应用程序； 应用层：定义数据格式，并按照对应的格式解读数据。 计算机网络的OSI模型 怎么来的OSI模型：说是有一群叫做国际标准化组织的人（ISO），试图为全世界互联的各种计算机制定一套网络标准框架。框架和模型：框架是处理流程，模型是描述问题的工具。OSI（开放式系统互联通信参考模型）就是这个框架下的一种模型。 计算机网络 OSI网络模型 - 知乎 (zhihu.com) 简述七层OSI模型：物理层—&gt;二进制比特流与光电信号的互相转换；数据链路层—&gt;互连的网络设备之间的帧识别与帧传输；网络层—&gt;同一子网的寻址，不同子网的路由转发；传输层—&gt;建立端对端的通信，确保通信的稳定；会话层—&gt;建立和断开通信连接，同步会话等；表示层—&gt;数据的转换（格式，加密和压缩），数据传输的承上启下；应用层—&gt;为用户使用的应用程序提供网络服务，建立数据传输连接。 (3条消息) 网络通讯基础（一）OSI七层模型和TCP/IP四层（五层）模型_mxxrgxg的博客-CSDN博客 七层OSI 与 四层TCP/IP 模型的对比 TCP/IP的四层模型与OSI七层模型的有什么不同？","categories":[{"name":"计算机网络","slug":"计算机网络","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"}],"tags":[{"name":"协议栈","slug":"协议栈","permalink":"http://example.com/tags/%E5%8D%8F%E8%AE%AE%E6%A0%88/"},{"name":"TCP/IP协议栈","slug":"TCP-IP协议栈","permalink":"http://example.com/tags/TCP-IP%E5%8D%8F%E8%AE%AE%E6%A0%88/"},{"name":"OSI模型","slug":"OSI模型","permalink":"http://example.com/tags/OSI%E6%A8%A1%E5%9E%8B/"},{"name":"TCP/IP模型","slug":"TCP-IP模型","permalink":"http://example.com/tags/TCP-IP%E6%A8%A1%E5%9E%8B/"}]},{"title":"YOLOV3 基础学习","slug":"YOLO算法学习","date":"2021-10-26T07:42:43.000Z","updated":"2021-10-28T06:58:19.147Z","comments":true,"path":"2021/10/26/YOLO算法学习/","link":"","permalink":"http://example.com/2021/10/26/YOLO%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/","excerpt":"","text":"","categories":[{"name":"深度学习","slug":"深度学习","permalink":"http://example.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"YOLO","slug":"YOLO","permalink":"http://example.com/tags/YOLO/"},{"name":"卷积","slug":"卷积","permalink":"http://example.com/tags/%E5%8D%B7%E7%A7%AF/"},{"name":"上采样","slug":"上采样","permalink":"http://example.com/tags/%E4%B8%8A%E9%87%87%E6%A0%B7/"}]},{"title":"yolov3在ubuntu20.04下训练自己的数据集(从“零”开始)","slug":"yolov3在ubuntu20-04下训练自己的数据集","date":"2021-10-24T01:17:55.000Z","updated":"2021-10-28T10:31:17.570Z","comments":true,"path":"2021/10/24/yolov3在ubuntu20-04下训练自己的数据集/","link":"","permalink":"http://example.com/2021/10/24/yolov3%E5%9C%A8ubuntu20-04%E4%B8%8B%E8%AE%AD%E7%BB%83%E8%87%AA%E5%B7%B1%E7%9A%84%E6%95%B0%E6%8D%AE%E9%9B%86/","excerpt":"","text":"yolov3在ubuntu20.04下训练自己的数据集 背景基础 实现了在win10及树莓派4B下yolov3的配置及使用 目的 使用Ubuntu20.04下的yolov3 v4 对自己的数据集进行训练 将训练好的权重文件移植到机载树莓派上实现嵌入式系统实时的目标检测 利用机载树莓派实时的目标检测信息，将该点位置信息发送至感知无人机进行协作，同时将检测结果发送至地面站进行反馈 方法 darknet-yolov3训练自己的数据集（超详细） - AnswerThe - 博客园 (cnblogs.com) 准备工作 Ubuntu20.04的安装（这里选择双系统安装） (1条消息) win10+ubuntu双系统配置_CUG_UESTC的博客-CSDN博客 下载镜像：清华大学开源软件镜像站 | Tsinghua Open Source Mirror 制作启动盘 (1条消息) 用UltraISO制作Ubuntu16.04 U盘启动盘_YaoyuT的博客-CSDN博客 ubuntu20.04镜像百度网盘链接提取码：dslz 磁盘分配100G（102400MB）空间给ubuntu 遇到的坑 刚买的新机器装不上旧版本的（18.04和16.04）Ubuntu（电脑配置11代8核i7-1180H 16G 512GSSD RTX3050），旧的台式机试过没问题 128G的大U盘在制作启动盘时需要将U盘格式为FAT32，写入镜像后不能正常安装，换个小容量U盘解决 设置电脑BIOS,很多新机器·默认uefi启动模式，在boot里并没有这个模式切换选项，但是有一个关闭UEFI的选项，关闭后就可切换到Legacy启动，一般来说开机按F12进入到图三的界面时有UEFI：的U盘时就是正确的引导模式 环境安装 cuda11.4+cudnn11.4 (1条消息) ubuntu16.04+cuda8.0+cudnn5.1详细安装过程_weixin_43878078的博客-CSDN博客 (1条消息) Ubuntu18.04下复现YOLOv4（YOLOv3亦可）_hesongzefairy的博客-CSDN博客​ 下载cuda,终端输入： 1wget https://developer.download.nvidia.com/compute/cuda/11.4.1/local_installers/cuda_11.4.1_470.57.02_linux.run 安装： 1sudo sh cuda\\_11.4.1\\_470.57.02_linux.run 设置环境变量： 1sudo gedit ~/.bashrc 打开配置文件并在末尾加上： 12export PATH=/usr/local/cuda-8.0/bin$&#123;PATH:+:$&#123;PATH&#125;&#125;export LD\\_LIBRARY\\_PATH=/usr/local/cuda-8.0/lib64$&#123;LD\\_LIBRARY\\_PATH:+:$&#123;LD\\_LIBRARY\\_PATH&#125;&#125; 按如下步骤进行： 测试CUDA安装成了没： 1nvcc -V 下载cudnn 下载官网匹配版本 opencv4.5.0:教程中的图文对应OPENCV版本号有问题，方法都一样 (1条消息) Ubuntu20.04 配置Yolov4(gpu版，安装OpenCV，配置环境)_小菜彭-没拿过奖学金的废物的博客的博客-CSDN博客 训练数据 darknet-yolov3训练自己的数据集（超详细） - AnswerThe - 博客园 (cnblogs.com) 数据集可以用之前在Windows下标注的数据集，将之前标注好的图片和xml文件放到对应目录下。 在myData目录下创建test.py 12345678910111213141516171819202122232425262728293031import osimport randomtrainval_percent = 0.1train_percent = 0.9xmlfilepath = &#x27;Annotations&#x27;txtsavepath = &#x27;ImageSets\\Main&#x27;total_xml = os.listdir(xmlfilepath)num = len(total_xml)list = range(num)tv = int(num * trainval_percent)tr = int(tv * train_percent)trainval = random.sample(list, tv)train = random.sample(trainval, tr)ftrainval = open(&#x27;ImageSets/Main/trainval.txt&#x27;, &#x27;w&#x27;)ftest = open(&#x27;ImageSets/Main/test.txt&#x27;, &#x27;w&#x27;)ftrain = open(&#x27;ImageSets/Main/train.txt&#x27;, &#x27;w&#x27;)fval = open(&#x27;ImageSets/Main/val.txt&#x27;, &#x27;w&#x27;)for i in list: name = total_xml[i][:-4] + &#x27;\\n&#x27; if i in trainval: ftrainval.write(name) if i in train: ftest.write(name) else: fval.write(name) else: ftrain.write(name)ftrainval.close()ftrain.close()fval.close()ftest.close() 运行test.py生成对应的四个txt文件运行 用python脚本将数据集进行格式转换（YOLO 训练需要的格式），在darknet文件夹下新建一个my_lables.py文件(代码如下),运行后生成代表类别和相对位置的myData_train.txt，以及lables文件夹下的txt文件 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647import xml.etree.ElementTree as ETimport pickleimport osfrom os import listdir, getcwdfrom os.path import join #源代码sets=[(&#x27;2012&#x27;, &#x27;train&#x27;), (&#x27;2012&#x27;, &#x27;val&#x27;), (&#x27;2007&#x27;, &#x27;train&#x27;), (&#x27;2007&#x27;, &#x27;val&#x27;), (&#x27;2007&#x27;, &#x27;test&#x27;)]sets=[(&#x27;myData&#x27;, &#x27;train&#x27;)] # 改成自己建立的myDataclasses = [&quot;people&quot;] # 改成自己的类别def convert(size, box): dw = 1./(size[0]) dh = 1./(size[1]) x = (box[0] + box[1])/2.0 - 1 y = (box[2] + box[3])/2.0 - 1 w = box[1] - box[0] h = box[3] - box[2] x = x*dw w = w*dw y = y*dh h = h*dh return (x,y,w,h)def convert_annotation(year, image_id): in_file = open(&#x27;myData/Annotations/%s.xml&#x27;%(image_id)) # 源代码VOCdevkit/VOC%s/Annotations/%s.xml out_file = open(&#x27;myData/labels/%s.txt&#x27;%(image_id), &#x27;w&#x27;) # 源代码VOCdevkit/VOC%s/labels/%s.txt tree=ET.parse(in_file) root = tree.getroot() size = root.find(&#x27;size&#x27;) w = int(size.find(&#x27;width&#x27;).text) h = int(size.find(&#x27;height&#x27;).text) for obj in root.iter(&#x27;object&#x27;): difficult = obj.find(&#x27;difficult&#x27;).text cls = obj.find(&#x27;name&#x27;).text if cls not in classes or int(difficult)==1: continue cls_id = classes.index(cls) xmlbox = obj.find(&#x27;bndbox&#x27;) b = (float(xmlbox.find(&#x27;xmin&#x27;).text), float(xmlbox.find(&#x27;xmax&#x27;).text), float(xmlbox.find(&#x27;ymin&#x27;).text), float(xmlbox.find(&#x27;ymax&#x27;).text)) bb = convert((w,h), b) out_file.write(str(cls_id) + &quot; &quot; + &quot; &quot;.join([str(a) for a in bb]) + &#x27;\\n&#x27;)wd = getcwd()for year, image_set in sets: if not os.path.exists(&#x27;myData/labels/&#x27;): # 改成自己建立的myData os.makedirs(&#x27;myData/labels/&#x27;) image_ids = open(&#x27;myData/ImageSets/Main/%s.txt&#x27;%(image_set)).read().strip().split() list_file = open(&#x27;myData/%s_%s.txt&#x27;%(year, image_set), &#x27;w&#x27;) for image_id in image_ids: list_file.write(&#x27;%s/myData/JPEGImages/%s.jpg\\n&#x27;%(wd, image_id)) convert_annotation(year, image_id) list_file.close() 打开自己的cfg文件如图按照自己电脑配置修改训练批次和训练迭代次数。 据实际情况分别修改三处classes（每个[yolo]下）,filters=(classes + 5)x3(每个[yolo]上的第一个[convolutional])。 修改cfg/my_data.data 新建myData.names 下载预训练权重，网上找个拷贝进去 预训练权重链接: https://pan.baidu.com/s/10HPZsmBP8mpU0HcHLgSk-Q 提取码: 76fq 开始训练： 1./darknet detector train cfg/my\\_data.data cfg/my\\_yolov3.cfg darknet53.conv.74 从停止处重新训练： 1./darknet detector train cfg/my\\_data.data cfg/my\\_yolov3.cfg darknet53.conv.74 -gups 0,1,2,3 myData/weights/my_yolov3.backup -gpus 0,1,2,3 结果分析 纵坐标平均loss（误差）接近0.0359，即变化不大时可停止训练。横坐标batch（每batch（64）个样本更新一次参数） 当前训练的迭代次数: 6478,总体的 Loss(损失）:0.0279,平均 Loss:0.0359 测试效果： 1./darknet detect cfg/my\\_yolov3.cfg weights/my\\_yolov3.weights 72.jpg","categories":[{"name":"深度学习","slug":"深度学习","permalink":"http://example.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"},{"name":"Ubuntu","slug":"深度学习/Ubuntu","permalink":"http://example.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/Ubuntu/"}],"tags":[{"name":"YOLO","slug":"YOLO","permalink":"http://example.com/tags/YOLO/"},{"name":"目标识别检测","slug":"目标识别检测","permalink":"http://example.com/tags/%E7%9B%AE%E6%A0%87%E8%AF%86%E5%88%AB%E6%A3%80%E6%B5%8B/"},{"name":"训练数据集","slug":"训练数据集","permalink":"http://example.com/tags/%E8%AE%AD%E7%BB%83%E6%95%B0%E6%8D%AE%E9%9B%86/"}]},{"title":"不花一分钱搭建个人博客","slug":"不花一分钱搭建个人博客","date":"2021-10-22T06:08:00.000Z","updated":"2021-10-25T01:27:26.548Z","comments":true,"path":"2021/10/22/不花一分钱搭建个人博客/","link":"","permalink":"http://example.com/2021/10/22/%E4%B8%8D%E8%8A%B1%E4%B8%80%E5%88%86%E9%92%B1%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/","excerpt":"","text":"不花一分钱搭建个人博客，有手就行起因 前段时间在网上找代码，看到一位大佬的个人博客。 看到网址后缀有github，对新鲜事物充满好奇又有动手能力的我。遇到这种情况怎么说，当然是打开CSDN 搜索关键字github.io。果然一大堆教程，又了解到一个用 Node.js 构建的快速、简洁且强大的博客框架:Hexo 。最初由Tommy Chen于2012年创建和维护。从那时起，它帮助成千上万的人建立了他们的梦想网站/博客。 上手 目的 那么如何基于github和Hexo搭建个人博客呢 (3条消息) 搭建GitHub免费个人网站（详细教程）_苍何的博客-CSDN博客_用github搭建个人网站 方法 注册gtihub 安装node.js 安装并配置git 安装hexo并新建GitHub仓库 修改主题，网上搜hexo主题选择自己喜欢的风格 感受下大家的魔改版 云游君的小站 (yunyoujun.cn) 小白妹妹写代码 部署好模板后，问题又来了：怎么写博客 这里介绍下我自己的方法，在\\hexo\\source_posts目录下，新建.md的博客 内容格式如图，其中tag为标签，categories为分类 OK，现在模板有了，博客内容也有了。问题又来了：网站加载速度有时候特别慢，那咋办嘛 * 用自己的服务器搭建的，可以试下CDN加速 * 换下图片存储的位置，网上有很多免费的图片托管网站，但是一张一张的存太麻烦了 * * 直接存到幕布上，导出HTML文件，转为.md文件，复制想要的内容到自己的博客中，适当修改下格式，大功告成。 结果 我选一款比较简洁的模板，欢迎来访。，增加了页脚网站运行时间、不蒜子网页访问统计等功能 结论 前后尝试试过几种模板，配置起来都不算难。遇到问题先百度下，祝你好运。","categories":[{"name":"搭建个人博客","slug":"搭建个人博客","permalink":"http://example.com/categories/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://example.com/tags/hexo/"},{"name":"markdown","slug":"markdown","permalink":"http://example.com/tags/markdown/"}],"author":"Ethan"},{"title":"YOLO算法在windows下训练自己的数据集","slug":"YOLO算法在windows下训练自己的数据集","date":"2021-10-21T11:20:00.000Z","updated":"2021-10-23T06:45:34.199Z","comments":true,"path":"2021/10/21/YOLO算法在windows下训练自己的数据集/","link":"","permalink":"http://example.com/2021/10/21/YOLO%E7%AE%97%E6%B3%95%E5%9C%A8windows%E4%B8%8B%E8%AE%AD%E7%BB%83%E8%87%AA%E5%B7%B1%E7%9A%84%E6%95%B0%E6%8D%AE%E9%9B%86/","excerpt":"","text":"YOLO算法在windows下训练自己的数据集 背景基础 * 已有在官方权重下，YOLOV3算法在识别物体上的测试效果 * 特定数据集的制作与训练实现特有的目标检测 目的 目标的检测 方法 (1条消息) win10下yolov3训练自己的数据集_congcong7267的博客-CSDN博客 训练自己的数据集、 每种物体采集大概两三百张照片（距离、背景、光线） 标注图片中的目标，制作数据集 打开win10终端，cd进入darknet-master\\build\\darknet\\x64，darknet.exe detector train data/obj.data yolo-obj.cfg darknet53.conv.74 开始训练 生成权重文件移植到树莓派上进行测试 backup文件下最后一个权重文件复制到build\\darknet\\x64\\ 打开win10终端，cd进入然后运行darknet-master\\build\\darknet\\x64路径 输入：darknet.exe detector test data/obj.data yolo-obj.cfg yolo-obj_100.weights（olo-obj_100.weights为训练好的权重名） 终端会提醒你输入图片路径，然后你输入测试图片的绝对路径即可看到效果 实践 (2条消息) win10下yolov3训练自己的数据集_congcong7267的博客-CSDN博客 新建yolo-obj.cfg文件，将batch 改成64 ：batch=64，subdivisions=64 在Darknet中，batch和subdivisions是结合使用的，例如设置batch=64，subdivisions=16，表示训练的过程中将一次性加载64张图片进内存，然后分16次完成前向传播，意思是每次4张，前向传播的循环过程中累加loss求平均，待64张图片都完成前向传播后，再一次性后传更新参数。(yolov3.cfg参数说明及调参经验 - 知乎 (zhihu.com)) 在build\\darknet\\x64\\data\\下新建obj.names文件，写入自己的类名 在build\\darknet\\x64\\data\\下新建obj.data文件 制作数据集 图片批量顺序命名py脚本 使用labelimg标注图片中的目标，生成xml文件 使用py脚本将xml文件转为txt文件 将所有样本图片及对应的的txt文件)放到：build\\darknet\\x64\\data\\obj\\ 在build\\darknet\\x64\\data\\下新建train.txt，训练图片的路径放入文件 将darknet的预训练权重放入build\\darknet\\x64 预训练权重文件 密码：x5ht 在\\darknet路径下修改网络配置文件Makefile 对比官方makefile修改：（其中C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v11.4/ 为自己的CUDA安装路径） （下载链接 提取码：jh1i）） GPU=1 CUDNN=1 NVCC=C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v11.4/bin/nvcc COMMON+= -DGPU -I/C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v11.4/include LDFLAGS+= -L/C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v11.4/lib -lcuda -lcudart -lcublas -lcurand 打开cmd，cd进入darknet-master\\build\\darknet\\x64路径，输入：darknet.exe detector train data/obj.data yolo-obj.cfg darknet53.conv.74 开始训练 avg loss接近0.XX且变化不大时可停止训练，将x64\\backup下的weight文件复制到\\x64下，cd进入darknet-master\\build\\darknet\\x64路径运行darknet.exe detector test data/obj.data yolo-obj.cfg yolo-obj_last.weights，程序会提示输入待检测图片的路径。 结果 纵坐标平均loss（误差）接近0.545，即变化不大时可停止训练。横坐标batch（每batch（64）个样本更新一次参数） 在YOLOv3中，Loss分为三个部分: 1、一个是x、y、w、h部分带来的误差，也就是bbox带来的loss 2、一个是置信度带来的误差，也就是obj带来的loss 3、最后一个是类别带来的误差，也就是class带来的loss 检测效果测试：训练时的数据集90%是 图像数据，对比使用官方权重与自己训练的数据集检测目标时，由于检测结果受到样本数量的影响两者检测结果均不为理想。 avg loss（误差）接近0.219时，基本不再变化 检测结果 参数分析： 1623： 当前训练的迭代次数; 0.215670： 总体的 Loss(损失）; 0.232835 avg： 平均 Loss, 这个数值应该越低越好, 一般来说, 一旦这个数值低于 0.060730 avg 就可以终止训练了; 0.001000 rate： 当前的学习率, 在.cfg文件中定义的; 9.07000 seconds： 当前批次训练花费的总时间; 103875 images： 这一行最后的这个数值是 9798*64 的大小, 表示到目前为止, 参与训练的图片的总量.","categories":[{"name":"深度学习","slug":"深度学习","permalink":"http://example.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"},{"name":"windos","slug":"深度学习/windos","permalink":"http://example.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/windos/"}],"tags":[{"name":"YOLO","slug":"YOLO","permalink":"http://example.com/tags/YOLO/"},{"name":"目标识别检测","slug":"目标识别检测","permalink":"http://example.com/tags/%E7%9B%AE%E6%A0%87%E8%AF%86%E5%88%AB%E6%A3%80%E6%B5%8B/"},{"name":"训练数据集","slug":"训练数据集","permalink":"http://example.com/tags/%E8%AE%AD%E7%BB%83%E6%95%B0%E6%8D%AE%E9%9B%86/"}],"author":"Ethan"},{"title":"基于YOLO的目标识别检测","slug":"基于YOLO的目标识别检测","date":"2021-10-21T10:04:50.000Z","updated":"2021-10-22T04:03:06.125Z","comments":true,"path":"2021/10/21/基于YOLO的目标识别检测/","link":"","permalink":"http://example.com/2021/10/21/%E5%9F%BA%E4%BA%8EYOLO%E7%9A%84%E7%9B%AE%E6%A0%87%E8%AF%86%E5%88%AB%E6%A3%80%E6%B5%8B/","excerpt":"","text":"基于YOLO的目标识别检测 性能目标： 目标识别准确率大于90% 机载相机的有效地空检测距离大于10米 所选取相机能实现自主或结合机载电脑实时处理目标识别 感受下基于树莓派的YOLO目标检测算法（可见光）： 独家 | 在树莓派+Movidius NCS上运用YOLO和Tiny-YOLO完成目标检测（附代码下载）_数据派THU-CSDN博客 在树莓派4使用YOLO v3 Tiny进行实时对象检测_weixin_43878078的博客-CSDN博客_树莓派yolo目标检测 方法论证与实践 (1条消息) 在树莓派4使用YOLO v3 Tiny进行实时对象检测_weixin_43878078的博客-CSDN博客_树莓派yolo目标检测 YOLO算法在树莓派3B+、4B上实现 * 步骤 * 准备Python和Pi相机 * 安装 Ninja Building tool（控制编译的工具，它相对于Makefile这套工具更注重于编译速度） * 安装修改后的 NNPACK（加速神经网络计算的加速包，NNPACK可以在多核CPU平台上提高卷积层计算性能） * 安装darknet-nnpack（目的是给树莓派配置yolo模型，Darknet是一个小众的深度学习框架） * 存在问题 * 安装完成，使用树莓派摄像头进行测试。从摄像头获取图像，通过YOLO算法实时的识别物体类别，使用usb摄像头会比CSI（Camera Serial Interface）接口的摄像头慢很多。无法识别摄像头，原因可能是： * ①摄像头硬件有问题 * ②树莓派上的摄像头驱动等存在问题。 YOLOV3在Windows10（OpenCV3.4+CUDA11.4（CUDNN）+VisualStudio2017）下的实现 (1条消息) Windows10+YOLOV3+VisualStudio2017最新版本超详细过程_【秋名鱼酱的博客】-CSDN博客_win yolov3 * 步骤 * 安装最新版本的cuda和cudnn（CUDA是NVIDIA推出的用于自家GPU的并行计算框架，CUDNN是NVIDIA打造的针对深度神经网络的加速库，是一个用于深层神经网络的GPU加速库） * 安装OpenCV3.4（通过OpenCV调用dll实时检测） * 安装vs2017（使用本身2017对YOLOV3中的darknet项目文件进行编译） * 测试 * 在测试效果之前还需要添加以下官网上下载训练好的权重文件 * 权重文件保存的就是训练好的网络各层的权值，也就是通过训练集训练出来的。训练好之后，应用时只要加载权值就可以，不再需要训练集了 * 输入检测程序命令，实现对JPG、avi文件以及调用摄像头的实时目标检测 实验结果使用官方提供的权重文件检测对一下目标进行检测 视频检测 视频检测效果 制作训练集* YOLO有自己训练好的数据集，在YOLO v2 中，数据集可检测的类别达9000种以上，但是9000毕竟不是全部，它能涵盖大部分的物体识别，但是可能对于某些用户来说是不够的，所以我们需要学习它的数据集制作方法。 * 数据集分为以下几个部分： * 1.数据集的搜集，这一部分主要是在网上搜集整理相关数据集的图片，比如我要做某种猫的数据集，我需要上网上查找这种猫的图片；我需要做自己做的手工艺品的数据集，那我需要自己拍摄等等。 * 2.数据集的标注，计算机去认识一个物体，需要人去告诉他，哪个物体，是什么。就像我们在小时候，我们的父母会一点一点耐心教我们，什么是桌子，什么是椅子，什么是筷子，什么是树，什么是花……数据集的标注就是一个“教授”的过程。 * 3.数据集的训练，不是别人一教，你就能学会的，你需要不断地练习，比如说话，小时候父母不厌其烦的教我们；比如写汉字，中国人最应该骄傲的就是我们学会了世界上最难的一门语言，并且能够熟练应用。这就是因为我们从上学开始，老师就教我们写字，一写就是好几十遍……计算机也是如此，想让计算机明白什么是花，什么是自行车，就要让他“训练”，让他学会。 * 4.数据集的应用，我们学会说话，学会认识物体，目的就是为了应用，学会说话，我们可以交流，认识自行车，是我们能够方便交通……数据集也一样，训练好的数据集的目的就是为了应用，或者说，我们训练数据集是因为我们需要应用这个数据集，例如，我们需要检测人流量，首先我们需要识别人，当然现在就有很多人体识别的算法，如果我们要采用数据集来识别，我们需要先制作一个数据集，然后在应用数据集完成我们需要的功能","categories":[{"name":"深度学习","slug":"深度学习","permalink":"http://example.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"},{"name":"树莓派","slug":"深度学习/树莓派","permalink":"http://example.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E6%A0%91%E8%8E%93%E6%B4%BE/"}],"tags":[{"name":"训练集","slug":"训练集","permalink":"http://example.com/tags/%E8%AE%AD%E7%BB%83%E9%9B%86/"},{"name":"目标识别","slug":"目标识别","permalink":"http://example.com/tags/%E7%9B%AE%E6%A0%87%E8%AF%86%E5%88%AB/"},{"name":"YOLO","slug":"YOLO","permalink":"http://example.com/tags/YOLO/"}],"author":"Ethan"},{"title":"戴面具的猫","slug":"test4","date":"2021-10-20T14:08:50.000Z","updated":"2021-10-22T03:37:29.132Z","comments":true,"path":"2021/10/20/test4/","link":"","permalink":"http://example.com/2021/10/20/test4/","excerpt":"","text":"图片","categories":[{"name":"图片","slug":"图片","permalink":"http://example.com/categories/%E5%9B%BE%E7%89%87/"}],"tags":[{"name":"蒙面猫猫","slug":"蒙面猫猫","permalink":"http://example.com/tags/%E8%92%99%E9%9D%A2%E7%8C%AB%E7%8C%AB/"},{"name":"吴彦祖","slug":"吴彦祖","permalink":"http://example.com/tags/%E5%90%B4%E5%BD%A6%E7%A5%96/"},{"name":"胖橘","slug":"胖橘","permalink":"http://example.com/tags/%E8%83%96%E6%A9%98/"},{"name":"HYUKOH","slug":"HYUKOH","permalink":"http://example.com/tags/HYUKOH/"}],"author":"Ethan"}],"categories":[{"name":"计算机网络","slug":"计算机网络","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"},{"name":"深度学习","slug":"深度学习","permalink":"http://example.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"},{"name":"Ubuntu","slug":"深度学习/Ubuntu","permalink":"http://example.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/Ubuntu/"},{"name":"搭建个人博客","slug":"搭建个人博客","permalink":"http://example.com/categories/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"name":"windos","slug":"深度学习/windos","permalink":"http://example.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/windos/"},{"name":"树莓派","slug":"深度学习/树莓派","permalink":"http://example.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E6%A0%91%E8%8E%93%E6%B4%BE/"},{"name":"图片","slug":"图片","permalink":"http://example.com/categories/%E5%9B%BE%E7%89%87/"}],"tags":[{"name":"协议栈","slug":"协议栈","permalink":"http://example.com/tags/%E5%8D%8F%E8%AE%AE%E6%A0%88/"},{"name":"TCP/IP协议栈","slug":"TCP-IP协议栈","permalink":"http://example.com/tags/TCP-IP%E5%8D%8F%E8%AE%AE%E6%A0%88/"},{"name":"OSI模型","slug":"OSI模型","permalink":"http://example.com/tags/OSI%E6%A8%A1%E5%9E%8B/"},{"name":"TCP/IP模型","slug":"TCP-IP模型","permalink":"http://example.com/tags/TCP-IP%E6%A8%A1%E5%9E%8B/"},{"name":"YOLO","slug":"YOLO","permalink":"http://example.com/tags/YOLO/"},{"name":"卷积","slug":"卷积","permalink":"http://example.com/tags/%E5%8D%B7%E7%A7%AF/"},{"name":"上采样","slug":"上采样","permalink":"http://example.com/tags/%E4%B8%8A%E9%87%87%E6%A0%B7/"},{"name":"目标识别检测","slug":"目标识别检测","permalink":"http://example.com/tags/%E7%9B%AE%E6%A0%87%E8%AF%86%E5%88%AB%E6%A3%80%E6%B5%8B/"},{"name":"训练数据集","slug":"训练数据集","permalink":"http://example.com/tags/%E8%AE%AD%E7%BB%83%E6%95%B0%E6%8D%AE%E9%9B%86/"},{"name":"hexo","slug":"hexo","permalink":"http://example.com/tags/hexo/"},{"name":"markdown","slug":"markdown","permalink":"http://example.com/tags/markdown/"},{"name":"训练集","slug":"训练集","permalink":"http://example.com/tags/%E8%AE%AD%E7%BB%83%E9%9B%86/"},{"name":"目标识别","slug":"目标识别","permalink":"http://example.com/tags/%E7%9B%AE%E6%A0%87%E8%AF%86%E5%88%AB/"},{"name":"蒙面猫猫","slug":"蒙面猫猫","permalink":"http://example.com/tags/%E8%92%99%E9%9D%A2%E7%8C%AB%E7%8C%AB/"},{"name":"吴彦祖","slug":"吴彦祖","permalink":"http://example.com/tags/%E5%90%B4%E5%BD%A6%E7%A5%96/"},{"name":"胖橘","slug":"胖橘","permalink":"http://example.com/tags/%E8%83%96%E6%A9%98/"},{"name":"HYUKOH","slug":"HYUKOH","permalink":"http://example.com/tags/HYUKOH/"}]}